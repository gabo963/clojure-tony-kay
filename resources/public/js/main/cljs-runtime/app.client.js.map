{"version":3,"sources":["app/client.cljs"],"mappings":"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","names":["options__59208__auto__","_","props","params","com.fulcrologic.fulcro.components/make-state-map","com.fulcrologic.fulcro.components/wrapped-render","map__65549","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/app","js/app.client","js/app.client.Car","props__59209__auto__","this__59210__auto__","temp__5802__auto__","init-state__59211__auto__","obj65554","G__65555","G__65556","goog.object/get","obj65561","com.fulcrologic.fulcro.components/configure-component!","app.client/Car","this","id","model","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","app.client/ui-car","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","app.client/make-older","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__65562","p__65564","map__65565","env","temp__5804__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update-in","cljs.core/inc","map__65570","js/app.client.Person","obj65590","G__65592","G__65593","obj65596","app.client/Person","name","age","cars","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3","G__65584","cljs.core.map.cljs$core$IFn$_invoke$arity$2","app.client/ui-person","p__65600","map__65601","map__65603","js/app.client.PersonList","obj65615","G__65616","G__65617","obj65619","app.client/PersonList","people","cnt","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__65608","map__65609","c","app.client/ui-person-list","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","map__65620","js/app.client.Root","obj65626","G__65627","G__65628","obj65630","app.client/Root","list","js/app.client.APP","app.client/APP","com.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$0","app.client/init","com.fulcrologic.fulcro.application.mount_BANG_.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns app.client\n  (:require\n    [com.fulcrologic.fulcro.application :as app]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom :refer [div ul li h1 h2 h3 h4 button]]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.fulcro.mutations :refer [defmutation]]\n    [com.fulcrologic.fulcro.algorithms.data-targeting :as targeting]))\n\n(defsc Car [this {:car/keys [id model] :as props}]\n  {:query [:car/id :car/model]\n   :ident :car/id\n   :initial-state {:car/id :param/id\n                   :car/model :param/model}}\n  (div (h4 model)))\n\n(def ui-car (comp/factory Car {:keyfn :car/id}))\n\n(defmutation make-older [{:person/keys [id]}]\n  (action [{:keys [state]}]\n    (swap! state update-in [:person/id id :person/age] inc)))\n\n(defsc Person [this {:person/keys [id name age cars] :as props}]\n  {:query [:person/id :person/name :person/age {:person/cars (comp/get-query Car)}]\n   :ident :person/id\n   :initial-state {:person/id :param/id\n                   :person/name :param/name\n                   :person/age 0\n                   :person/cars [{:id 20 :model \"Forester\"}\n                                 {:id 21 :model \"Leaf\"}\n                                 {:id 22 :model \"Pilot\"}]}}\n  (div :.ui.segment {}\n    (h2 \"Name: \" name)\n    (h2 \"Age: \" age)\n    (button :.ui.button {:onClick\n      #(comp/transact! this [(make-older {:person/id id})] {:refresh [:person-list/people]})} \"Make Older\")\n    (h2 \"id: \" id)\n    (h2 \"Cars:\")\n    (ul (map ui-car cars)))\n  )\n\n(def ui-person (comp/factory Person {:keyfn :person/id}))\n\n(defsc PersonList [this { :person-list/keys [people]}]\n  {:query [{:person-list/people (comp/get-query Person)}]\n   :ident (fn [] [:component/id ::person-list])\n   :initial-state {:person-list/people [{:id 1 :name \"Daniel\"} {:id 2 :name \"Nicolas\"}]}}\n  (div\n    (let [cnt (reduce (fn [c {:person/keys [age]}]\n                        (if (> age 30) (inc c) c)) 0 people)]\n    (h2 \"People Over 30: \" cnt))\n    (ul (map ui-person people))\n  ))\n\n(def ui-person-list (comp/factory PersonList))\n\n(defsc Root [this {:root/keys [list]}]\n  {:query [{:root/list (comp/get-query PersonList)}]\n   :initial-state {:root/list {}}}\n  (div :.ui.segment{}\n    (if list\n      (div (h1 \"People\")\n           (ui-person-list list))\n      (h3 \"Loading...\"))))\n\n(defonce APP (app/fulcro-app))\n\n(defn ^:export init []\n  (app/mount! APP Root \"app\"))\n\n(comment\n\n  (comp/get-query PersonList)\n  (comp/get-initial-state Sample)\n  (reset! (::app/state-atom APP) {})\n\n  (app/current-state APP)\n\n  (app/schedule-render! APP)\n\n\n  )\n\n\n"]}