["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.rendering.ident_optimized_render');\ngoog.require('cljs.core');\ngoog.require('com.fulcrologic.fulcro.rendering.keyframe_render');\ngoog.require('com.fulcrologic.fulcro.algorithms.denormalize');\ngoog.require('com.fulcrologic.fulcro.components');\ngoog.require('clojure.set');\ngoog.require('edn_query_language.core');\ngoog.require('taoensso.timbre');\n/**\n * Checks the given `idents` and returns a subset of them where the data they refer to has changed\n * between `old-state` and `new-state`.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.dirty_table_entries = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$dirty_table_entries(old_state,new_state,idents){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,ident){\nif((cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_state,ident) === cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_state,ident))){\nreturn result;\n} else {\nreturn cljs.core.cons(ident,result);\n}\n}),cljs.core.List.EMPTY,idents);\n});\n/**\n * Uses the component's query and the current application state to query for the current value of that component's\n *   props (subtree). It then sends those props to the component via \"props tunnelling\" (setting them on a well-known key in\n *   component-local state).\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_component_BANG_(app__$1,ident,c){\nif(cljs.core.truth_((function (){var and__4120__auto__ = c;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn ident;\n} else {\nreturn and__4120__auto__;\n}\n})())){\nvar map__62655 = app__$1;\nvar map__62655__$1 = (((((!((map__62655 == null))))?(((((map__62655.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62655.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62655):map__62655);\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62655__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar state_map = cljs.core.deref(state_atom);\nvar query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(c,state_map);\nvar q = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.createAsIfByAssoc([ident,query])], null);\nvar data_tree = (cljs.core.truth_(query)?com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(q,state_map,state_map):null);\nvar new_props = cljs.core.get.cljs$core$IFn$_invoke$arity$2(data_tree,ident);\nif(cljs.core.truth_(query)){\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.rendering.ident-optimized-render\",null,41,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (map__62655,map__62655__$1,state_atom,state_map,query,q,data_tree,new_props){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Query was empty. Refresh failed for \",cljs.core.type(c)], null);\n});})(map__62655,map__62655__$1,state_atom,state_map,query,q,data_tree,new_props))\n,null)),null,1925233698);\n}\n\nif(cljs.core.truth_(com.fulcrologic.fulcro.components.mounted_QMARK_(c))){\nreturn c.setState(((function (map__62655,map__62655__$1,state_atom,state_map,query,q,data_tree,new_props){\nreturn (function (s){\nreturn ({\"fulcro$value\": new_props});\n});})(map__62655,map__62655__$1,state_atom,state_map,query,q,data_tree,new_props))\n);\n} else {\nreturn null;\n}\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"info\",\"info\",-317069002),\"com.fulcrologic.fulcro.rendering.ident-optimized-render\",null,45,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Failed to do optimized update. Component\",com.fulcrologic.fulcro.components.class__GT_registry_key(com.fulcrologic.fulcro.components.react_type(c)),\"queries for data that changed, but does not have an ident. If that is your application root,\",\"consider moving that changing state to a child component.\"], null);\n}),null)),null,1286501251);\n\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Targeted update failed\",cljs.core.PersistentArrayMap.EMPTY);\n}\n});\n/**\n * Renders *only* components that *have* the given ident.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_components_with_ident_BANG_(app__$1,ident){\nvar seq__62661 = cljs.core.seq(com.fulcrologic.fulcro.components.ident__GT_components(app__$1,ident));\nvar chunk__62662 = null;\nvar count__62663 = (0);\nvar i__62664 = (0);\nwhile(true){\nif((i__62664 < count__62663)){\nvar c = chunk__62662.cljs$core$IIndexed$_nth$arity$2(null,i__62664);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,ident,c);\n\n\nvar G__62787 = seq__62661;\nvar G__62788 = chunk__62662;\nvar G__62789 = count__62663;\nvar G__62790 = (i__62664 + (1));\nseq__62661 = G__62787;\nchunk__62662 = G__62788;\ncount__62663 = G__62789;\ni__62664 = G__62790;\ncontinue;\n} else {\nvar temp__5804__auto__ = cljs.core.seq(seq__62661);\nif(temp__5804__auto__){\nvar seq__62661__$1 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__62661__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__62661__$1);\nvar G__62791 = cljs.core.chunk_rest(seq__62661__$1);\nvar G__62792 = c__4550__auto__;\nvar G__62793 = cljs.core.count(c__4550__auto__);\nvar G__62794 = (0);\nseq__62661 = G__62791;\nchunk__62662 = G__62792;\ncount__62663 = G__62793;\ni__62664 = G__62794;\ncontinue;\n} else {\nvar c = cljs.core.first(seq__62661__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,ident,c);\n\n\nvar G__62795 = cljs.core.next(seq__62661__$1);\nvar G__62796 = null;\nvar G__62797 = (0);\nvar G__62798 = (0);\nseq__62661 = G__62795;\nchunk__62662 = G__62796;\ncount__62663 = G__62797;\ni__62664 = G__62798;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n/**\n * Renders components that have, or query for, the given ident.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_dependents_of_ident_BANG_(app__$1,ident){\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_(app__$1,ident);\n\nvar map__62669 = app__$1;\nvar map__62669__$1 = (((((!((map__62669 == null))))?(((((map__62669.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62669.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62669):map__62669);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62669__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__62670 = cljs.core.deref(runtime_atom);\nvar map__62670__$1 = (((((!((map__62670 == null))))?(((((map__62670.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62670.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62670):map__62670);\nvar indexes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62670__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938));\nvar map__62671 = indexes;\nvar map__62671__$1 = (((((!((map__62671 == null))))?(((((map__62671.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62671.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62671):map__62671);\nvar prop__GT_classes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62671__$1,new cljs.core.Keyword(null,\"prop->classes\",\"prop->classes\",515892717));\nvar idents_in_joins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62671__$1,new cljs.core.Keyword(null,\"idents-in-joins\",\"idents-in-joins\",-1556962035));\nvar class__GT_components = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62671__$1,new cljs.core.Keyword(null,\"class->components\",\"class->components\",436435919));\nvar idents_in_joins__$1 = (function (){var or__4131__auto__ = idents_in_joins;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n})();\nif(cljs.core.contains_QMARK_(idents_in_joins__$1,ident)){\nvar classes = (prop__GT_classes.cljs$core$IFn$_invoke$arity$1 ? prop__GT_classes.cljs$core$IFn$_invoke$arity$1(ident) : prop__GT_classes.call(null,ident));\nif(cljs.core.seq(classes)){\nvar seq__62675 = cljs.core.seq(classes);\nvar chunk__62676 = null;\nvar count__62677 = (0);\nvar i__62678 = (0);\nwhile(true){\nif((i__62678 < count__62677)){\nvar class$ = chunk__62676.cljs$core$IIndexed$_nth$arity$2(null,i__62678);\nvar seq__62695_62800 = cljs.core.seq((class__GT_components.cljs$core$IFn$_invoke$arity$1 ? class__GT_components.cljs$core$IFn$_invoke$arity$1(class$) : class__GT_components.call(null,class$)));\nvar chunk__62697_62801 = null;\nvar count__62698_62802 = (0);\nvar i__62699_62803 = (0);\nwhile(true){\nif((i__62699_62803 < count__62698_62802)){\nvar component_62804 = chunk__62697_62801.cljs$core$IIndexed$_nth$arity$2(null,i__62699_62803);\nvar component_ident_62805 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component_62804);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,component_ident_62805,component_62804);\n\n\nvar G__62806 = seq__62695_62800;\nvar G__62807 = chunk__62697_62801;\nvar G__62808 = count__62698_62802;\nvar G__62809 = (i__62699_62803 + (1));\nseq__62695_62800 = G__62806;\nchunk__62697_62801 = G__62807;\ncount__62698_62802 = G__62808;\ni__62699_62803 = G__62809;\ncontinue;\n} else {\nvar temp__5804__auto___62810 = cljs.core.seq(seq__62695_62800);\nif(temp__5804__auto___62810){\nvar seq__62695_62811__$1 = temp__5804__auto___62810;\nif(cljs.core.chunked_seq_QMARK_(seq__62695_62811__$1)){\nvar c__4550__auto___62812 = cljs.core.chunk_first(seq__62695_62811__$1);\nvar G__62813 = cljs.core.chunk_rest(seq__62695_62811__$1);\nvar G__62814 = c__4550__auto___62812;\nvar G__62815 = cljs.core.count(c__4550__auto___62812);\nvar G__62816 = (0);\nseq__62695_62800 = G__62813;\nchunk__62697_62801 = G__62814;\ncount__62698_62802 = G__62815;\ni__62699_62803 = G__62816;\ncontinue;\n} else {\nvar component_62817 = cljs.core.first(seq__62695_62811__$1);\nvar component_ident_62818 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component_62817);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,component_ident_62818,component_62817);\n\n\nvar G__62820 = cljs.core.next(seq__62695_62811__$1);\nvar G__62821 = null;\nvar G__62822 = (0);\nvar G__62823 = (0);\nseq__62695_62800 = G__62820;\nchunk__62697_62801 = G__62821;\ncount__62698_62802 = G__62822;\ni__62699_62803 = G__62823;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\n\nvar G__62826 = seq__62675;\nvar G__62827 = chunk__62676;\nvar G__62828 = count__62677;\nvar G__62829 = (i__62678 + (1));\nseq__62675 = G__62826;\nchunk__62676 = G__62827;\ncount__62677 = G__62828;\ni__62678 = G__62829;\ncontinue;\n} else {\nvar temp__5804__auto__ = cljs.core.seq(seq__62675);\nif(temp__5804__auto__){\nvar seq__62675__$1 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__62675__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__62675__$1);\nvar G__62833 = cljs.core.chunk_rest(seq__62675__$1);\nvar G__62834 = c__4550__auto__;\nvar G__62835 = cljs.core.count(c__4550__auto__);\nvar G__62836 = (0);\nseq__62675 = G__62833;\nchunk__62676 = G__62834;\ncount__62677 = G__62835;\ni__62678 = G__62836;\ncontinue;\n} else {\nvar class$ = cljs.core.first(seq__62675__$1);\nvar seq__62706_62837 = cljs.core.seq((class__GT_components.cljs$core$IFn$_invoke$arity$1 ? class__GT_components.cljs$core$IFn$_invoke$arity$1(class$) : class__GT_components.call(null,class$)));\nvar chunk__62708_62838 = null;\nvar count__62709_62839 = (0);\nvar i__62710_62840 = (0);\nwhile(true){\nif((i__62710_62840 < count__62709_62839)){\nvar component_62841 = chunk__62708_62838.cljs$core$IIndexed$_nth$arity$2(null,i__62710_62840);\nvar component_ident_62842 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component_62841);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,component_ident_62842,component_62841);\n\n\nvar G__62843 = seq__62706_62837;\nvar G__62844 = chunk__62708_62838;\nvar G__62845 = count__62709_62839;\nvar G__62846 = (i__62710_62840 + (1));\nseq__62706_62837 = G__62843;\nchunk__62708_62838 = G__62844;\ncount__62709_62839 = G__62845;\ni__62710_62840 = G__62846;\ncontinue;\n} else {\nvar temp__5804__auto___62847__$1 = cljs.core.seq(seq__62706_62837);\nif(temp__5804__auto___62847__$1){\nvar seq__62706_62848__$1 = temp__5804__auto___62847__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__62706_62848__$1)){\nvar c__4550__auto___62849 = cljs.core.chunk_first(seq__62706_62848__$1);\nvar G__62850 = cljs.core.chunk_rest(seq__62706_62848__$1);\nvar G__62851 = c__4550__auto___62849;\nvar G__62852 = cljs.core.count(c__4550__auto___62849);\nvar G__62853 = (0);\nseq__62706_62837 = G__62850;\nchunk__62708_62838 = G__62851;\ncount__62709_62839 = G__62852;\ni__62710_62840 = G__62853;\ncontinue;\n} else {\nvar component_62854 = cljs.core.first(seq__62706_62848__$1);\nvar component_ident_62855 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component_62854);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,component_ident_62855,component_62854);\n\n\nvar G__62856 = cljs.core.next(seq__62706_62848__$1);\nvar G__62857 = null;\nvar G__62858 = (0);\nvar G__62859 = (0);\nseq__62706_62837 = G__62856;\nchunk__62708_62838 = G__62857;\ncount__62709_62839 = G__62858;\ni__62710_62840 = G__62859;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\n\nvar G__62860 = cljs.core.next(seq__62675__$1);\nvar G__62861 = null;\nvar G__62862 = (0);\nvar G__62863 = (0);\nseq__62675 = G__62860;\nchunk__62676 = G__62861;\ncount__62677 = G__62862;\ni__62678 = G__62863;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given an app and a `property-set`: returns the components that query for the items in property-set.\n * \n *   The `property-set` can be any sequence (ideally a set) of keywords and idents that can directly appear\n *   in a component query as a property or join key.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.props__GT_components = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$props__GT_components(app__$1,property_set){\nif(cljs.core.seq(property_set)){\nvar map__62717 = app__$1;\nvar map__62717__$1 = (((((!((map__62717 == null))))?(((((map__62717.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62717.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62717):map__62717);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62717__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__62718 = cljs.core.deref(runtime_atom);\nvar map__62718__$1 = (((((!((map__62718 == null))))?(((((map__62718.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62718.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62718):map__62718);\nvar indexes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62718__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938));\nvar map__62719 = indexes;\nvar map__62719__$1 = (((((!((map__62719 == null))))?(((((map__62719.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62719.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62719):map__62719);\nvar prop__GT_classes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62719__$1,new cljs.core.Keyword(null,\"prop->classes\",\"prop->classes\",515892717));\nvar class__GT_components = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62719__$1,new cljs.core.Keyword(null,\"class->components\",\"class->components\",436435919));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__62717,map__62717__$1,runtime_atom,map__62718,map__62718__$1,indexes,map__62719,map__62719__$1,prop__GT_classes,class__GT_components){\nreturn (function (result,prop){\nvar classes = (prop__GT_classes.cljs$core$IFn$_invoke$arity$1 ? prop__GT_classes.cljs$core$IFn$_invoke$arity$1(prop) : prop__GT_classes.call(null,prop));\nvar components = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (classes,map__62717,map__62717__$1,runtime_atom,map__62718,map__62718__$1,indexes,map__62719,map__62719__$1,prop__GT_classes,class__GT_components){\nreturn (function (p1__62715_SHARP_,p2__62716_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(p1__62715_SHARP_,(class__GT_components.cljs$core$IFn$_invoke$arity$1 ? class__GT_components.cljs$core$IFn$_invoke$arity$1(p2__62716_SHARP_) : class__GT_components.call(null,p2__62716_SHARP_)));\n});})(classes,map__62717,map__62717__$1,runtime_atom,map__62718,map__62718__$1,indexes,map__62719,map__62719__$1,prop__GT_classes,class__GT_components))\n,cljs.core.PersistentHashSet.EMPTY,classes);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(result,components);\n});})(map__62717,map__62717__$1,runtime_atom,map__62718,map__62718__$1,indexes,map__62719,map__62719__$1,prop__GT_classes,class__GT_components))\n,cljs.core.PersistentHashSet.EMPTY,property_set);\n} else {\nreturn null;\n}\n});\n/**\n * This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n * uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n * When it finds data that has changed it renders all of the components that depend on that data.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_stale_components_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_stale_components_BANG_(app__$1){\nvar map__62729 = app__$1;\nvar map__62729__$1 = (((((!((map__62729 == null))))?(((((map__62729.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62729.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62729):map__62729);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62729__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62729__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar map__62730 = cljs.core.deref(runtime_atom);\nvar map__62730__$1 = (((((!((map__62730 == null))))?(((((map__62730.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62730.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62730):map__62730);\nvar indexes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62730__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938));\nvar last_rendered_state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62730__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"last-rendered-state\",\"com.fulcrologic.fulcro.application/last-rendered-state\",1438978441));\nvar to_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62730__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829));\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62730__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206));\nvar map__62731 = indexes;\nvar map__62731__$1 = (((((!((map__62731 == null))))?(((((map__62731.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62731.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62731):map__62731);\nvar linked_props = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62731__$1,new cljs.core.Keyword(null,\"linked-props\",\"linked-props\",1547374714));\nvar ident__GT_components = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62731__$1,new cljs.core.Keyword(null,\"ident->components\",\"ident->components\",-1952169224));\nvar prop__GT_classes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62731__$1,new cljs.core.Keyword(null,\"prop->classes\",\"prop->classes\",515892717));\nvar idents_in_joins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62731__$1,new cljs.core.Keyword(null,\"idents-in-joins\",\"idents-in-joins\",-1556962035));\nvar limited_refresh_QMARK_ = cljs.core.seq(only_refresh);\nif(limited_refresh_QMARK_){\nvar map__62738 = cljs.core.group_by(edn_query_language.core.ident_QMARK_,only_refresh);\nvar map__62738__$1 = (((((!((map__62738 == null))))?(((((map__62738.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62738.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62738):map__62738);\nvar limited_idents = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62738__$1,true);\nvar limited_props = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62738__$1,false);\nvar limited_to_render = com.fulcrologic.fulcro.rendering.ident_optimized_render.props__GT_components(app__$1,limited_props);\nvar seq__62740_62869 = cljs.core.seq(limited_to_render);\nvar chunk__62742_62870 = null;\nvar count__62743_62871 = (0);\nvar i__62744_62872 = (0);\nwhile(true){\nif((i__62744_62872 < count__62743_62871)){\nvar c_62873 = chunk__62742_62870.cljs$core$IIndexed$_nth$arity$2(null,i__62744_62872);\nvar ident_62874 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(c_62873);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,ident_62874,c_62873);\n\n\nvar G__62875 = seq__62740_62869;\nvar G__62876 = chunk__62742_62870;\nvar G__62877 = count__62743_62871;\nvar G__62878 = (i__62744_62872 + (1));\nseq__62740_62869 = G__62875;\nchunk__62742_62870 = G__62876;\ncount__62743_62871 = G__62877;\ni__62744_62872 = G__62878;\ncontinue;\n} else {\nvar temp__5804__auto___62879 = cljs.core.seq(seq__62740_62869);\nif(temp__5804__auto___62879){\nvar seq__62740_62880__$1 = temp__5804__auto___62879;\nif(cljs.core.chunked_seq_QMARK_(seq__62740_62880__$1)){\nvar c__4550__auto___62881 = cljs.core.chunk_first(seq__62740_62880__$1);\nvar G__62882 = cljs.core.chunk_rest(seq__62740_62880__$1);\nvar G__62883 = c__4550__auto___62881;\nvar G__62884 = cljs.core.count(c__4550__auto___62881);\nvar G__62885 = (0);\nseq__62740_62869 = G__62882;\nchunk__62742_62870 = G__62883;\ncount__62743_62871 = G__62884;\ni__62744_62872 = G__62885;\ncontinue;\n} else {\nvar c_62886 = cljs.core.first(seq__62740_62880__$1);\nvar ident_62887 = com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(c_62886);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,ident_62887,c_62886);\n\n\nvar G__62888 = cljs.core.next(seq__62740_62880__$1);\nvar G__62889 = null;\nvar G__62890 = (0);\nvar G__62891 = (0);\nseq__62740_62869 = G__62888;\nchunk__62742_62870 = G__62889;\ncount__62743_62871 = G__62890;\ni__62744_62872 = G__62891;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar seq__62749 = cljs.core.seq(limited_idents);\nvar chunk__62750 = null;\nvar count__62751 = (0);\nvar i__62752 = (0);\nwhile(true){\nif((i__62752 < count__62751)){\nvar i = chunk__62750.cljs$core$IIndexed$_nth$arity$2(null,i__62752);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_(app__$1,i);\n\n\nvar G__62892 = seq__62749;\nvar G__62893 = chunk__62750;\nvar G__62894 = count__62751;\nvar G__62895 = (i__62752 + (1));\nseq__62749 = G__62892;\nchunk__62750 = G__62893;\ncount__62751 = G__62894;\ni__62752 = G__62895;\ncontinue;\n} else {\nvar temp__5804__auto__ = cljs.core.seq(seq__62749);\nif(temp__5804__auto__){\nvar seq__62749__$1 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__62749__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__62749__$1);\nvar G__62896 = cljs.core.chunk_rest(seq__62749__$1);\nvar G__62897 = c__4550__auto__;\nvar G__62898 = cljs.core.count(c__4550__auto__);\nvar G__62899 = (0);\nseq__62749 = G__62896;\nchunk__62750 = G__62897;\ncount__62751 = G__62898;\ni__62752 = G__62899;\ncontinue;\n} else {\nvar i = cljs.core.first(seq__62749__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_(app__$1,i);\n\n\nvar G__62900 = cljs.core.next(seq__62749__$1);\nvar G__62901 = null;\nvar G__62902 = (0);\nvar G__62903 = (0);\nseq__62749 = G__62900;\nchunk__62750 = G__62901;\ncount__62751 = G__62902;\ni__62752 = G__62903;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nvar state_map = cljs.core.deref(state_atom);\nvar idents_in_joins__$1 = (function (){var or__4131__auto__ = idents_in_joins;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n})();\nvar dirty_linked_props = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (state_map,idents_in_joins__$1,map__62729,map__62729__$1,runtime_atom,state_atom,map__62730,map__62730__$1,indexes,last_rendered_state,to_refresh,only_refresh,map__62731,map__62731__$1,linked_props,ident__GT_components,prop__GT_classes,idents_in_joins,limited_refresh_QMARK_){\nreturn (function (acc,p){\nif((!((cljs.core.get.cljs$core$IFn$_invoke$arity$2(state_map,p) === cljs.core.get.cljs$core$IFn$_invoke$arity$2(last_rendered_state,p))))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(acc,p);\n} else {\nreturn acc;\n}\n});})(state_map,idents_in_joins__$1,map__62729,map__62729__$1,runtime_atom,state_atom,map__62730,map__62730__$1,indexes,last_rendered_state,to_refresh,only_refresh,map__62731,map__62731__$1,linked_props,ident__GT_components,prop__GT_classes,idents_in_joins,limited_refresh_QMARK_))\n,cljs.core.PersistentHashSet.EMPTY,linked_props);\nvar map__62759 = cljs.core.group_by(edn_query_language.core.ident_QMARK_,to_refresh);\nvar map__62759__$1 = (((((!((map__62759 == null))))?(((((map__62759.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62759.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62759):map__62759);\nvar idents_to_force = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62759__$1,true);\nvar props_to_force = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62759__$1,false);\nvar props_to_force__$1 = clojure.set.union.cljs$core$IFn$_invoke$arity$2(props_to_force,dirty_linked_props);\nvar mounted_idents = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.keys(ident__GT_components),idents_in_joins__$1);\nvar stale_idents = com.fulcrologic.fulcro.rendering.ident_optimized_render.dirty_table_entries(last_rendered_state,state_map,mounted_idents);\nvar extra_to_force = com.fulcrologic.fulcro.rendering.ident_optimized_render.props__GT_components(app__$1,props_to_force__$1);\nvar all_idents = clojure.set.union.cljs$core$IFn$_invoke$arity$2(cljs.core.set(idents_to_force),cljs.core.set(stale_idents));\nvar seq__62762_62904 = cljs.core.seq(all_idents);\nvar chunk__62763_62905 = null;\nvar count__62764_62906 = (0);\nvar i__62765_62907 = (0);\nwhile(true){\nif((i__62765_62907 < count__62764_62906)){\nvar i_62908 = chunk__62763_62905.cljs$core$IIndexed$_nth$arity$2(null,i__62765_62907);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_(app__$1,i_62908);\n\n\nvar G__62909 = seq__62762_62904;\nvar G__62910 = chunk__62763_62905;\nvar G__62911 = count__62764_62906;\nvar G__62912 = (i__62765_62907 + (1));\nseq__62762_62904 = G__62909;\nchunk__62763_62905 = G__62910;\ncount__62764_62906 = G__62911;\ni__62765_62907 = G__62912;\ncontinue;\n} else {\nvar temp__5804__auto___62913 = cljs.core.seq(seq__62762_62904);\nif(temp__5804__auto___62913){\nvar seq__62762_62914__$1 = temp__5804__auto___62913;\nif(cljs.core.chunked_seq_QMARK_(seq__62762_62914__$1)){\nvar c__4550__auto___62915 = cljs.core.chunk_first(seq__62762_62914__$1);\nvar G__62916 = cljs.core.chunk_rest(seq__62762_62914__$1);\nvar G__62917 = c__4550__auto___62915;\nvar G__62918 = cljs.core.count(c__4550__auto___62915);\nvar G__62919 = (0);\nseq__62762_62904 = G__62916;\nchunk__62763_62905 = G__62917;\ncount__62764_62906 = G__62918;\ni__62765_62907 = G__62919;\ncontinue;\n} else {\nvar i_62920 = cljs.core.first(seq__62762_62914__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_dependents_of_ident_BANG_(app__$1,i_62920);\n\n\nvar G__62921 = cljs.core.next(seq__62762_62914__$1);\nvar G__62922 = null;\nvar G__62923 = (0);\nvar G__62924 = (0);\nseq__62762_62904 = G__62921;\nchunk__62763_62905 = G__62922;\ncount__62764_62906 = G__62923;\ni__62765_62907 = G__62924;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar seq__62771 = cljs.core.seq(extra_to_force);\nvar chunk__62772 = null;\nvar count__62773 = (0);\nvar i__62774 = (0);\nwhile(true){\nif((i__62774 < count__62773)){\nvar c = chunk__62772.cljs$core$IIndexed$_nth$arity$2(null,i__62774);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(c),c);\n\n\nvar G__62928 = seq__62771;\nvar G__62929 = chunk__62772;\nvar G__62930 = count__62773;\nvar G__62931 = (i__62774 + (1));\nseq__62771 = G__62928;\nchunk__62772 = G__62929;\ncount__62773 = G__62930;\ni__62774 = G__62931;\ncontinue;\n} else {\nvar temp__5804__auto__ = cljs.core.seq(seq__62771);\nif(temp__5804__auto__){\nvar seq__62771__$1 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__62771__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__62771__$1);\nvar G__62936 = cljs.core.chunk_rest(seq__62771__$1);\nvar G__62937 = c__4550__auto__;\nvar G__62938 = cljs.core.count(c__4550__auto__);\nvar G__62939 = (0);\nseq__62771 = G__62936;\nchunk__62772 = G__62937;\ncount__62773 = G__62938;\ni__62774 = G__62939;\ncontinue;\n} else {\nvar c = cljs.core.first(seq__62771__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_component_BANG_(app__$1,com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(c),c);\n\n\nvar G__62940 = cljs.core.next(seq__62771__$1);\nvar G__62941 = null;\nvar G__62942 = (0);\nvar G__62943 = (0);\nseq__62771 = G__62940;\nchunk__62772 = G__62941;\ncount__62773 = G__62942;\ni__62774 = G__62943;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}\n});\n/**\n * The top-level call for using this optimized render in your application.\n * \n *   If `:force-root? true` is passed in options, then it just forces a keyframe root render; otherwise\n *   it tries to minimize the work done for screen refresh to just the queries/refreshes needed by the\n *   data that has changed.\n */\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_ = (function com$fulcrologic$fulcro$rendering$ident_optimized_render$render_BANG_(var_args){\nvar G__62781 = arguments.length;\nswitch (G__62781) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,cljs.core.PersistentArrayMap.EMPTY);\n});\n\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__62782){\nvar map__62783 = p__62782;\nvar map__62783__$1 = (((((!((map__62783 == null))))?(((((map__62783.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62783.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62783):map__62783);\nvar options = map__62783__$1;\nvar force_root_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62783__$1,new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683));\nvar root_props_changed_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62783__$1,new cljs.core.Keyword(null,\"root-props-changed?\",\"root-props-changed?\",1999614835));\nif(cljs.core.truth_((function (){var or__4131__auto__ = force_root_QMARK_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn root_props_changed_QMARK_;\n}\n})())){\nreturn com.fulcrologic.fulcro.rendering.keyframe_render.render_BANG_(app__$1,options);\n} else {\ntry{return com.fulcrologic.fulcro.rendering.ident_optimized_render.render_stale_components_BANG_(app__$1);\n}catch (e62785){var e = e62785;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"info\",\"info\",-317069002),\"com.fulcrologic.fulcro.rendering.ident-optimized-render\",null,146,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e,map__62783,map__62783__$1,options,force_root_QMARK_,root_props_changed_QMARK_){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Optimized render failed. Falling back to root render.\"], null);\n});})(e,map__62783,map__62783__$1,options,force_root_QMARK_,root_props_changed_QMARK_))\n,null)),null,994030978);\n\nreturn com.fulcrologic.fulcro.rendering.keyframe_render.render_BANG_(app__$1,options);\n}}\n});\n\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$lang$maxFixedArity = 2;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A render optimization algorithm for refreshing the UI via props tunnelling (setting new props on a component's\n  state in a pre-agreed location). This algorithm analyzes database changes and on-screen components to update\n  components (by ident) whose props have changed.\n\n  Prop change detection is done by scanning the database in *only* the locations that on-screen components are querying\n  (derived by the mounted component idents, and any ident-joins in the queries).","~:file","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",60],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.rendering.ident-optimized-render","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$edn-query-language.core","^X","~$log","~$taoensso.timbre","~$kr","~$com.fulcrologic.fulcro.rendering.keyframe-render","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^X","~$com.fulcrologic.fulcro.algorithms.denormalize","^14","^B","^B","~$goog","^15","^W","^W","^10","^10","^12","^12","^Z","^Z","~$fdn","^14"],"~:seen",["^O",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^B","^B","^Y","^Z","^11","^12","^12","^12","^Z","^Z"],"~:form",["~#list",["~$ns","^Q","A render optimization algorithm for refreshing the UI via props tunnelling (setting new props on a component's\n  state in a pre-agreed location). This algorithm analyzes database changes and on-screen components to update\n  components (by ident) whose props have changed.\n\n  Prop change detection is done by scanning the database in *only* the locations that on-screen components are querying\n  (derived by the mounted component idents, and any ident-joins in the queries).",["^1<",["^18",["^10","~:as","^["],["^14","^1>","^16"],["^12","^1>","^11"],["^W","^1>","^V"],["^X","^1>","^13"],["^Z","^1>","^Y"]]]]],"~:flags",["^ ","^18",["^O",[]]],"~:js-deps",["^ "],"~:deps",["^15","^B","^10","^14","^12","^W","^X","^Z"]],"^S","^Q","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc"],"~:compiled-at",1705355275323,"~:resource-name","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.rendering.ident-optimized-render\n  \"A render optimization algorithm for refreshing the UI via props tunnelling (setting new props on a component's\n  state in a pre-agreed location). This algorithm analyzes database changes and on-screen components to update\n  components (by ident) whose props have changed.\n\n  Prop change detection is done by scanning the database in *only* the locations that on-screen components are querying\n  (derived by the mounted component idents, and any ident-joins in the queries).\"\n  (:require\n    [com.fulcrologic.fulcro.rendering.keyframe-render :as kr]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.components :as comp]\n    [clojure.set :as set]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]))\n\n(defn dirty-table-entries\n  \"Checks the given `idents` and returns a subset of them where the data they refer to has changed\n   between `old-state` and `new-state`.\"\n  [old-state new-state idents]\n  (reduce\n    (fn [result ident]\n      (if (identical? (get-in old-state ident) (get-in new-state ident))\n        result\n        (cons ident result)))\n    (list)\n    idents))\n\n(defn render-component!\n  \"Uses the component's query and the current application state to query for the current value of that component's\n  props (subtree). It then sends those props to the component via \\\"props tunnelling\\\" (setting them on a well-known key in\n  component-local state).\"\n  [app ident c]\n  #?(:cljs\n     (if (and c ident)\n       (let [{:com.fulcrologic.fulcro.application/keys [state-atom]} app\n             state-map @state-atom\n             query     (comp/get-query c state-map)\n             q         [{ident query}]\n             data-tree (when query (fdn/db->tree q state-map state-map))\n             new-props (get data-tree ident)]\n         (when-not query (log/error \"Query was empty. Refresh failed for \" (type c)))\n         (when (comp/mounted? c)\n           (.setState ^js c (fn [s] #js {\"fulcro$value\" new-props}))))\n       (do\n         (log/info \"Failed to do optimized update. Component\" (-> c comp/react-type (comp/class->registry-key))\n           \"queries for data that changed, but does not have an ident. If that is your application root,\"\n           \"consider moving that changing state to a child component.\")\n         (throw (ex-info \"Targeted update failed\" {}))))))\n\n(defn render-components-with-ident!\n  \"Renders *only* components that *have* the given ident.\"\n  [app ident]\n  (doseq [c (comp/ident->components app ident)]\n    (render-component! app ident c)))\n\n(defn render-dependents-of-ident!\n  \"Renders components that have, or query for, the given ident.\"\n  [app ident]\n  (render-components-with-ident! app ident)\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [indexes]} @runtime-atom\n        {:keys [prop->classes idents-in-joins class->components]} indexes\n        idents-in-joins (or idents-in-joins #{})]\n    (when (contains? idents-in-joins ident)\n      (let [classes (prop->classes ident)]\n        (when (seq classes)\n          (doseq [class classes]\n            (doseq [component (class->components class)\n                    :let [component-ident (comp/get-ident component)]]\n              (render-component! app component-ident component))))))))\n\n(defn props->components\n  \"Given an app and a `property-set`: returns the components that query for the items in property-set.\n\n  The `property-set` can be any sequence (ideally a set) of keywords and idents that can directly appear\n  in a component query as a property or join key.\"\n  [app property-set]\n  (when (seq property-set)\n    (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n          {:com.fulcrologic.fulcro.application/keys [indexes]} @runtime-atom\n          {:keys [prop->classes class->components]} indexes]\n      (reduce\n        (fn [result prop]\n          (let [classes    (prop->classes prop)\n                components (reduce #(into %1 (class->components %2)) #{} classes)]\n            (into result components)))\n        #{}\n        property-set))))\n\n(defn render-stale-components!\n  \"This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data.\"\n  [app]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom state-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [indexes last-rendered-state\n                                                   to-refresh only-refresh]} @runtime-atom\n        {:keys [linked-props ident->components prop->classes idents-in-joins]} indexes\n        limited-refresh? (seq only-refresh)]\n    (if limited-refresh?\n      (let [{limited-idents true\n             limited-props  false} (group-by eql/ident? only-refresh)\n            limited-to-render (props->components app limited-props)]\n        (doseq [c limited-to-render\n                :let [ident (comp/get-ident c)]]\n          (render-component! app ident c))\n        (doseq [i limited-idents]\n          (render-dependents-of-ident! app i)))\n      (let [state-map          @state-atom\n            idents-in-joins    (or idents-in-joins #{})\n            dirty-linked-props (reduce\n                                 (fn [acc p]\n                                   (if (not (identical?\n                                              (get state-map p)\n                                              (get last-rendered-state p)))\n                                     (conj acc p)\n                                     acc))\n                                 #{}\n                                 linked-props)\n            {idents-to-force true\n             props-to-force  false} (group-by eql/ident? to-refresh)\n            props-to-force     (set/union props-to-force dirty-linked-props)\n            mounted-idents     (concat (keys ident->components) idents-in-joins)\n            stale-idents       (dirty-table-entries last-rendered-state state-map mounted-idents)\n            extra-to-force     (props->components app props-to-force)\n            all-idents         (set/union (set idents-to-force) (set stale-idents))]\n        (doseq [i all-idents]\n          (render-dependents-of-ident! app i))\n        (doseq [c extra-to-force]\n          (render-component! app (comp/get-ident c) c))))))\n\n(defn render!\n  \"The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render; otherwise\n  it tries to minimize the work done for screen refresh to just the queries/refreshes needed by the\n  data that has changed.\"\n  ([app]\n   (render! app {}))\n  ([app {:keys [force-root? root-props-changed?] :as options}]\n   (if (or force-root? root-props-changed?)\n     (kr/render! app options)\n     (try\n       (render-stale-components! app)\n       (catch #?(:clj Exception :cljs :default) e\n         (log/info \"Optimized render failed. Falling back to root render.\")\n         (kr/render! app options))))))\n\n","~:reader-features",["^O",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.rendering.ident-optimized-render/dirty-table-entries","old-state","new-state","idents","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","result","ident","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/cons","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-component!","app","c","and__4120__auto__","map__62655","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","state-atom","state-map","query","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2","q","data-tree","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","new-props","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/type","com.fulcrologic.fulcro.components/mounted?","s","com.fulcrologic.fulcro.components/react-type","com.fulcrologic.fulcro.components/class->registry-key","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","seq__62661","cljs.core/seq","chunk__62662","count__62663","i__62664","temp__5804__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","com.fulcrologic.fulcro.components/ident->components","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-dependents-of-ident!","map__62669","map__62670","map__62671","runtime-atom","indexes","prop->classes","idents-in-joins","class->components","or__4131__auto__","cljs.core/contains?","classes","seq__62675","chunk__62676","count__62677","i__62678","class","seq__62695","chunk__62697","count__62698","i__62699","seq__62706","chunk__62708","count__62709","i__62710","component","component-ident","com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.rendering.ident-optimized-render/props->components","property-set","map__62717","map__62718","map__62719","prop","components","p1__62715#","p2__62716#","cljs.core.into.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-stale-components!","map__62729","map__62730","map__62731","last-rendered-state","to-refresh","only-refresh","linked-props","ident->components","limited-refresh?","map__62738","limited-idents","limited-props","cljs.core/group-by","edn-query-language.core/ident?","limited-to-render","seq__62740","chunk__62742","count__62743","i__62744","seq__62749","chunk__62750","count__62751","i__62752","i","map__62759","dirty-linked-props","acc","p","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","idents-to-force","props-to-force","clojure.set.union.cljs$core$IFn$_invoke$arity$2","mounted-idents","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","stale-idents","extra-to-force","all-idents","cljs.core/set","seq__62762","chunk__62763","count__62764","i__62765","seq__62771","chunk__62772","count__62773","i__62774","var_args","G__62781","com.fulcrologic.fulcro.rendering.ident-optimized-render/render!","js/Error","p__62782","map__62783","com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_.cljs$core$IFn$_invoke$arity$2","force-root?","root-props-changed?","options","com.fulcrologic.fulcro.rendering.keyframe-render/render!","e62785","e","cljs.core/List"]]],"~:cache-keys",["~#cmap",[["^1C","goog/dom/tagname.js"],[1705355193711,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^O",[]],"~:deps-syms",["^15","~$goog.dom.HtmlElement"]]],["^1C","goog/async/freelist.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/labs/useragent/platform.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.labs.userAgent.util","~$goog.string"]]],["^1C","goog/timer/timer.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.Promise","~$goog.events.EventTarget"]]],["^1C","com/fulcrologic/fulcro/algorithms/lookup.cljc"],[1705354814234,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^Z"]]],["^1C","cljs/spec/gen/alpha.cljs"],[1705351486739,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","~$goog.Uri"]]],["^1C","cljs/tools/reader/impl/utils.cljs"],[1684871064013,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","~$clojure.string","^1V"]]],["^1C","goog/math/math.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.array","~$goog.asserts"]]],["^1C","goog/string/stringformat.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^1V"]]],["^1C","goog/events/eventtype.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1C","goog/labs/useragent/browser.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^1[","^1U","~$goog.object","~$goog.string.internal"]]],["^1C","goog/array/array.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^20"]]],["^1C","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],[1705354814234,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^Z","^X","^23","^@"]]],["^1C","goog/useragent/useragent.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^1U","~$goog.reflect","^1V"]]],["^1C","goog/structs/prioritypool.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1C","clojure/test/check/properties.cljc"],[1705354814754,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","~$clojure.test.check.generators","~$clojure.test.check.results"]]],["^1C","goog/async/run.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1C","clojure/test/check/generators.cljc"],[1705354814754,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^1Z","~$clojure.test.check.random","~$clojure.test.check.rose-tree","^1V"]]],["^1C","taoensso/encore.cljs"],[1705354814215,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^1Z","^W","~$cljs.reader","~$cljs.tools.reader.edn","^23","^1V","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1C","goog/debug/error.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/async/workqueue.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^20","~$goog.async.FreeList"]]],["^1C","goog/events/events.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^20","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^21","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1C","goog/promise/resolver.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/events/browserfeature.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^22"]]],["^1C","cljs/tools/reader/edn.cljs"],[1684871064013,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^1V","^2E"]]],["^1C","clojure/test/check/random/doubles.cljs"],[1705354814754,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","~$clojure.test.check.random.longs"]]],["^1C","goog/structs/priorityqueue.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.structs.Heap"]]],["^1C","goog/net/xhrio.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.Timer","^1[","^20","^2O","^1X","~$goog.json.hybrid","~$goog.log","^2L","^2K","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^23","^1V","^2J","~$goog.structs.Map","~$goog.uri.utils","^22"]]],["^1C","goog/promise/thenable.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/dom/nodetype.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","cljs/tools/reader/impl/inspect.cljs"],[1684871064013,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B"]]],["^1C","cljs/tools/reader.cljs"],[1684871064013,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^2T","^2U","^2V","^2S","^1[","^1V","^2E"]]],["^1C","clojure/test/check/rose_tree.cljc"],[1705354814754,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B"]]],["^1C","clojure/test/check/impl.cljc"],[1705354814754,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B"]]],["^1C","goog/net/wrapperxmlhttpfactory.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1C","goog/events/eventtarget.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.Disposable","^20","^2F","~$goog.events.Event","^2Q","^2R","^23"]]],["^1C","clojure/test/check/random.cljs"],[1705354814754,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","~$clojure.test.check.random.doubles","^2X"]]],["^1C","goog/disposable/disposable.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.disposable.IDisposable"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],[1705355194000,1705355194000,1705351579473,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1C","shadow/js.js"],[1705355194459,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/object/object.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/structs/set.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^2J","~$goog.structs.Collection","^33"]]],"~:SHADOW-TIMESTAMP",[1705355194000,1705351486000],["^3;","node_modules/react/cjs/react.development.js"],[1705355194000,1705355194000,1705351579479,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^3<"]]],["^1C","goog/math/long.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^20","^28"]]],["^1C","goog/events/listener.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.events.ListenableKey"]]],["^1C","goog/events/listenermap.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^1[","~$goog.events.Listener","^23"]]],["^1C","goog/events/eventid.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","taoensso/truss.cljs"],[1684871063313,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","~$taoensso.truss.impl"]]],["^1C","goog/string/internal.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","clojure/test/check.cljc"],[1705354814754,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^2;","^2@","^2<","^2A","~$clojure.test.check.impl"]]],["^1C","edn_query_language/core.cljc"],[1705354813723,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^@","~$clojure.test.check","^2;","~$clojure.test.check.properties"]]],["^1C","goog/functions/functions.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","taoensso/truss/impl.cljs"],[1684871063313,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^W"]]],["^1C","clojure/walk.cljs"],[1705351486739,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B"]]],["^1C","goog/net/eventtype.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/structs/map.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1C","goog/net/xhriopool.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^2G","~$goog.structs.PriorityPool"]]],["^1C","goog/structs/queue.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^1["]]],["^1C","goog/labs/useragent/engine.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^1[","^1U","^1V"]]],["^1C","taoensso/timbre/appenders/core.cljs"],[1684871063768,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^1Z","~$taoensso.encore"]]],["^1C","cljs/reader.cljs"],[1705351486739,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^23","^2W","^2C","^2E"]]],["^1C","com/fulcrologic/fulcro/components.cljc"],[1705354814234,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^23","~$cljsjs.react","^X","^@","^Z","~$clojure.walk","^1Z","~$com.fulcrologic.fulcro.algorithms.do-not-use","^14","~$com.fulcrologic.fulcro.algorithms.lookup","^W"]]],["^1C","goog/asserts/asserts.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1C","goog/debug/logbuffer.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^20","~$goog.debug.LogRecord"]]],["^1C","goog/uri/uri.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^1[","^20","^1V","^2J","^33","^34","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1C","goog/net/errorcode.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/disposable/idisposable.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/promise/promise.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","~$goog.Thenable","^20","^2N","~$goog.async.run","^2?","^3O","~$goog.promise.Resolver"]]],["^1C","cljs/spec/alpha.cljs"],[1705351486739,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^23","^3L","^H","^1Z"]]],["^1C","goog/debug/logrecord.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/base.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",[]]],["^1C","goog/json/hybrid.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^20","~$goog.json"]]],["^1C","goog/structs/structs.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^1[","^23"]]],["^1C","cljs/tools/reader/impl/errors.cljs"],[1684871064013,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^2T","^1Z","~$cljs.tools.reader.impl.inspect"]]],["^1C","cljsjs/react.cljs"],[1705355193610,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","~$module$node_modules$react$index"]]],["^1C","clojure/string.cljs"],[1705351486739,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^1V","^2E"]]],["^1C","goog/structs/pool.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^37","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1C","clojure/test/check/random/longs/bit_count_impl.cljs"],[1705354814754,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B"]]],["^3;","node_modules/react/cjs/react.production.min.js"],[1705355194000,1705355194000,1705351579479,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^3<"]]],["^1C","goog/net/httpstatus.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/structs/heap.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^1[","^23","~$goog.structs.Node"]]],["^1C","goog/debug/entrypointregistry.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^20"]]],["^1C","goog/string/string.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^24"]]],["^1C","goog/reflect/reflect.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],[1705354814234,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^14","^3N","^12"]]],["^1C","goog/labs/useragent/util.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^24"]]],["^1C","goog/debug/debug.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^1[","~$goog.debug.errorcontext","^22"]]],["^1C","goog/string/stringbuffer.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/debug/errorcontext.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","cljs/tools/reader/reader_types.cljs"],[1684871064013,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^2U","^1V","^2E"]]],["^1C","goog/iter/iter.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^1[","^20","~$goog.functions","~$goog.math"]]],["^1C","goog/async/nexttick.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^2O","~$goog.dom.TagName","^42","^25","^26"]]],["^1C","goog/debug/logger.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^1[","^20","~$goog.debug","~$goog.debug.LogBuffer","^3Q"]]],["^1C","goog/events/event.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^37","~$goog.events.EventId"]]],["^1C","cljs/tools/reader/impl/commons.cljs"],[1684871064013,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^2S","^2T","^2U"]]],["^1C","goog/dom/htmlelement.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","cljs/core.cljs"],[1705351486739,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["~$goog.math.Long","~$goog.math.Integer","^1V","^23","^1[","^1Y","^2E"]]],["^1C","clojure/test/check/random/longs.cljs"],[1705354814754,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","~$clojure.test.check.random.longs.bit-count-impl","^48","^B"]]],["^1C","goog/log/log.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^45","~$goog.debug.LogManager","^3Q","~$goog.debug.Logger"]]],["^1C","goog/structs/collection.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/events/browserevent.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^45","^21","^38","~$goog.events.EventType","^28","^22"]]],["^1C","goog/math/integer.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/structs/node.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","clojure/set.cljs"],[1705351486739,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B"]]],["^1C","goog/uri/utils.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^1[","^20","^1V"]]],["^1C","taoensso/timbre.cljs"],[1684871063768,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^1Z","^3J","~$taoensso.timbre.appenders.core"]]],["^1C","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc"],[1705354814234,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^10","^14","^12","^W","^X","^Z"]]],["^1C","goog/json/json.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]],["^1C","goog/events/listenable.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^47"]]],["^1C","goog/net/xmlhttpfactory.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^35"]]],["^1C","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],[1705354814234,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B","^X"]]],["^1C","goog/net/xmlhttp.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^20","~$goog.net.WrapperXmlHttpFactory","^36"]]],["^1C","clojure/test/check/results.cljc"],[1705354814754,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15","^B"]]],["^1C","goog/net/xhrlike.js"],[1705355193711,"^1P",["^ ","^1Q",null,"^1R",["^O",[]],"^1S",["^15"]]]]],"~:clj-info",["^ ","jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/rose_tree.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/generators.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/gen/alpha.clj",1680040089000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1684871063000,"jar:file:/Users/dataico.macbook.one/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1684871062000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1684871062000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/taoensso/encore/2.94.0/encore-2.94.0.jar!/taoensso/encore.clj",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/properties.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1684518327000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/edn-query-language/eql/0.0.7/eql-0.0.7.jar!/edn_query_language/core.cljc",1705354813000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1705355194000,"jar:file:/Users/dataico.macbook.one/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1684871062000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/alpha.clj",1680040089000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1684871063000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1684871062000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/components.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/results.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/random.clj",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1684871063000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1684871063000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1705351486000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A render optimization algorithm for refreshing the UI via props tunnelling (setting new props on a component's\n  state in a pre-agreed location). This algorithm analyzes database changes and on-screen components to update\n  components (by ident) whose props have changed.\n\n  Prop change detection is done by scanning the database in *only* the locations that on-screen components are querying\n  (derived by the mounted component idents, and any ident-joins in the queries).","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",1,"^9",5,"^:",1,"^;",60],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",null,"^N",["^O",[]],"^P","^Q","^T",null,"^U",["^ ","^V","^W","^X","^X","^Y","^Z","^[","^10","^11","^12","^13","^X","^14","^14","^B","^B","^15","^15","^W","^W","^10","^10","^12","^12","^Z","^Z","^16","^14"],"^17",["^O",["^18"]],"~:shadow/js-access-global",["^O",["Error"]],"^19",null,"~:defs",["^ ","~$dirty-table-entries",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",16,"^9",7,"^:",16,"^;",26,"~:arglists",["^1<",["~$quote",["^1<",[["~$old-state","~$new-state","~$idents"]]]]],"^6","Checks the given `idents` and returns a subset of them where the data they refer to has changed\n   between `old-state` and `new-state`."],"^P","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/dirty-table-entries","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",26,"~:method-params",["^1<",[["^5P","^5Q","^5R"]]],"~:protocol-impl",null,"~:arglists-meta",["^1<",[null,null]],"^9",1,"~:variadic?",false,"^8",16,"~:ret-tag",["^O",[null,"~$any"]],"^:",16,"~:max-fixed-arity",3,"~:fn-var",true,"^5N",["^1<",["^5O",["^1<",[["^5P","^5Q","^5R"]]]]],"^6","Checks the given `idents` and returns a subset of them where the data they refer to has changed\n   between `old-state` and `new-state`."],"~$render-component!",["^ ","^5M",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",28,"^9",7,"^:",28,"^;",24,"^5N",["^1<",["^5O",["^1<",[["~$app","~$ident","~$c"]]]]],"^6","Uses the component's query and the current application state to query for the current value of that component's\n  props (subtree). It then sends those props to the component via \"props tunnelling\" (setting them on a well-known key in\n  component-local state)."],"^P","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-component!","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",24,"^5T",["^1<",[["^61","^62","~$c"]]],"^5U",null,"^5V",["^1<",[null,null]],"^9",1,"^5W",false,"^8",28,"^5X",["^O",["~$js","~$clj-nil"]],"^:",28,"^5Z",3,"^5[",true,"^5N",["^1<",["^5O",["^1<",[["^61","^62","~$c"]]]]],"^6","Uses the component's query and the current application state to query for the current value of that component's\n  props (subtree). It then sends those props to the component via \"props tunnelling\" (setting them on a well-known key in\n  component-local state)."],"~$render-components-with-ident!",["^ ","^5M",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",50,"^9",7,"^:",50,"^;",36,"^5N",["^1<",["^5O",["^1<",[["^61","^62"]]]]],"^6","Renders *only* components that *have* the given ident."],"^P","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",36,"^5T",["^1<",[["^61","^62"]]],"^5U",null,"^5V",["^1<",[null,null]],"^9",1,"^5W",false,"^8",50,"^5X","^65","^:",50,"^5Z",2,"^5[",true,"^5N",["^1<",["^5O",["^1<",[["^61","^62"]]]]],"^6","Renders *only* components that *have* the given ident."],"~$render-dependents-of-ident!",["^ ","^5M",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",56,"^9",7,"^:",56,"^;",34,"^5N",["^1<",["^5O",["^1<",[["^61","^62"]]]]],"^6","Renders components that have, or query for, the given ident."],"^P","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-dependents-of-ident!","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",34,"^5T",["^1<",[["^61","^62"]]],"^5U",null,"^5V",["^1<",[null,null]],"^9",1,"^5W",false,"^8",56,"^5X","^65","^:",56,"^5Z",2,"^5[",true,"^5N",["^1<",["^5O",["^1<",[["^61","^62"]]]]],"^6","Renders components that have, or query for, the given ident."],"~$props->components",["^ ","^5M",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",72,"^9",7,"^:",72,"^;",24,"^5N",["^1<",["^5O",["^1<",[["^61","~$property-set"]]]]],"^6","Given an app and a `property-set`: returns the components that query for the items in property-set.\n\n  The `property-set` can be any sequence (ideally a set) of keywords and idents that can directly appear\n  in a component query as a property or join key."],"^P","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/props->components","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",24,"^5T",["^1<",[["^61","^6;"]]],"^5U",null,"^5V",["^1<",[null,null]],"^9",1,"^5W",false,"^8",72,"^5X",["^O",[null,"^5Y","^65"]],"^:",72,"^5Z",2,"^5[",true,"^5N",["^1<",["^5O",["^1<",[["^61","^6;"]]]]],"^6","Given an app and a `property-set`: returns the components that query for the items in property-set.\n\n  The `property-set` can be any sequence (ideally a set) of keywords and idents that can directly appear\n  in a component query as a property or join key."],"~$render-stale-components!",["^ ","^5M",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",90,"^9",7,"^:",90,"^;",31,"^5N",["^1<",["^5O",["^1<",[["^61"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"^P","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-stale-components!","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",31,"^5T",["^1<",[["^61"]]],"^5U",null,"^5V",["^1<",[null,null]],"^9",1,"^5W",false,"^8",90,"^5X","^65","^:",90,"^5Z",1,"^5[",true,"^5N",["^1<",["^5O",["^1<",[["^61"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"~$render!",["^ ","^5M",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^8",132,"^9",7,"^:",132,"^;",14,"^5N",["^1<",["^5O",["^1<",[["^61"],["^61",["^ ","~:keys",["~$force-root?","~$root-props-changed?"],"^1>","~$options"]]]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render; otherwise\n  it tries to minimize the work done for screen refresh to just the queries/refreshes needed by the\n  data that has changed.","~:top-fn",["^ ","^5W",false,"~:fixed-arity",2,"^5Z",2,"^5T",["^1<",[["^61"],["^61",["^ ","^6@",["^6A","^6B"],"^1>","^6C"]]]],"^5N",["^1<",[["^61"],["^61",["^ ","^6@",["^6A","^6B"],"^1>","^6C"]]]],"^5V",["^1<",[null,null]]]],"^P","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render!","^7","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc","^;",14,"^6D",["^ ","^5W",false,"^6E",2,"^5Z",2,"^5T",["^1<",[["^61"],["^61",["^ ","^6@",["^6A","^6B"],"^1>","^6C"]]]],"^5N",["^1<",[["^61"],["^61",["^ ","^6@",["^6A","^6B"],"^1>","^6C"]]]],"^5V",["^1<",[null,null]]],"^5T",["^1<",[["^61"],["^61",["^ ","^6@",["^6A","^6B"],"^1>","^6C"]]]],"^5U",null,"^6E",2,"^5V",["^1<",[null,null]],"^9",1,"^5W",false,"~:methods",[["^ ","^6E",1,"^5W",false,"~:tag","^5Y"],["^ ","^6E",2,"^5W",false,"^6H",["^O",[null,"^5Y"]]]],"^8",132,"^:",132,"^5Z",2,"^5[",true,"^5N",["^1<",[["^61"],["^61",["^ ","^6@",["^6A","^6B"],"^1>","^6C"]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render; otherwise\n  it tries to minimize the work done for screen refresh to just the queries/refreshes needed by the\n  data that has changed."]],"^1:",["^ ","^B","^B","^Y","^Z","^11","^12","^12","^12","^Z","^Z"],"~:cljs.analyzer/constants",["^ ","^17",["^O",["~:com.fulcrologic.fulcro.application/indexes","~:com.fulcrologic.fulcro.application/last-rendered-state","~:idents-in-joins","~:prop->classes","~:force-root?","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:class->components","~:com.fulcrologic.fulcro.application/to-refresh","~:root-props-changed?","~:com.fulcrologic.fulcro.application/runtime-atom","~:info","~:error","~:ident->components","~:linked-props","~:auto","~:p"]],"~:order",["^6O","^6V","~:p","^6Y","^6U","^6T","^6J","^6M","^6L","^6Q","^6K","^6R","^6P","^6X","^6W","^6N","^6S"]],"^1?",["^ ","^18",["^O",[]]],"^1@",["^ "],"^1A",["^15","^B","^10","^14","^12","^W","^X","^Z"]],"^S","^Q","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1O",[["^71","~:static-fns"],true,["^71","~:elide-asserts"],false,["^71","~:optimize-constants"],null,["^71","^1F"],null,["^71","~:external-config"],null,["^71","~:tooling-config"],null,["^71","~:emit-constants"],null,["^71","~:load-tests"],null,["^71","~:form-size-threshold"],null,["^71","~:infer-externs"],true,["^71","^1H"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^71","~:fn-invoke-direct"],null,["^71","~:source-map"],"/dev/null"]]]