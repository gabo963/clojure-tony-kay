["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.dom');\ngoog.require('cljs.core');\ngoog.require('cljs.spec.alpha');\ngoog.require('clojure.string');\ngoog.require('com.fulcrologic.fulcro.components');\ngoog.require('cljsjs.react');\ngoog.require('cljsjs.react.dom');\ngoog.require('goog.object');\ngoog.require('goog.dom');\ngoog.require('com.fulcrologic.fulcro.dom_common');\ngoog.require('taoensso.timbre');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncom.fulcrologic.fulcro.dom.element_marker = (function (){var G__64752 = React.createElement(\"div\",null);\nvar G__64753 = \"$$typeof\";\nreturn goog.object.get(G__64752,G__64753);\n})();\n/**\n * Returns true if the given arg is a react element.\n */\ncom.fulcrologic.fulcro.dom.element_QMARK_ = (function com$fulcrologic$fulcro$dom$element_QMARK_(x){\nreturn ((cljs.core.object_QMARK_(x)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.dom.element_marker,goog.object.get(x,\"$$typeof\"))));\n});\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"css\",\"css\",1135045163),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null)),new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__64754#\",\"p1__64754#\",-1439318077,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"p1__64754#\",\"p1__64754#\",-1439318077,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__64754#\",\"p1__64754#\",-1439318077,null))))),new cljs.core.Keyword(null,\"js-object\",\"js-object\",1830199158),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__64755#\",\"p1__64755#\",-1878244988,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"object?\",\"cljs.core/object?\",2051371283,null),new cljs.core.Symbol(null,\"p1__64755#\",\"p1__64755#\",-1878244988,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__64755#\",\"p1__64755#\",-1878244988,null))))))),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"*\",\"cljs.spec.alpha/*\",-1238084288,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Symbol(\"cljs.core\",\"number?\",\"cljs.core/number?\",-811857295,null),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__64756#\",\"p1__64756#\",308101032,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"or\",\"cljs.core/or\",1201033885,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Symbol(null,\"p1__64756#\",\"p1__64756#\",308101032,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),new cljs.core.Symbol(null,\"p1__64756#\",\"p1__64756#\",308101032,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"array?\",\"cljs.core/array?\",-1655912448,null),new cljs.core.Symbol(null,\"p1__64756#\",\"p1__64756#\",308101032,null)))),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null)))),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"css\",\"css\",1135045163),new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.maybe_impl(cljs.core.keyword_QMARK_,new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null)),cljs.spec.alpha.maybe_impl(cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.Keyword(null,\"js-object\",\"js-object\",1830199158)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"object?\",\"cljs.core/object?\",2051371283,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)))))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.nil_QMARK_,(function (p1__64754_SHARP_){\nreturn ((cljs.core.map_QMARK_(p1__64754_SHARP_)) && ((!(com.fulcrologic.fulcro.dom.element_QMARK_(p1__64754_SHARP_)))));\n}),(function (p1__64755_SHARP_){\nreturn ((cljs.core.object_QMARK_(p1__64755_SHARP_)) && ((!(com.fulcrologic.fulcro.dom.element_QMARK_(p1__64755_SHARP_)))));\n})], null),null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__64754#\",\"p1__64754#\",-1439318077,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"p1__64754#\",\"p1__64754#\",-1439318077,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__64754#\",\"p1__64754#\",-1439318077,null))))),new cljs.core.Keyword(null,\"js-object\",\"js-object\",1830199158),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__64755#\",\"p1__64755#\",-1878244988,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"object?\",\"cljs.core/object?\",2051371283,null),new cljs.core.Symbol(null,\"p1__64755#\",\"p1__64755#\",-1878244988,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__64755#\",\"p1__64755#\",-1878244988,null))))))),cljs.spec.alpha.rep_impl(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Symbol(\"cljs.core\",\"number?\",\"cljs.core/number?\",-811857295,null),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__64756#\",\"p1__64756#\",308101032,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"or\",\"cljs.core/or\",1201033885,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Symbol(null,\"p1__64756#\",\"p1__64756#\",308101032,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),new cljs.core.Symbol(null,\"p1__64756#\",\"p1__64756#\",308101032,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"array?\",\"cljs.core/array?\",-1655912448,null),new cljs.core.Symbol(null,\"p1__64756#\",\"p1__64756#\",308101032,null)))),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null)),cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),new cljs.core.Symbol(\"cljs.core\",\"number?\",\"cljs.core/number?\",-811857295,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"or\",\"cljs.core/or\",1201033885,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"array?\",\"cljs.core/array?\",-1655912448,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)))),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.string_QMARK_,cljs.core.number_QMARK_,(function (p1__64756_SHARP_){\nreturn ((cljs.core.vector_QMARK_(p1__64756_SHARP_)) || (cljs.core.seq_QMARK_(p1__64756_SHARP_)) || (cljs.core.array_QMARK_(p1__64756_SHARP_)));\n}),cljs.core.nil_QMARK_,com.fulcrologic.fulcro.dom.element_QMARK_], null),null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__64754#\",\"p1__64754#\",-1439318077,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"p1__64754#\",\"p1__64754#\",-1439318077,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__64754#\",\"p1__64754#\",-1439318077,null))))),new cljs.core.Keyword(null,\"js-object\",\"js-object\",1830199158),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__64755#\",\"p1__64755#\",-1878244988,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"object?\",\"cljs.core/object?\",2051371283,null),new cljs.core.Symbol(null,\"p1__64755#\",\"p1__64755#\",-1878244988,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__64755#\",\"p1__64755#\",-1878244988,null))))))),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"*\",\"cljs.spec.alpha/*\",-1238084288,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Symbol(\"cljs.core\",\"number?\",\"cljs.core/number?\",-811857295,null),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__64756#\",\"p1__64756#\",308101032,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"or\",\"cljs.core/or\",1201033885,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Symbol(null,\"p1__64756#\",\"p1__64756#\",308101032,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),new cljs.core.Symbol(null,\"p1__64756#\",\"p1__64756#\",308101032,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"array?\",\"cljs.core/array?\",-1655912448,null),new cljs.core.Symbol(null,\"p1__64756#\",\"p1__64756#\",308101032,null)))),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null)))], null)));\n/**\n * Equivalent to React.render\n */\ncom.fulcrologic.fulcro.dom.render = (function com$fulcrologic$fulcro$dom$render(component,el){\nreturn ReactDOM.render(component,el);\n});\n/**\n * Equivalent to React.renderToString. NOTE: You must require cljsjs.react.dom.server to use this function.\n */\ncom.fulcrologic.fulcro.dom.render_to_str = (function com$fulcrologic$fulcro$dom$render_to_str(c){\nreturn ReactDOMServer.renderToString(c);\n});\n/**\n * Returns the dom node associated with a component's React ref.\n */\ncom.fulcrologic.fulcro.dom.node = (function com$fulcrologic$fulcro$dom$node(var_args){\nvar G__64785 = arguments.length;\nswitch (G__64785) {\ncase 1:\nreturn com.fulcrologic.fulcro.dom.node.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.dom.node.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.dom.node.cljs$core$IFn$_invoke$arity$1 = (function (component){\nreturn ReactDOM.findDOMNode(component);\n});\n\ncom.fulcrologic.fulcro.dom.node.cljs$core$IFn$_invoke$arity$2 = (function (component,name){\nvar G__64786 = component.refs;\nvar G__64786__$1 = (((G__64786 == null))?null:goog.object.get(G__64786,name));\nif((G__64786__$1 == null)){\nreturn null;\n} else {\nreturn ReactDOM.findDOMNode(G__64786__$1);\n}\n});\n\ncom.fulcrologic.fulcro.dom.node.cljs$lang$maxFixedArity = 2;\n\n/**\n * Create a DOM element for which there exists no corresponding function.\n * Useful to create DOM elements not included in React.DOM. Equivalent\n * to calling `js/React.createElement`\n */\ncom.fulcrologic.fulcro.dom.create_element = (function com$fulcrologic$fulcro$dom$create_element(var_args){\nvar G__64796 = arguments.length;\nswitch (G__64796) {\ncase 1:\nreturn com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4751__auto__ = [];\nvar len__4730__auto___65537 = arguments.length;\nvar i__4731__auto___65538 = (0);\nwhile(true){\nif((i__4731__auto___65538 < len__4730__auto___65537)){\nargs_arr__4751__auto__.push((arguments[i__4731__auto___65538]));\n\nvar G__65539 = (i__4731__auto___65538 + (1));\ni__4731__auto___65538 = G__65539;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4752__auto__ = (new cljs.core.IndexedSeq(args_arr__4751__auto__.slice((2)),(0),null));\nreturn com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4752__auto__);\n\n}\n});\n\ncom.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$1 = (function (tag){\nreturn com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$2(tag,null);\n});\n\ncom.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$2 = (function (tag,opts){\nreturn React.createElement(tag,opts);\n});\n\ncom.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$variadic = (function (tag,opts,children){\nreturn React.createElement(tag,opts,children);\n});\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.create_element.cljs$lang$applyTo = (function (seq64793){\nvar G__64794 = cljs.core.first(seq64793);\nvar seq64793__$1 = cljs.core.next(seq64793);\nvar G__64795 = cljs.core.first(seq64793__$1);\nvar seq64793__$2 = cljs.core.next(seq64793__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64794,G__64795,seq64793__$2);\n});\n\ncom.fulcrologic.fulcro.dom.create_element.cljs$lang$maxFixedArity = (2);\n\n/**\n * Given props, which can be nil, a js-obj or a clj map: returns a js object.\n */\ncom.fulcrologic.fulcro.dom.convert_props = (function com$fulcrologic$fulcro$dom$convert_props(props){\nif((props == null)){\nreturn ({});\n} else {\nif(cljs.core.map_QMARK_(props)){\nreturn cljs.core.clj__GT_js(props);\n} else {\nreturn props;\n\n}\n}\n});\n/**\n * Used internally by the DOM element generation.\n */\ncom.fulcrologic.fulcro.dom.macro_create_element_STAR_ = (function com$fulcrologic$fulcro$dom$macro_create_element_STAR_(arr){\nif(cljs.core.array_QMARK_(arr)){\n} else {\nthrow (new Error(\"Assert failed: (array? arr)\"));\n}\n\nreturn React.createElement.apply(null,arr);\n});\n/**\n * Updates the state of the wrapped input element.\n */\ncom.fulcrologic.fulcro.dom.update_state = (function com$fulcrologic$fulcro$dom$update_state(component,next_props,value){\nvar on_change = goog.object.getValueByKeys(component,\"state\",\"onChange\");\nvar next_state = ({});\nvar inputRef = goog.object.get(next_props,\"inputRef\");\nvar G__64805_65540 = next_state;\nvar G__64806_65541 = next_props;\nvar G__64807_65542 = ({\"onChange\": on_change});\ngoog.object.extend(G__64805_65540,G__64806_65541,G__64807_65542);\n\ngoog.object.set(next_state,\"value\",value);\n\nif(cljs.core.truth_(inputRef)){\ngoog.object.remove(next_state,\"inputRef\");\n\ngoog.object.set(next_state,\"ref\",inputRef);\n} else {\n}\n\nreturn component.setState(next_state);\n});\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.fulcro !== 'undefined') && (typeof com.fulcrologic.fulcro.dom !== 'undefined') && (typeof com.fulcrologic.fulcro.dom.form_elements_QMARK_ !== 'undefined')){\n} else {\ncom.fulcrologic.fulcro.dom.form_elements_QMARK_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [\"option\",null,\"select\",null,\"input\",null,\"textarea\",null], null), null);\n}\ncom.fulcrologic.fulcro.dom.is_form_element_QMARK_ = (function com$fulcrologic$fulcro$dom$is_form_element_QMARK_(element){\nvar tag = element.tagName;\nvar and__4120__auto__ = tag;\nif(cljs.core.truth_(and__4120__auto__)){\nvar G__64809 = clojure.string.lower_case(tag);\nreturn (com.fulcrologic.fulcro.dom.form_elements_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.dom.form_elements_QMARK_.cljs$core$IFn$_invoke$arity$1(G__64809) : com.fulcrologic.fulcro.dom.form_elements_QMARK_.call(null,G__64809));\n} else {\nreturn and__4120__auto__;\n}\n});\ncom.fulcrologic.fulcro.dom.wrap_form_element = (function com$fulcrologic$fulcro$dom$wrap_form_element(element){\nvar ctor = (function (props){\nvar this$ = this;\nthis$.state = (function (){var state = ({\"ref\": goog.object.get(props,\"inputRef\")});\nvar G__64816_65543 = state;\nvar G__64817_65544 = props;\nvar G__64818_65545 = ({\"onChange\": (function (){var G__64819 = goog.object.get(this$,\"onChange\");\nvar G__64820 = this$;\nreturn goog.bind(G__64819,G__64820);\n})()});\ngoog.object.extend(G__64816_65543,G__64817_65544,G__64818_65545);\n\ngoog.object.remove(state,\"inputRef\");\n\nreturn state;\n})();\n\nreturn React.Component.apply(this$,arguments);\n});\nctor.displayName = [\"wrapped-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(element)].join('');\n\ngoog.inherits(ctor,React.Component);\n\nvar x64822_65546 = ctor.prototype;\nx64822_65546.onChange = ((function (x64822_65546,ctor){\nreturn (function (event){\nvar this$ = this;\nvar temp__5804__auto__ = this$.props.onChange;\nif(cljs.core.truth_(temp__5804__auto__)){\nvar handler = temp__5804__auto__;\n(handler.cljs$core$IFn$_invoke$arity$1 ? handler.cljs$core$IFn$_invoke$arity$1(event) : handler.call(null,event));\n\nreturn com.fulcrologic.fulcro.dom.update_state(this$,this$.props,goog.object.getValueByKeys(event,\"target\",\"value\"));\n} else {\nreturn null;\n}\n});})(x64822_65546,ctor))\n;\n\nx64822_65546.componentWillReceiveProps = ((function (x64822_65546,ctor){\nreturn (function (new_props){\nvar this$ = this;\nvar state_value = goog.object.getValueByKeys(this$,\"state\",\"value\");\nvar this_node = ReactDOM.findDOMNode(this$);\nvar value_node = (cljs.core.truth_(com.fulcrologic.fulcro.dom.is_form_element_QMARK_(this_node))?this_node:(function (){var G__64825 = this_node;\nvar G__64826 = ((function (G__64825,state_value,this_node,this$,x64822_65546,ctor){\nreturn (function (p1__64813_SHARP_){\nreturn com.fulcrologic.fulcro.dom.is_form_element_QMARK_(p1__64813_SHARP_);\n});})(G__64825,state_value,this_node,this$,x64822_65546,ctor))\n;\nreturn goog.dom.findNode(G__64825,G__64826);\n})());\nvar element_value = goog.object.get(value_node,\"value\");\nif(cljs.core.truth_(goog.DEBUG)){\nif(cljs.core.truth_((function (){var and__4120__auto__ = state_value;\nif(cljs.core.truth_(and__4120__auto__)){\nvar and__4120__auto____$1 = element_value;\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.type(state_value),cljs.core.type(element_value));\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.dom\",null,149,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (state_value,this_node,value_node,element_value,this$,x64822_65546,ctor){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"There is a mismatch for the data type of the value on an input with value \",element_value,\". This will cause the input to miss refreshes. In general you should force the :value of an input to\\n                be a string since that is how values are stored on most real DOM elements.\"], null);\n});})(state_value,this_node,value_node,element_value,this$,x64822_65546,ctor))\n,null)),null,-618755367);\n} else {\n}\n} else {\n}\n\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(state_value,element_value)){\nreturn com.fulcrologic.fulcro.dom.update_state(this$,new_props,element_value);\n} else {\nreturn com.fulcrologic.fulcro.dom.update_state(this$,new_props,goog.object.get(new_props,\"value\"));\n}\n});})(x64822_65546,ctor))\n;\n\nx64822_65546.render = ((function (x64822_65546,ctor){\nreturn (function (){\nvar this$ = this;\nreturn React.createElement(element,this$.state);\n});})(x64822_65546,ctor))\n;\n\n\nvar real_factory = React.createFactory(ctor);\nreturn ((function (real_factory,ctor){\nreturn (function() { \nvar G__65547__delegate = function (props,children){\nvar temp__5802__auto__ = goog.object.get(props,\"ref\");\nif(cljs.core.truth_(temp__5802__auto__)){\nvar r = temp__5802__auto__;\nif(typeof r === 'string'){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(real_factory,props,children);\n} else {\nvar p = ({});\ngoog.object.extend(p,props);\n\ngoog.object.set(p,\"inputRef\",r);\n\ngoog.object.remove(p,\"ref\");\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(real_factory,p,children);\n}\n} else {\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(real_factory,props,children);\n}\n};\nvar G__65547 = function (props,var_args){\nvar children = null;\nif (arguments.length > 1) {\nvar G__65548__i = 0, G__65548__a = new Array(arguments.length -  1);\nwhile (G__65548__i < G__65548__a.length) {G__65548__a[G__65548__i] = arguments[G__65548__i + 1]; ++G__65548__i;}\n  children = new cljs.core.IndexedSeq(G__65548__a,0,null);\n} \nreturn G__65547__delegate.call(this,props,children);};\nG__65547.cljs$lang$maxFixedArity = 1;\nG__65547.cljs$lang$applyTo = (function (arglist__65549){\nvar props = cljs.core.first(arglist__65549);\nvar children = cljs.core.rest(arglist__65549);\nreturn G__65547__delegate(props,children);\n});\nG__65547.cljs$core$IFn$_invoke$arity$variadic = G__65547__delegate;\nreturn G__65547;\n})()\n;\n;})(real_factory,ctor))\n});\n/**\n * Low-level form input, with no syntactic sugar. Used internally by DOM macros\n */\ncom.fulcrologic.fulcro.dom.wrapped_input = com.fulcrologic.fulcro.dom.wrap_form_element(\"input\");\n/**\n * Low-level form input, with no syntactic sugar. Used internally by DOM macros\n */\ncom.fulcrologic.fulcro.dom.wrapped_textarea = com.fulcrologic.fulcro.dom.wrap_form_element(\"textarea\");\n/**\n * Low-level form input, with no syntactic sugar. Used internally by DOM macros\n */\ncom.fulcrologic.fulcro.dom.wrapped_option = com.fulcrologic.fulcro.dom.wrap_form_element(\"option\");\n/**\n * Low-level form input, with no syntactic sugar. Used internally by DOM macros\n */\ncom.fulcrologic.fulcro.dom.wrapped_select = com.fulcrologic.fulcro.dom.wrap_form_element(\"select\");\ncom.fulcrologic.fulcro.dom.arr_append_STAR_ = (function com$fulcrologic$fulcro$dom$arr_append_STAR_(arr,x){\narr.push(x);\n\nreturn arr;\n});\ncom.fulcrologic.fulcro.dom.arr_append = (function com$fulcrologic$fulcro$dom$arr_append(arr,tail){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.arr_append_STAR_,arr,com.fulcrologic.fulcro.components.force_children(tail));\n});\n/**\n * Used internally by element generation.\n */\ncom.fulcrologic.fulcro.dom.macro_create_wrapped_form_element = (function com$fulcrologic$fulcro$dom$macro_create_wrapped_form_element(opts){\nvar tag = (opts[(0)]);\nvar props = (opts[(1)]);\nvar children = opts.splice((2));\nvar G__64831 = tag;\nswitch (G__64831) {\ncase \"input\":\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.wrapped_input,props,children);\n\nbreak;\ncase \"textarea\":\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.wrapped_textarea,props,children);\n\nbreak;\ncase \"select\":\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.wrapped_select,props,children);\n\nbreak;\ncase \"option\":\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.wrapped_option,props,children);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__64831)].join('')));\n\n}\n});\n/**\n * Runtime interpretation of props. Used internally by element generation when the macro cannot expand the element at compile time.\n */\ncom.fulcrologic.fulcro.dom.macro_create_element = (function com$fulcrologic$fulcro$dom$macro_create_element(var_args){\nvar G__64833 = arguments.length;\nswitch (G__64833) {\ncase 2:\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$2 = (function (type,args){\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(type,args,null);\n});\n\ncom.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3 = (function (type,args,csskw){\nvar vec__64834 = args;\nvar seq__64835 = cljs.core.seq(vec__64834);\nvar first__64836 = cljs.core.first(seq__64835);\nvar seq__64835__$1 = cljs.core.next(seq__64835);\nvar head = first__64836;\nvar tail = seq__64835__$1;\nvar f = (cljs.core.truth_((com.fulcrologic.fulcro.dom.form_elements_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.dom.form_elements_QMARK_.cljs$core$IFn$_invoke$arity$1(type) : com.fulcrologic.fulcro.dom.form_elements_QMARK_.call(null,type)))?com.fulcrologic.fulcro.dom.macro_create_wrapped_form_element:com.fulcrologic.fulcro.dom.macro_create_element_STAR_);\nif((head == null)){\nvar G__64837 = (function (){var G__64838 = [type,com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(({}),csskw)];\ncom.fulcrologic.fulcro.dom.arr_append(G__64838,tail);\n\nreturn G__64838;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__64837) : f.call(null,G__64837));\n} else {\nif(com.fulcrologic.fulcro.dom.element_QMARK_(head)){\nvar G__64839 = (function (){var G__64840 = [type,com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(({}),csskw)];\ncom.fulcrologic.fulcro.dom.arr_append(G__64840,args);\n\nreturn G__64840;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__64839) : f.call(null,G__64839));\n} else {\nif(cljs.core.object_QMARK_(head)){\nvar G__64841 = (function (){var G__64842 = [type,com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(head,csskw)];\ncom.fulcrologic.fulcro.dom.arr_append(G__64842,tail);\n\nreturn G__64842;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__64841) : f.call(null,G__64841));\n} else {\nif(cljs.core.map_QMARK_(head)){\nvar G__64843 = (function (){var G__64844 = [type,cljs.core.clj__GT_js(com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(com.fulcrologic.fulcro.dom_common.interpret_classes(head),csskw))];\ncom.fulcrologic.fulcro.dom.arr_append(G__64844,tail);\n\nreturn G__64844;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__64843) : f.call(null,G__64843));\n} else {\nvar G__64845 = (function (){var G__64846 = [type,com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(({}),csskw)];\ncom.fulcrologic.fulcro.dom.arr_append(G__64846,args);\n\nreturn G__64846;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__64845) : f.call(null,G__64845));\n\n}\n}\n}\n}\n});\n\ncom.fulcrologic.fulcro.dom.macro_create_element.cljs$lang$maxFixedArity = 3;\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (form \"hello\")\n * (form nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (form {:onClick f} \"hello\")\n * (form #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (form :#the-id.klass.other-klass \"hello\")\n * (form :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.form = (function com$fulcrologic$fulcro$dom$form(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65552 = arguments.length;\nvar i__4731__auto___65553 = (0);\nwhile(true){\nif((i__4731__auto___65553 < len__4730__auto___65552)){\nargs__4736__auto__.push((arguments[i__4731__auto___65553]));\n\nvar G__65554 = (i__4731__auto___65553 + (1));\ni__4731__auto___65553 = G__65554;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.form.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.form.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64852 = conformed_args__63365__auto__;\nvar map__64852__$1 = (((((!((map__64852 == null))))?(((((map__64852.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64852.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64852):map__64852);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64852__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64852__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64852__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"form\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.form.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.form.cljs$lang$applyTo = (function (seq64847){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64847));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (audio \"hello\")\n * (audio nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (audio {:onClick f} \"hello\")\n * (audio #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (audio :#the-id.klass.other-klass \"hello\")\n * (audio :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.audio = (function com$fulcrologic$fulcro$dom$audio(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65555 = arguments.length;\nvar i__4731__auto___65556 = (0);\nwhile(true){\nif((i__4731__auto___65556 < len__4730__auto___65555)){\nargs__4736__auto__.push((arguments[i__4731__auto___65556]));\n\nvar G__65557 = (i__4731__auto___65556 + (1));\ni__4731__auto___65556 = G__65557;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.audio.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.audio.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64859 = conformed_args__63365__auto__;\nvar map__64859__$1 = (((((!((map__64859 == null))))?(((((map__64859.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64859.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64859):map__64859);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64859__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64859__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64859__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"audio\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.audio.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.audio.cljs$lang$applyTo = (function (seq64854){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64854));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (input \"hello\")\n * (input nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (input {:onClick f} \"hello\")\n * (input #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (input :#the-id.klass.other-klass \"hello\")\n * (input :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.input = (function com$fulcrologic$fulcro$dom$input(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65558 = arguments.length;\nvar i__4731__auto___65559 = (0);\nwhile(true){\nif((i__4731__auto___65559 < len__4730__auto___65558)){\nargs__4736__auto__.push((arguments[i__4731__auto___65559]));\n\nvar G__65560 = (i__4731__auto___65559 + (1));\ni__4731__auto___65559 = G__65560;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.input.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.input.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64862 = conformed_args__63365__auto__;\nvar map__64862__$1 = (((((!((map__64862 == null))))?(((((map__64862.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64862.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64862):map__64862);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64862__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64862__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64862__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"input\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.input.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.input.cljs$lang$applyTo = (function (seq64861){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64861));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (menuitem \"hello\")\n * (menuitem nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (menuitem {:onClick f} \"hello\")\n * (menuitem #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (menuitem :#the-id.klass.other-klass \"hello\")\n * (menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.menuitem = (function com$fulcrologic$fulcro$dom$menuitem(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65561 = arguments.length;\nvar i__4731__auto___65562 = (0);\nwhile(true){\nif((i__4731__auto___65562 < len__4730__auto___65561)){\nargs__4736__auto__.push((arguments[i__4731__auto___65562]));\n\nvar G__65563 = (i__4731__auto___65562 + (1));\ni__4731__auto___65562 = G__65563;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64872 = conformed_args__63365__auto__;\nvar map__64872__$1 = (((((!((map__64872 == null))))?(((((map__64872.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64872.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64872):map__64872);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64872__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64872__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64872__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"menuitem\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.menuitem.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.menuitem.cljs$lang$applyTo = (function (seq64869){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64869));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (radialGradient \"hello\")\n * (radialGradient nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (radialGradient {:onClick f} \"hello\")\n * (radialGradient #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (radialGradient :#the-id.klass.other-klass \"hello\")\n * (radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.radialGradient = (function com$fulcrologic$fulcro$dom$radialGradient(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65564 = arguments.length;\nvar i__4731__auto___65565 = (0);\nwhile(true){\nif((i__4731__auto___65565 < len__4730__auto___65564)){\nargs__4736__auto__.push((arguments[i__4731__auto___65565]));\n\nvar G__65566 = (i__4731__auto___65565 + (1));\ni__4731__auto___65565 = G__65566;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64886 = conformed_args__63365__auto__;\nvar map__64886__$1 = (((((!((map__64886 == null))))?(((((map__64886.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64886.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64886):map__64886);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64886__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64886__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64886__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"radialGradient\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.radialGradient.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.radialGradient.cljs$lang$applyTo = (function (seq64884){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64884));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feMerge \"hello\")\n * (feMerge nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feMerge {:onClick f} \"hello\")\n * (feMerge #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feMerge :#the-id.klass.other-klass \"hello\")\n * (feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feMerge = (function com$fulcrologic$fulcro$dom$feMerge(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65567 = arguments.length;\nvar i__4731__auto___65568 = (0);\nwhile(true){\nif((i__4731__auto___65568 < len__4730__auto___65567)){\nargs__4736__auto__.push((arguments[i__4731__auto___65568]));\n\nvar G__65569 = (i__4731__auto___65568 + (1));\ni__4731__auto___65568 = G__65569;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feMerge.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMerge.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64894 = conformed_args__63365__auto__;\nvar map__64894__$1 = (((((!((map__64894 == null))))?(((((map__64894.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64894.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64894):map__64894);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64894__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64894__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64894__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feMerge\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMerge.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feMerge.cljs$lang$applyTo = (function (seq64889){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64889));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (set \"hello\")\n * (set nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (set {:onClick f} \"hello\")\n * (set #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (set :#the-id.klass.other-klass \"hello\")\n * (set :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.set = (function com$fulcrologic$fulcro$dom$set(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65570 = arguments.length;\nvar i__4731__auto___65571 = (0);\nwhile(true){\nif((i__4731__auto___65571 < len__4730__auto___65570)){\nargs__4736__auto__.push((arguments[i__4731__auto___65571]));\n\nvar G__65572 = (i__4731__auto___65571 + (1));\ni__4731__auto___65571 = G__65572;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.set.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.set.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64903 = conformed_args__63365__auto__;\nvar map__64903__$1 = (((((!((map__64903 == null))))?(((((map__64903.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64903.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64903):map__64903);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64903__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64903__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64903__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"set\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.set.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.set.cljs$lang$applyTo = (function (seq64900){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64900));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feSpecularLighting \"hello\")\n * (feSpecularLighting nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feSpecularLighting {:onClick f} \"hello\")\n * (feSpecularLighting #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feSpecularLighting :#the-id.klass.other-klass \"hello\")\n * (feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feSpecularLighting = (function com$fulcrologic$fulcro$dom$feSpecularLighting(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65575 = arguments.length;\nvar i__4731__auto___65576 = (0);\nwhile(true){\nif((i__4731__auto___65576 < len__4730__auto___65575)){\nargs__4736__auto__.push((arguments[i__4731__auto___65576]));\n\nvar G__65577 = (i__4731__auto___65576 + (1));\ni__4731__auto___65576 = G__65577;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feSpecularLighting.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feSpecularLighting.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64909 = conformed_args__63365__auto__;\nvar map__64909__$1 = (((((!((map__64909 == null))))?(((((map__64909.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64909.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64909):map__64909);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64909__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64909__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64909__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feSpecularLighting\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feSpecularLighting.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feSpecularLighting.cljs$lang$applyTo = (function (seq64907){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64907));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (base \"hello\")\n * (base nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (base {:onClick f} \"hello\")\n * (base #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (base :#the-id.klass.other-klass \"hello\")\n * (base :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.base = (function com$fulcrologic$fulcro$dom$base(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65578 = arguments.length;\nvar i__4731__auto___65579 = (0);\nwhile(true){\nif((i__4731__auto___65579 < len__4730__auto___65578)){\nargs__4736__auto__.push((arguments[i__4731__auto___65579]));\n\nvar G__65580 = (i__4731__auto___65579 + (1));\ni__4731__auto___65579 = G__65580;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.base.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.base.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64916 = conformed_args__63365__auto__;\nvar map__64916__$1 = (((((!((map__64916 == null))))?(((((map__64916.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64916.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64916):map__64916);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64916__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64916__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64916__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"base\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.base.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.base.cljs$lang$applyTo = (function (seq64914){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64914));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h1 \"hello\")\n * (h1 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h1 {:onClick f} \"hello\")\n * (h1 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h1 :#the-id.klass.other-klass \"hello\")\n * (h1 :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.h1 = (function com$fulcrologic$fulcro$dom$h1(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65581 = arguments.length;\nvar i__4731__auto___65582 = (0);\nwhile(true){\nif((i__4731__auto___65582 < len__4730__auto___65581)){\nargs__4736__auto__.push((arguments[i__4731__auto___65582]));\n\nvar G__65583 = (i__4731__auto___65582 + (1));\ni__4731__auto___65582 = G__65583;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h1.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h1.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64922 = conformed_args__63365__auto__;\nvar map__64922__$1 = (((((!((map__64922 == null))))?(((((map__64922.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64922.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64922):map__64922);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64922__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64922__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64922__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h1\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h1.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h1.cljs$lang$applyTo = (function (seq64918){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64918));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feOffset \"hello\")\n * (feOffset nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feOffset {:onClick f} \"hello\")\n * (feOffset #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feOffset :#the-id.klass.other-klass \"hello\")\n * (feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feOffset = (function com$fulcrologic$fulcro$dom$feOffset(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65584 = arguments.length;\nvar i__4731__auto___65585 = (0);\nwhile(true){\nif((i__4731__auto___65585 < len__4730__auto___65584)){\nargs__4736__auto__.push((arguments[i__4731__auto___65585]));\n\nvar G__65586 = (i__4731__auto___65585 + (1));\ni__4731__auto___65585 = G__65586;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feOffset.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feOffset.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64928 = conformed_args__63365__auto__;\nvar map__64928__$1 = (((((!((map__64928 == null))))?(((((map__64928.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64928.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64928):map__64928);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64928__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64928__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64928__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feOffset\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feOffset.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feOffset.cljs$lang$applyTo = (function (seq64927){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64927));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (embed \"hello\")\n * (embed nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (embed {:onClick f} \"hello\")\n * (embed #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (embed :#the-id.klass.other-klass \"hello\")\n * (embed :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.embed = (function com$fulcrologic$fulcro$dom$embed(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65593 = arguments.length;\nvar i__4731__auto___65594 = (0);\nwhile(true){\nif((i__4731__auto___65594 < len__4730__auto___65593)){\nargs__4736__auto__.push((arguments[i__4731__auto___65594]));\n\nvar G__65595 = (i__4731__auto___65594 + (1));\ni__4731__auto___65594 = G__65595;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.embed.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.embed.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64935 = conformed_args__63365__auto__;\nvar map__64935__$1 = (((((!((map__64935 == null))))?(((((map__64935.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64935.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64935):map__64935);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64935__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64935__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64935__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"embed\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.embed.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.embed.cljs$lang$applyTo = (function (seq64933){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64933));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (animateMotion \"hello\")\n * (animateMotion nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (animateMotion {:onClick f} \"hello\")\n * (animateMotion #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (animateMotion :#the-id.klass.other-klass \"hello\")\n * (animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.animateMotion = (function com$fulcrologic$fulcro$dom$animateMotion(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65597 = arguments.length;\nvar i__4731__auto___65598 = (0);\nwhile(true){\nif((i__4731__auto___65598 < len__4730__auto___65597)){\nargs__4736__auto__.push((arguments[i__4731__auto___65598]));\n\nvar G__65599 = (i__4731__auto___65598 + (1));\ni__4731__auto___65598 = G__65599;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.animateMotion.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateMotion.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64941 = conformed_args__63365__auto__;\nvar map__64941__$1 = (((((!((map__64941 == null))))?(((((map__64941.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64941.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64941):map__64941);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64941__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64941__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64941__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"animateMotion\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateMotion.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.animateMotion.cljs$lang$applyTo = (function (seq64937){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64937));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h3 \"hello\")\n * (h3 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h3 {:onClick f} \"hello\")\n * (h3 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h3 :#the-id.klass.other-klass \"hello\")\n * (h3 :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.h3 = (function com$fulcrologic$fulcro$dom$h3(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65602 = arguments.length;\nvar i__4731__auto___65603 = (0);\nwhile(true){\nif((i__4731__auto___65603 < len__4730__auto___65602)){\nargs__4736__auto__.push((arguments[i__4731__auto___65603]));\n\nvar G__65604 = (i__4731__auto___65603 + (1));\ni__4731__auto___65603 = G__65604;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h3.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h3.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64945 = conformed_args__63365__auto__;\nvar map__64945__$1 = (((((!((map__64945 == null))))?(((((map__64945.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64945.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64945):map__64945);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64945__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64945__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64945__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h3\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h3.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h3.cljs$lang$applyTo = (function (seq64943){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64943));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (body \"hello\")\n * (body nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (body {:onClick f} \"hello\")\n * (body #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (body :#the-id.klass.other-klass \"hello\")\n * (body :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.body = (function com$fulcrologic$fulcro$dom$body(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65605 = arguments.length;\nvar i__4731__auto___65606 = (0);\nwhile(true){\nif((i__4731__auto___65606 < len__4730__auto___65605)){\nargs__4736__auto__.push((arguments[i__4731__auto___65606]));\n\nvar G__65607 = (i__4731__auto___65606 + (1));\ni__4731__auto___65606 = G__65607;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.body.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.body.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64952 = conformed_args__63365__auto__;\nvar map__64952__$1 = (((((!((map__64952 == null))))?(((((map__64952.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64952.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64952):map__64952);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64952__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64952__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64952__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"body\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.body.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.body.cljs$lang$applyTo = (function (seq64950){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64950));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (hkern \"hello\")\n * (hkern nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (hkern {:onClick f} \"hello\")\n * (hkern #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (hkern :#the-id.klass.other-klass \"hello\")\n * (hkern :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.hkern = (function com$fulcrologic$fulcro$dom$hkern(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65608 = arguments.length;\nvar i__4731__auto___65609 = (0);\nwhile(true){\nif((i__4731__auto___65609 < len__4730__auto___65608)){\nargs__4736__auto__.push((arguments[i__4731__auto___65609]));\n\nvar G__65610 = (i__4731__auto___65609 + (1));\ni__4731__auto___65609 = G__65610;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.hkern.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hkern.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64955 = conformed_args__63365__auto__;\nvar map__64955__$1 = (((((!((map__64955 == null))))?(((((map__64955.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64955.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64955):map__64955);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64955__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64955__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64955__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"hkern\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hkern.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.hkern.cljs$lang$applyTo = (function (seq64954){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64954));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (keygen \"hello\")\n * (keygen nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (keygen {:onClick f} \"hello\")\n * (keygen #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (keygen :#the-id.klass.other-klass \"hello\")\n * (keygen :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.keygen = (function com$fulcrologic$fulcro$dom$keygen(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65611 = arguments.length;\nvar i__4731__auto___65612 = (0);\nwhile(true){\nif((i__4731__auto___65612 < len__4730__auto___65611)){\nargs__4736__auto__.push((arguments[i__4731__auto___65612]));\n\nvar G__65613 = (i__4731__auto___65612 + (1));\ni__4731__auto___65612 = G__65613;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.keygen.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.keygen.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64966 = conformed_args__63365__auto__;\nvar map__64966__$1 = (((((!((map__64966 == null))))?(((((map__64966.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64966.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64966):map__64966);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64966__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64966__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64966__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"keygen\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.keygen.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.keygen.cljs$lang$applyTo = (function (seq64959){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64959));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face-format \"hello\")\n * (font-face-format nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face-format {:onClick f} \"hello\")\n * (font-face-format #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face-format :#the-id.klass.other-klass \"hello\")\n * (font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.font_face_format = (function com$fulcrologic$fulcro$dom$font_face_format(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65614 = arguments.length;\nvar i__4731__auto___65615 = (0);\nwhile(true){\nif((i__4731__auto___65615 < len__4730__auto___65614)){\nargs__4736__auto__.push((arguments[i__4731__auto___65615]));\n\nvar G__65616 = (i__4731__auto___65615 + (1));\ni__4731__auto___65615 = G__65616;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face_format.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_format.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64970 = conformed_args__63365__auto__;\nvar map__64970__$1 = (((((!((map__64970 == null))))?(((((map__64970.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64970.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64970):map__64970);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64970__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64970__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64970__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face-format\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_format.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face_format.cljs$lang$applyTo = (function (seq64969){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64969));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFuncA \"hello\")\n * (feFuncA nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFuncA {:onClick f} \"hello\")\n * (feFuncA #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFuncA :#the-id.klass.other-klass \"hello\")\n * (feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feFuncA = (function com$fulcrologic$fulcro$dom$feFuncA(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65617 = arguments.length;\nvar i__4731__auto___65618 = (0);\nwhile(true){\nif((i__4731__auto___65618 < len__4730__auto___65617)){\nargs__4736__auto__.push((arguments[i__4731__auto___65618]));\n\nvar G__65619 = (i__4731__auto___65618 + (1));\ni__4731__auto___65618 = G__65619;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFuncA.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncA.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64980 = conformed_args__63365__auto__;\nvar map__64980__$1 = (((((!((map__64980 == null))))?(((((map__64980.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64980.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64980):map__64980);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64980__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64980__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64980__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFuncA\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncA.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFuncA.cljs$lang$applyTo = (function (seq64976){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64976));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (progress \"hello\")\n * (progress nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (progress {:onClick f} \"hello\")\n * (progress #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (progress :#the-id.klass.other-klass \"hello\")\n * (progress :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.progress = (function com$fulcrologic$fulcro$dom$progress(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65620 = arguments.length;\nvar i__4731__auto___65621 = (0);\nwhile(true){\nif((i__4731__auto___65621 < len__4730__auto___65620)){\nargs__4736__auto__.push((arguments[i__4731__auto___65621]));\n\nvar G__65622 = (i__4731__auto___65621 + (1));\ni__4731__auto___65621 = G__65622;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.progress.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.progress.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64983 = conformed_args__63365__auto__;\nvar map__64983__$1 = (((((!((map__64983 == null))))?(((((map__64983.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64983.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64983):map__64983);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64983__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64983__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64983__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"progress\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.progress.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.progress.cljs$lang$applyTo = (function (seq64982){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64982));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (main \"hello\")\n * (main nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (main {:onClick f} \"hello\")\n * (main #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (main :#the-id.klass.other-klass \"hello\")\n * (main :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.main = (function com$fulcrologic$fulcro$dom$main(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65623 = arguments.length;\nvar i__4731__auto___65624 = (0);\nwhile(true){\nif((i__4731__auto___65624 < len__4730__auto___65623)){\nargs__4736__auto__.push((arguments[i__4731__auto___65624]));\n\nvar G__65625 = (i__4731__auto___65624 + (1));\ni__4731__auto___65624 = G__65625;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.main.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.main.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64986 = conformed_args__63365__auto__;\nvar map__64986__$1 = (((((!((map__64986 == null))))?(((((map__64986.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64986.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64986):map__64986);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64986__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64986__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64986__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"main\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.main.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.main.cljs$lang$applyTo = (function (seq64985){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64985));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (cite \"hello\")\n * (cite nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (cite {:onClick f} \"hello\")\n * (cite #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (cite :#the-id.klass.other-klass \"hello\")\n * (cite :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.cite = (function com$fulcrologic$fulcro$dom$cite(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65626 = arguments.length;\nvar i__4731__auto___65627 = (0);\nwhile(true){\nif((i__4731__auto___65627 < len__4730__auto___65626)){\nargs__4736__auto__.push((arguments[i__4731__auto___65627]));\n\nvar G__65628 = (i__4731__auto___65627 + (1));\ni__4731__auto___65627 = G__65628;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.cite.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.cite.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__64990 = conformed_args__63365__auto__;\nvar map__64990__$1 = (((((!((map__64990 == null))))?(((((map__64990.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64990.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64990):map__64990);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64990__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64990__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64990__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"cite\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.cite.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.cite.cljs$lang$applyTo = (function (seq64988){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64988));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (rect \"hello\")\n * (rect nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (rect {:onClick f} \"hello\")\n * (rect #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (rect :#the-id.klass.other-klass \"hello\")\n * (rect :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.rect = (function com$fulcrologic$fulcro$dom$rect(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65629 = arguments.length;\nvar i__4731__auto___65630 = (0);\nwhile(true){\nif((i__4731__auto___65630 < len__4730__auto___65629)){\nargs__4736__auto__.push((arguments[i__4731__auto___65630]));\n\nvar G__65631 = (i__4731__auto___65630 + (1));\ni__4731__auto___65630 = G__65631;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.rect.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rect.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65001 = conformed_args__63365__auto__;\nvar map__65001__$1 = (((((!((map__65001 == null))))?(((((map__65001.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65001.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65001):map__65001);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65001__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65001__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65001__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"rect\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rect.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.rect.cljs$lang$applyTo = (function (seq64992){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64992));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tref \"hello\")\n * (tref nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tref {:onClick f} \"hello\")\n * (tref #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tref :#the-id.klass.other-klass \"hello\")\n * (tref :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.tref = (function com$fulcrologic$fulcro$dom$tref(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65632 = arguments.length;\nvar i__4731__auto___65633 = (0);\nwhile(true){\nif((i__4731__auto___65633 < len__4730__auto___65632)){\nargs__4736__auto__.push((arguments[i__4731__auto___65633]));\n\nvar G__65634 = (i__4731__auto___65633 + (1));\ni__4731__auto___65633 = G__65634;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tref.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tref.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65007 = conformed_args__63365__auto__;\nvar map__65007__$1 = (((((!((map__65007 == null))))?(((((map__65007.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65007.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65007):map__65007);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65007__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65007__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65007__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tref\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tref.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tref.cljs$lang$applyTo = (function (seq65005){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65005));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meshpatch \"hello\")\n * (meshpatch nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meshpatch {:onClick f} \"hello\")\n * (meshpatch #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meshpatch :#the-id.klass.other-klass \"hello\")\n * (meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.meshpatch = (function com$fulcrologic$fulcro$dom$meshpatch(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65635 = arguments.length;\nvar i__4731__auto___65636 = (0);\nwhile(true){\nif((i__4731__auto___65636 < len__4730__auto___65635)){\nargs__4736__auto__.push((arguments[i__4731__auto___65636]));\n\nvar G__65637 = (i__4731__auto___65636 + (1));\ni__4731__auto___65636 = G__65637;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meshpatch.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshpatch.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65011 = conformed_args__63365__auto__;\nvar map__65011__$1 = (((((!((map__65011 == null))))?(((((map__65011.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65011.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65011):map__65011);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65011__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65011__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65011__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meshpatch\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshpatch.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meshpatch.cljs$lang$applyTo = (function (seq65010){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65010));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (polyline \"hello\")\n * (polyline nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (polyline {:onClick f} \"hello\")\n * (polyline #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (polyline :#the-id.klass.other-klass \"hello\")\n * (polyline :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.polyline = (function com$fulcrologic$fulcro$dom$polyline(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65638 = arguments.length;\nvar i__4731__auto___65639 = (0);\nwhile(true){\nif((i__4731__auto___65639 < len__4730__auto___65638)){\nargs__4736__auto__.push((arguments[i__4731__auto___65639]));\n\nvar G__65640 = (i__4731__auto___65639 + (1));\ni__4731__auto___65639 = G__65640;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.polyline.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.polyline.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65014 = conformed_args__63365__auto__;\nvar map__65014__$1 = (((((!((map__65014 == null))))?(((((map__65014.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65014.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65014):map__65014);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65014__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65014__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65014__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"polyline\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.polyline.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.polyline.cljs$lang$applyTo = (function (seq65013){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65013));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (metadata \"hello\")\n * (metadata nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (metadata {:onClick f} \"hello\")\n * (metadata #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (metadata :#the-id.klass.other-klass \"hello\")\n * (metadata :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.metadata = (function com$fulcrologic$fulcro$dom$metadata(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65641 = arguments.length;\nvar i__4731__auto___65642 = (0);\nwhile(true){\nif((i__4731__auto___65642 < len__4730__auto___65641)){\nargs__4736__auto__.push((arguments[i__4731__auto___65642]));\n\nvar G__65643 = (i__4731__auto___65642 + (1));\ni__4731__auto___65642 = G__65643;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.metadata.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.metadata.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65018 = conformed_args__63365__auto__;\nvar map__65018__$1 = (((((!((map__65018 == null))))?(((((map__65018.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65018.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65018):map__65018);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65018__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65018__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65018__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"metadata\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.metadata.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.metadata.cljs$lang$applyTo = (function (seq65016){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65016));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (map \"hello\")\n * (map nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (map {:onClick f} \"hello\")\n * (map #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (map :#the-id.klass.other-klass \"hello\")\n * (map :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.map = (function com$fulcrologic$fulcro$dom$map(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65644 = arguments.length;\nvar i__4731__auto___65645 = (0);\nwhile(true){\nif((i__4731__auto___65645 < len__4730__auto___65644)){\nargs__4736__auto__.push((arguments[i__4731__auto___65645]));\n\nvar G__65646 = (i__4731__auto___65645 + (1));\ni__4731__auto___65645 = G__65646;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.map.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.map.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65021 = conformed_args__63365__auto__;\nvar map__65021__$1 = (((((!((map__65021 == null))))?(((((map__65021.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65021.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65021):map__65021);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65021__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65021__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65021__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"map\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.map.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.map.cljs$lang$applyTo = (function (seq65020){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65020));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (object \"hello\")\n * (object nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (object {:onClick f} \"hello\")\n * (object #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (object :#the-id.klass.other-klass \"hello\")\n * (object :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.object = (function com$fulcrologic$fulcro$dom$object(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65647 = arguments.length;\nvar i__4731__auto___65648 = (0);\nwhile(true){\nif((i__4731__auto___65648 < len__4730__auto___65647)){\nargs__4736__auto__.push((arguments[i__4731__auto___65648]));\n\nvar G__65649 = (i__4731__auto___65648 + (1));\ni__4731__auto___65648 = G__65649;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.object.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.object.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65024 = conformed_args__63365__auto__;\nvar map__65024__$1 = (((((!((map__65024 == null))))?(((((map__65024.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65024.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65024):map__65024);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65024__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65024__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65024__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"object\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.object.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.object.cljs$lang$applyTo = (function (seq65023){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65023));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (i \"hello\")\n * (i nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (i {:onClick f} \"hello\")\n * (i #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (i :#the-id.klass.other-klass \"hello\")\n * (i :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.i = (function com$fulcrologic$fulcro$dom$i(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65650 = arguments.length;\nvar i__4731__auto___65651 = (0);\nwhile(true){\nif((i__4731__auto___65651 < len__4730__auto___65650)){\nargs__4736__auto__.push((arguments[i__4731__auto___65651]));\n\nvar G__65652 = (i__4731__auto___65651 + (1));\ni__4731__auto___65651 = G__65652;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.i.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.i.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65027 = conformed_args__63365__auto__;\nvar map__65027__$1 = (((((!((map__65027 == null))))?(((((map__65027.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65027.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65027):map__65027);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65027__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65027__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65027__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"i\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.i.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.i.cljs$lang$applyTo = (function (seq65026){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65026));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face-name \"hello\")\n * (font-face-name nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face-name {:onClick f} \"hello\")\n * (font-face-name #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face-name :#the-id.klass.other-klass \"hello\")\n * (font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.font_face_name = (function com$fulcrologic$fulcro$dom$font_face_name(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65653 = arguments.length;\nvar i__4731__auto___65654 = (0);\nwhile(true){\nif((i__4731__auto___65654 < len__4730__auto___65653)){\nargs__4736__auto__.push((arguments[i__4731__auto___65654]));\n\nvar G__65655 = (i__4731__auto___65654 + (1));\ni__4731__auto___65654 = G__65655;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face_name.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_name.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65031 = conformed_args__63365__auto__;\nvar map__65031__$1 = (((((!((map__65031 == null))))?(((((map__65031.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65031.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65031):map__65031);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65031__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65031__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65031__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face-name\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_name.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face_name.cljs$lang$applyTo = (function (seq65029){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65029));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (p \"hello\")\n * (p nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (p {:onClick f} \"hello\")\n * (p #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (p :#the-id.klass.other-klass \"hello\")\n * (p :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.p = (function com$fulcrologic$fulcro$dom$p(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65656 = arguments.length;\nvar i__4731__auto___65657 = (0);\nwhile(true){\nif((i__4731__auto___65657 < len__4730__auto___65656)){\nargs__4736__auto__.push((arguments[i__4731__auto___65657]));\n\nvar G__65658 = (i__4731__auto___65657 + (1));\ni__4731__auto___65657 = G__65658;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.p.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.p.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65034 = conformed_args__63365__auto__;\nvar map__65034__$1 = (((((!((map__65034 == null))))?(((((map__65034.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65034.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65034):map__65034);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65034__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65034__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65034__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"p\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.p.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.p.cljs$lang$applyTo = (function (seq65033){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65033));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFuncR \"hello\")\n * (feFuncR nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFuncR {:onClick f} \"hello\")\n * (feFuncR #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFuncR :#the-id.klass.other-klass \"hello\")\n * (feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feFuncR = (function com$fulcrologic$fulcro$dom$feFuncR(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65659 = arguments.length;\nvar i__4731__auto___65660 = (0);\nwhile(true){\nif((i__4731__auto___65660 < len__4730__auto___65659)){\nargs__4736__auto__.push((arguments[i__4731__auto___65660]));\n\nvar G__65661 = (i__4731__auto___65660 + (1));\ni__4731__auto___65660 = G__65661;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFuncR.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncR.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65037 = conformed_args__63365__auto__;\nvar map__65037__$1 = (((((!((map__65037 == null))))?(((((map__65037.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65037.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65037):map__65037);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65037__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65037__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65037__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFuncR\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncR.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFuncR.cljs$lang$applyTo = (function (seq65036){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65036));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (hatchpath \"hello\")\n * (hatchpath nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (hatchpath {:onClick f} \"hello\")\n * (hatchpath #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (hatchpath :#the-id.klass.other-klass \"hello\")\n * (hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.hatchpath = (function com$fulcrologic$fulcro$dom$hatchpath(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65662 = arguments.length;\nvar i__4731__auto___65663 = (0);\nwhile(true){\nif((i__4731__auto___65663 < len__4730__auto___65662)){\nargs__4736__auto__.push((arguments[i__4731__auto___65663]));\n\nvar G__65664 = (i__4731__auto___65663 + (1));\ni__4731__auto___65663 = G__65664;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.hatchpath.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hatchpath.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65041 = conformed_args__63365__auto__;\nvar map__65041__$1 = (((((!((map__65041 == null))))?(((((map__65041.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65041.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65041):map__65041);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65041__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65041__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65041__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"hatchpath\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hatchpath.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.hatchpath.cljs$lang$applyTo = (function (seq65039){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65039));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (altGlyphItem \"hello\")\n * (altGlyphItem nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (altGlyphItem {:onClick f} \"hello\")\n * (altGlyphItem #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (altGlyphItem :#the-id.klass.other-klass \"hello\")\n * (altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.altGlyphItem = (function com$fulcrologic$fulcro$dom$altGlyphItem(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65665 = arguments.length;\nvar i__4731__auto___65666 = (0);\nwhile(true){\nif((i__4731__auto___65666 < len__4730__auto___65665)){\nargs__4736__auto__.push((arguments[i__4731__auto___65666]));\n\nvar G__65667 = (i__4731__auto___65666 + (1));\ni__4731__auto___65666 = G__65667;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.altGlyphItem.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyphItem.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65044 = conformed_args__63365__auto__;\nvar map__65044__$1 = (((((!((map__65044 == null))))?(((((map__65044.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65044.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65044):map__65044);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65044__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65044__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65044__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"altGlyphItem\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyphItem.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.altGlyphItem.cljs$lang$applyTo = (function (seq65043){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65043));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (nav \"hello\")\n * (nav nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (nav {:onClick f} \"hello\")\n * (nav #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (nav :#the-id.klass.other-klass \"hello\")\n * (nav :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.nav = (function com$fulcrologic$fulcro$dom$nav(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65668 = arguments.length;\nvar i__4731__auto___65669 = (0);\nwhile(true){\nif((i__4731__auto___65669 < len__4730__auto___65668)){\nargs__4736__auto__.push((arguments[i__4731__auto___65669]));\n\nvar G__65670 = (i__4731__auto___65669 + (1));\ni__4731__auto___65669 = G__65670;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.nav.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.nav.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65047 = conformed_args__63365__auto__;\nvar map__65047__$1 = (((((!((map__65047 == null))))?(((((map__65047.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65047.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65047):map__65047);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65047__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65047__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65047__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"nav\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.nav.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.nav.cljs$lang$applyTo = (function (seq65046){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65046));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ruby \"hello\")\n * (ruby nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ruby {:onClick f} \"hello\")\n * (ruby #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ruby :#the-id.klass.other-klass \"hello\")\n * (ruby :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.ruby = (function com$fulcrologic$fulcro$dom$ruby(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65671 = arguments.length;\nvar i__4731__auto___65672 = (0);\nwhile(true){\nif((i__4731__auto___65672 < len__4730__auto___65671)){\nargs__4736__auto__.push((arguments[i__4731__auto___65672]));\n\nvar G__65673 = (i__4731__auto___65672 + (1));\ni__4731__auto___65672 = G__65673;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ruby.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ruby.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65050 = conformed_args__63365__auto__;\nvar map__65050__$1 = (((((!((map__65050 == null))))?(((((map__65050.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65050.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65050):map__65050);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65050__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65050__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65050__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ruby\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ruby.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ruby.cljs$lang$applyTo = (function (seq65049){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65049));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (switch \"hello\")\n * (switch nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (switch {:onClick f} \"hello\")\n * (switch #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (switch :#the-id.klass.other-klass \"hello\")\n * (switch :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.switch$ = (function com$fulcrologic$fulcro$dom$switch(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65674 = arguments.length;\nvar i__4731__auto___65675 = (0);\nwhile(true){\nif((i__4731__auto___65675 < len__4730__auto___65674)){\nargs__4736__auto__.push((arguments[i__4731__auto___65675]));\n\nvar G__65676 = (i__4731__auto___65675 + (1));\ni__4731__auto___65675 = G__65676;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.switch$.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.switch$.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65053 = conformed_args__63365__auto__;\nvar map__65053__$1 = (((((!((map__65053 == null))))?(((((map__65053.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65053.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65053):map__65053);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65053__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65053__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65053__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"switch\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.switch$.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.switch$.cljs$lang$applyTo = (function (seq65052){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65052));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (a \"hello\")\n * (a nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (a {:onClick f} \"hello\")\n * (a #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (a :#the-id.klass.other-klass \"hello\")\n * (a :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.a = (function com$fulcrologic$fulcro$dom$a(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65677 = arguments.length;\nvar i__4731__auto___65678 = (0);\nwhile(true){\nif((i__4731__auto___65678 < len__4730__auto___65677)){\nargs__4736__auto__.push((arguments[i__4731__auto___65678]));\n\nvar G__65679 = (i__4731__auto___65678 + (1));\ni__4731__auto___65678 = G__65679;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.a.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.a.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65056 = conformed_args__63365__auto__;\nvar map__65056__$1 = (((((!((map__65056 == null))))?(((((map__65056.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65056.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65056):map__65056);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65056__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65056__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65056__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"a\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.a.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.a.cljs$lang$applyTo = (function (seq65055){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65055));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (view \"hello\")\n * (view nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (view {:onClick f} \"hello\")\n * (view #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (view :#the-id.klass.other-klass \"hello\")\n * (view :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.view = (function com$fulcrologic$fulcro$dom$view(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65680 = arguments.length;\nvar i__4731__auto___65681 = (0);\nwhile(true){\nif((i__4731__auto___65681 < len__4730__auto___65680)){\nargs__4736__auto__.push((arguments[i__4731__auto___65681]));\n\nvar G__65682 = (i__4731__auto___65681 + (1));\ni__4731__auto___65681 = G__65682;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.view.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.view.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65059 = conformed_args__63365__auto__;\nvar map__65059__$1 = (((((!((map__65059 == null))))?(((((map__65059.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65059.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65059):map__65059);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65059__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65059__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65059__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"view\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.view.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.view.cljs$lang$applyTo = (function (seq65058){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65058));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (menu \"hello\")\n * (menu nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (menu {:onClick f} \"hello\")\n * (menu #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (menu :#the-id.klass.other-klass \"hello\")\n * (menu :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.menu = (function com$fulcrologic$fulcro$dom$menu(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65683 = arguments.length;\nvar i__4731__auto___65684 = (0);\nwhile(true){\nif((i__4731__auto___65684 < len__4730__auto___65683)){\nargs__4736__auto__.push((arguments[i__4731__auto___65684]));\n\nvar G__65685 = (i__4731__auto___65684 + (1));\ni__4731__auto___65684 = G__65685;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.menu.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.menu.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65062 = conformed_args__63365__auto__;\nvar map__65062__$1 = (((((!((map__65062 == null))))?(((((map__65062.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65062.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65062):map__65062);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65062__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65062__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65062__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"menu\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.menu.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.menu.cljs$lang$applyTo = (function (seq65061){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65061));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (blockquote \"hello\")\n * (blockquote nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (blockquote {:onClick f} \"hello\")\n * (blockquote #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (blockquote :#the-id.klass.other-klass \"hello\")\n * (blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.blockquote = (function com$fulcrologic$fulcro$dom$blockquote(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65686 = arguments.length;\nvar i__4731__auto___65687 = (0);\nwhile(true){\nif((i__4731__auto___65687 < len__4730__auto___65686)){\nargs__4736__auto__.push((arguments[i__4731__auto___65687]));\n\nvar G__65688 = (i__4731__auto___65687 + (1));\ni__4731__auto___65687 = G__65688;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65065 = conformed_args__63365__auto__;\nvar map__65065__$1 = (((((!((map__65065 == null))))?(((((map__65065.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65065.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65065):map__65065);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65065__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65065__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65065__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"blockquote\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.blockquote.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.blockquote.cljs$lang$applyTo = (function (seq65064){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65064));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (img \"hello\")\n * (img nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (img {:onClick f} \"hello\")\n * (img #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (img :#the-id.klass.other-klass \"hello\")\n * (img :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.img = (function com$fulcrologic$fulcro$dom$img(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65689 = arguments.length;\nvar i__4731__auto___65690 = (0);\nwhile(true){\nif((i__4731__auto___65690 < len__4730__auto___65689)){\nargs__4736__auto__.push((arguments[i__4731__auto___65690]));\n\nvar G__65691 = (i__4731__auto___65690 + (1));\ni__4731__auto___65690 = G__65691;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.img.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.img.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65068 = conformed_args__63365__auto__;\nvar map__65068__$1 = (((((!((map__65068 == null))))?(((((map__65068.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65068.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65068):map__65068);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65068__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65068__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65068__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"img\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.img.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.img.cljs$lang$applyTo = (function (seq65067){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65067));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFuncG \"hello\")\n * (feFuncG nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFuncG {:onClick f} \"hello\")\n * (feFuncG #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFuncG :#the-id.klass.other-klass \"hello\")\n * (feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feFuncG = (function com$fulcrologic$fulcro$dom$feFuncG(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65692 = arguments.length;\nvar i__4731__auto___65693 = (0);\nwhile(true){\nif((i__4731__auto___65693 < len__4730__auto___65692)){\nargs__4736__auto__.push((arguments[i__4731__auto___65693]));\n\nvar G__65694 = (i__4731__auto___65693 + (1));\ni__4731__auto___65693 = G__65694;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFuncG.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncG.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65071 = conformed_args__63365__auto__;\nvar map__65071__$1 = (((((!((map__65071 == null))))?(((((map__65071.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65071.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65071):map__65071);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65071__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65071__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65071__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFuncG\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncG.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFuncG.cljs$lang$applyTo = (function (seq65070){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65070));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (text \"hello\")\n * (text nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (text {:onClick f} \"hello\")\n * (text #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (text :#the-id.klass.other-klass \"hello\")\n * (text :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.text = (function com$fulcrologic$fulcro$dom$text(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65695 = arguments.length;\nvar i__4731__auto___65696 = (0);\nwhile(true){\nif((i__4731__auto___65696 < len__4730__auto___65695)){\nargs__4736__auto__.push((arguments[i__4731__auto___65696]));\n\nvar G__65697 = (i__4731__auto___65696 + (1));\ni__4731__auto___65696 = G__65697;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.text.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.text.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65074 = conformed_args__63365__auto__;\nvar map__65074__$1 = (((((!((map__65074 == null))))?(((((map__65074.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65074.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65074):map__65074);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65074__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65074__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65074__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"text\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.text.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.text.cljs$lang$applyTo = (function (seq65073){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65073));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (span \"hello\")\n * (span nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (span {:onClick f} \"hello\")\n * (span #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (span :#the-id.klass.other-klass \"hello\")\n * (span :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.span = (function com$fulcrologic$fulcro$dom$span(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65698 = arguments.length;\nvar i__4731__auto___65699 = (0);\nwhile(true){\nif((i__4731__auto___65699 < len__4730__auto___65698)){\nargs__4736__auto__.push((arguments[i__4731__auto___65699]));\n\nvar G__65700 = (i__4731__auto___65699 + (1));\ni__4731__auto___65699 = G__65700;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.span.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.span.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65077 = conformed_args__63365__auto__;\nvar map__65077__$1 = (((((!((map__65077 == null))))?(((((map__65077.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65077.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65077):map__65077);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65077__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65077__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65077__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"span\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.span.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.span.cljs$lang$applyTo = (function (seq65076){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65076));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (track \"hello\")\n * (track nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (track {:onClick f} \"hello\")\n * (track #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (track :#the-id.klass.other-klass \"hello\")\n * (track :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.track = (function com$fulcrologic$fulcro$dom$track(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65701 = arguments.length;\nvar i__4731__auto___65702 = (0);\nwhile(true){\nif((i__4731__auto___65702 < len__4730__auto___65701)){\nargs__4736__auto__.push((arguments[i__4731__auto___65702]));\n\nvar G__65703 = (i__4731__auto___65702 + (1));\ni__4731__auto___65702 = G__65703;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.track.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.track.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65080 = conformed_args__63365__auto__;\nvar map__65080__$1 = (((((!((map__65080 == null))))?(((((map__65080.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65080.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65080):map__65080);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65080__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65080__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65080__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"track\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.track.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.track.cljs$lang$applyTo = (function (seq65079){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65079));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (data \"hello\")\n * (data nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (data {:onClick f} \"hello\")\n * (data #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (data :#the-id.klass.other-klass \"hello\")\n * (data :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.data = (function com$fulcrologic$fulcro$dom$data(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65704 = arguments.length;\nvar i__4731__auto___65705 = (0);\nwhile(true){\nif((i__4731__auto___65705 < len__4730__auto___65704)){\nargs__4736__auto__.push((arguments[i__4731__auto___65705]));\n\nvar G__65706 = (i__4731__auto___65705 + (1));\ni__4731__auto___65705 = G__65706;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.data.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.data.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65083 = conformed_args__63365__auto__;\nvar map__65083__$1 = (((((!((map__65083 == null))))?(((((map__65083.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65083.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65083):map__65083);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65083__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65083__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65083__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"data\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.data.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.data.cljs$lang$applyTo = (function (seq65082){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65082));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (u \"hello\")\n * (u nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (u {:onClick f} \"hello\")\n * (u #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (u :#the-id.klass.other-klass \"hello\")\n * (u :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.u = (function com$fulcrologic$fulcro$dom$u(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65707 = arguments.length;\nvar i__4731__auto___65708 = (0);\nwhile(true){\nif((i__4731__auto___65708 < len__4730__auto___65707)){\nargs__4736__auto__.push((arguments[i__4731__auto___65708]));\n\nvar G__65709 = (i__4731__auto___65708 + (1));\ni__4731__auto___65708 = G__65709;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.u.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.u.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65086 = conformed_args__63365__auto__;\nvar map__65086__$1 = (((((!((map__65086 == null))))?(((((map__65086.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65086.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65086):map__65086);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65086__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65086__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65086__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"u\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.u.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.u.cljs$lang$applyTo = (function (seq65085){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65085));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dl \"hello\")\n * (dl nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dl {:onClick f} \"hello\")\n * (dl #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dl :#the-id.klass.other-klass \"hello\")\n * (dl :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.dl = (function com$fulcrologic$fulcro$dom$dl(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65710 = arguments.length;\nvar i__4731__auto___65711 = (0);\nwhile(true){\nif((i__4731__auto___65711 < len__4730__auto___65710)){\nargs__4736__auto__.push((arguments[i__4731__auto___65711]));\n\nvar G__65712 = (i__4731__auto___65711 + (1));\ni__4731__auto___65711 = G__65712;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dl.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dl.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65089 = conformed_args__63365__auto__;\nvar map__65089__$1 = (((((!((map__65089 == null))))?(((((map__65089.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65089.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65089):map__65089);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65089__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65089__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65089__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dl\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dl.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dl.cljs$lang$applyTo = (function (seq65088){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65088));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (select \"hello\")\n * (select nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (select {:onClick f} \"hello\")\n * (select #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (select :#the-id.klass.other-klass \"hello\")\n * (select :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.select = (function com$fulcrologic$fulcro$dom$select(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65713 = arguments.length;\nvar i__4731__auto___65714 = (0);\nwhile(true){\nif((i__4731__auto___65714 < len__4730__auto___65713)){\nargs__4736__auto__.push((arguments[i__4731__auto___65714]));\n\nvar G__65715 = (i__4731__auto___65714 + (1));\ni__4731__auto___65714 = G__65715;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.select.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.select.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65092 = conformed_args__63365__auto__;\nvar map__65092__$1 = (((((!((map__65092 == null))))?(((((map__65092.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65092.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65092):map__65092);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65092__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65092__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65092__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"select\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.select.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.select.cljs$lang$applyTo = (function (seq65091){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65091));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (polygon \"hello\")\n * (polygon nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (polygon {:onClick f} \"hello\")\n * (polygon #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (polygon :#the-id.klass.other-klass \"hello\")\n * (polygon :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.polygon = (function com$fulcrologic$fulcro$dom$polygon(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65716 = arguments.length;\nvar i__4731__auto___65717 = (0);\nwhile(true){\nif((i__4731__auto___65717 < len__4730__auto___65716)){\nargs__4736__auto__.push((arguments[i__4731__auto___65717]));\n\nvar G__65718 = (i__4731__auto___65717 + (1));\ni__4731__auto___65717 = G__65718;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.polygon.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.polygon.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65095 = conformed_args__63365__auto__;\nvar map__65095__$1 = (((((!((map__65095 == null))))?(((((map__65095.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65095.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65095):map__65095);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65095__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65095__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65095__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"polygon\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.polygon.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.polygon.cljs$lang$applyTo = (function (seq65094){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65094));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (pattern \"hello\")\n * (pattern nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (pattern {:onClick f} \"hello\")\n * (pattern #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (pattern :#the-id.klass.other-klass \"hello\")\n * (pattern :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.pattern = (function com$fulcrologic$fulcro$dom$pattern(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65719 = arguments.length;\nvar i__4731__auto___65720 = (0);\nwhile(true){\nif((i__4731__auto___65720 < len__4730__auto___65719)){\nargs__4736__auto__.push((arguments[i__4731__auto___65720]));\n\nvar G__65721 = (i__4731__auto___65720 + (1));\ni__4731__auto___65720 = G__65721;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.pattern.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.pattern.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65098 = conformed_args__63365__auto__;\nvar map__65098__$1 = (((((!((map__65098 == null))))?(((((map__65098.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65098.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65098):map__65098);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65098__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65098__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65098__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"pattern\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.pattern.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.pattern.cljs$lang$applyTo = (function (seq65097){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65097));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (html \"hello\")\n * (html nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (html {:onClick f} \"hello\")\n * (html #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (html :#the-id.klass.other-klass \"hello\")\n * (html :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.html = (function com$fulcrologic$fulcro$dom$html(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65722 = arguments.length;\nvar i__4731__auto___65723 = (0);\nwhile(true){\nif((i__4731__auto___65723 < len__4730__auto___65722)){\nargs__4736__auto__.push((arguments[i__4731__auto___65723]));\n\nvar G__65724 = (i__4731__auto___65723 + (1));\ni__4731__auto___65723 = G__65724;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.html.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.html.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65101 = conformed_args__63365__auto__;\nvar map__65101__$1 = (((((!((map__65101 == null))))?(((((map__65101.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65101.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65101):map__65101);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65101__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65101__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65101__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"html\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.html.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.html.cljs$lang$applyTo = (function (seq65100){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65100));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (foreignObject \"hello\")\n * (foreignObject nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (foreignObject {:onClick f} \"hello\")\n * (foreignObject #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (foreignObject :#the-id.klass.other-klass \"hello\")\n * (foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.foreignObject = (function com$fulcrologic$fulcro$dom$foreignObject(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65725 = arguments.length;\nvar i__4731__auto___65726 = (0);\nwhile(true){\nif((i__4731__auto___65726 < len__4730__auto___65725)){\nargs__4736__auto__.push((arguments[i__4731__auto___65726]));\n\nvar G__65727 = (i__4731__auto___65726 + (1));\ni__4731__auto___65726 = G__65727;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.foreignObject.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.foreignObject.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65104 = conformed_args__63365__auto__;\nvar map__65104__$1 = (((((!((map__65104 == null))))?(((((map__65104.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65104.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65104):map__65104);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65104__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65104__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65104__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"foreignObject\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.foreignObject.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.foreignObject.cljs$lang$applyTo = (function (seq65103){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65103));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (thead \"hello\")\n * (thead nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (thead {:onClick f} \"hello\")\n * (thead #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (thead :#the-id.klass.other-klass \"hello\")\n * (thead :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.thead = (function com$fulcrologic$fulcro$dom$thead(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65728 = arguments.length;\nvar i__4731__auto___65729 = (0);\nwhile(true){\nif((i__4731__auto___65729 < len__4730__auto___65728)){\nargs__4736__auto__.push((arguments[i__4731__auto___65729]));\n\nvar G__65730 = (i__4731__auto___65729 + (1));\ni__4731__auto___65729 = G__65730;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.thead.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.thead.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65107 = conformed_args__63365__auto__;\nvar map__65107__$1 = (((((!((map__65107 == null))))?(((((map__65107.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65107.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65107):map__65107);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65107__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65107__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65107__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"thead\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.thead.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.thead.cljs$lang$applyTo = (function (seq65106){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65106));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (path \"hello\")\n * (path nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (path {:onClick f} \"hello\")\n * (path #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (path :#the-id.klass.other-klass \"hello\")\n * (path :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.path = (function com$fulcrologic$fulcro$dom$path(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65731 = arguments.length;\nvar i__4731__auto___65732 = (0);\nwhile(true){\nif((i__4731__auto___65732 < len__4730__auto___65731)){\nargs__4736__auto__.push((arguments[i__4731__auto___65732]));\n\nvar G__65733 = (i__4731__auto___65732 + (1));\ni__4731__auto___65732 = G__65733;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.path.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65110 = conformed_args__63365__auto__;\nvar map__65110__$1 = (((((!((map__65110 == null))))?(((((map__65110.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65110.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65110):map__65110);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65110__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65110__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65110__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"path\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.path.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.path.cljs$lang$applyTo = (function (seq65109){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65109));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (del \"hello\")\n * (del nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (del {:onClick f} \"hello\")\n * (del #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (del :#the-id.klass.other-klass \"hello\")\n * (del :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.del = (function com$fulcrologic$fulcro$dom$del(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65734 = arguments.length;\nvar i__4731__auto___65735 = (0);\nwhile(true){\nif((i__4731__auto___65735 < len__4730__auto___65734)){\nargs__4736__auto__.push((arguments[i__4731__auto___65735]));\n\nvar G__65736 = (i__4731__auto___65735 + (1));\ni__4731__auto___65735 = G__65736;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.del.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.del.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65113 = conformed_args__63365__auto__;\nvar map__65113__$1 = (((((!((map__65113 == null))))?(((((map__65113.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65113.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65113):map__65113);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65113__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65113__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65113__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"del\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.del.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.del.cljs$lang$applyTo = (function (seq65112){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65112));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (altGlyph \"hello\")\n * (altGlyph nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (altGlyph {:onClick f} \"hello\")\n * (altGlyph #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (altGlyph :#the-id.klass.other-klass \"hello\")\n * (altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.altGlyph = (function com$fulcrologic$fulcro$dom$altGlyph(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65737 = arguments.length;\nvar i__4731__auto___65738 = (0);\nwhile(true){\nif((i__4731__auto___65738 < len__4730__auto___65737)){\nargs__4736__auto__.push((arguments[i__4731__auto___65738]));\n\nvar G__65739 = (i__4731__auto___65738 + (1));\ni__4731__auto___65738 = G__65739;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.altGlyph.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyph.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65116 = conformed_args__63365__auto__;\nvar map__65116__$1 = (((((!((map__65116 == null))))?(((((map__65116.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65116.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65116):map__65116);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65116__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65116__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65116__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"altGlyph\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyph.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.altGlyph.cljs$lang$applyTo = (function (seq65115){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65115));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (fieldset \"hello\")\n * (fieldset nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (fieldset {:onClick f} \"hello\")\n * (fieldset #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (fieldset :#the-id.klass.other-klass \"hello\")\n * (fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.fieldset = (function com$fulcrologic$fulcro$dom$fieldset(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65740 = arguments.length;\nvar i__4731__auto___65741 = (0);\nwhile(true){\nif((i__4731__auto___65741 < len__4730__auto___65740)){\nargs__4736__auto__.push((arguments[i__4731__auto___65741]));\n\nvar G__65742 = (i__4731__auto___65741 + (1));\ni__4731__auto___65741 = G__65742;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65119 = conformed_args__63365__auto__;\nvar map__65119__$1 = (((((!((map__65119 == null))))?(((((map__65119.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65119.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65119):map__65119);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65119__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65119__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65119__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"fieldset\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.fieldset.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.fieldset.cljs$lang$applyTo = (function (seq65118){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65118));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (aside \"hello\")\n * (aside nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (aside {:onClick f} \"hello\")\n * (aside #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (aside :#the-id.klass.other-klass \"hello\")\n * (aside :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.aside = (function com$fulcrologic$fulcro$dom$aside(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65743 = arguments.length;\nvar i__4731__auto___65744 = (0);\nwhile(true){\nif((i__4731__auto___65744 < len__4730__auto___65743)){\nargs__4736__auto__.push((arguments[i__4731__auto___65744]));\n\nvar G__65745 = (i__4731__auto___65744 + (1));\ni__4731__auto___65744 = G__65745;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.aside.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.aside.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65122 = conformed_args__63365__auto__;\nvar map__65122__$1 = (((((!((map__65122 == null))))?(((((map__65122.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65122.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65122):map__65122);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65122__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65122__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65122__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"aside\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.aside.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.aside.cljs$lang$applyTo = (function (seq65121){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65121));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feBlend \"hello\")\n * (feBlend nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feBlend {:onClick f} \"hello\")\n * (feBlend #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feBlend :#the-id.klass.other-klass \"hello\")\n * (feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feBlend = (function com$fulcrologic$fulcro$dom$feBlend(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65746 = arguments.length;\nvar i__4731__auto___65747 = (0);\nwhile(true){\nif((i__4731__auto___65747 < len__4730__auto___65746)){\nargs__4736__auto__.push((arguments[i__4731__auto___65747]));\n\nvar G__65748 = (i__4731__auto___65747 + (1));\ni__4731__auto___65747 = G__65748;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feBlend.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feBlend.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65125 = conformed_args__63365__auto__;\nvar map__65125__$1 = (((((!((map__65125 == null))))?(((((map__65125.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65125.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65125):map__65125);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65125__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65125__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65125__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feBlend\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feBlend.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feBlend.cljs$lang$applyTo = (function (seq65124){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65124));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (figure \"hello\")\n * (figure nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (figure {:onClick f} \"hello\")\n * (figure #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (figure :#the-id.klass.other-klass \"hello\")\n * (figure :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.figure = (function com$fulcrologic$fulcro$dom$figure(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65749 = arguments.length;\nvar i__4731__auto___65750 = (0);\nwhile(true){\nif((i__4731__auto___65750 < len__4730__auto___65749)){\nargs__4736__auto__.push((arguments[i__4731__auto___65750]));\n\nvar G__65751 = (i__4731__auto___65750 + (1));\ni__4731__auto___65750 = G__65751;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.figure.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.figure.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65128 = conformed_args__63365__auto__;\nvar map__65128__$1 = (((((!((map__65128 == null))))?(((((map__65128.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65128.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65128):map__65128);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65128__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65128__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65128__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"figure\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.figure.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.figure.cljs$lang$applyTo = (function (seq65127){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65127));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (textPath \"hello\")\n * (textPath nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (textPath {:onClick f} \"hello\")\n * (textPath #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (textPath :#the-id.klass.other-klass \"hello\")\n * (textPath :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.textPath = (function com$fulcrologic$fulcro$dom$textPath(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65752 = arguments.length;\nvar i__4731__auto___65753 = (0);\nwhile(true){\nif((i__4731__auto___65753 < len__4730__auto___65752)){\nargs__4736__auto__.push((arguments[i__4731__auto___65753]));\n\nvar G__65754 = (i__4731__auto___65753 + (1));\ni__4731__auto___65753 = G__65754;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.textPath.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.textPath.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65131 = conformed_args__63365__auto__;\nvar map__65131__$1 = (((((!((map__65131 == null))))?(((((map__65131.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65131.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65131):map__65131);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65131__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65131__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65131__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"textPath\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.textPath.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.textPath.cljs$lang$applyTo = (function (seq65130){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65130));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (figcaption \"hello\")\n * (figcaption nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (figcaption {:onClick f} \"hello\")\n * (figcaption #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (figcaption :#the-id.klass.other-klass \"hello\")\n * (figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.figcaption = (function com$fulcrologic$fulcro$dom$figcaption(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65755 = arguments.length;\nvar i__4731__auto___65756 = (0);\nwhile(true){\nif((i__4731__auto___65756 < len__4730__auto___65755)){\nargs__4736__auto__.push((arguments[i__4731__auto___65756]));\n\nvar G__65757 = (i__4731__auto___65756 + (1));\ni__4731__auto___65756 = G__65757;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65134 = conformed_args__63365__auto__;\nvar map__65134__$1 = (((((!((map__65134 == null))))?(((((map__65134.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65134.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65134):map__65134);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65134__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65134__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65134__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"figcaption\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.figcaption.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.figcaption.cljs$lang$applyTo = (function (seq65133){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65133));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (mask \"hello\")\n * (mask nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (mask {:onClick f} \"hello\")\n * (mask #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (mask :#the-id.klass.other-klass \"hello\")\n * (mask :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.mask = (function com$fulcrologic$fulcro$dom$mask(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65758 = arguments.length;\nvar i__4731__auto___65759 = (0);\nwhile(true){\nif((i__4731__auto___65759 < len__4730__auto___65758)){\nargs__4736__auto__.push((arguments[i__4731__auto___65759]));\n\nvar G__65760 = (i__4731__auto___65759 + (1));\ni__4731__auto___65759 = G__65760;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.mask.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mask.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65137 = conformed_args__63365__auto__;\nvar map__65137__$1 = (((((!((map__65137 == null))))?(((((map__65137.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65137.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65137):map__65137);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65137__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65137__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65137__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"mask\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mask.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.mask.cljs$lang$applyTo = (function (seq65136){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65136));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (q \"hello\")\n * (q nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (q {:onClick f} \"hello\")\n * (q #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (q :#the-id.klass.other-klass \"hello\")\n * (q :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.q = (function com$fulcrologic$fulcro$dom$q(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65761 = arguments.length;\nvar i__4731__auto___65762 = (0);\nwhile(true){\nif((i__4731__auto___65762 < len__4730__auto___65761)){\nargs__4736__auto__.push((arguments[i__4731__auto___65762]));\n\nvar G__65763 = (i__4731__auto___65762 + (1));\ni__4731__auto___65762 = G__65763;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.q.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.q.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65140 = conformed_args__63365__auto__;\nvar map__65140__$1 = (((((!((map__65140 == null))))?(((((map__65140.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65140.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65140):map__65140);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65140__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65140__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65140__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"q\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.q.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.q.cljs$lang$applyTo = (function (seq65139){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65139));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (bdi \"hello\")\n * (bdi nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (bdi {:onClick f} \"hello\")\n * (bdi #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (bdi :#the-id.klass.other-klass \"hello\")\n * (bdi :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.bdi = (function com$fulcrologic$fulcro$dom$bdi(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65764 = arguments.length;\nvar i__4731__auto___65765 = (0);\nwhile(true){\nif((i__4731__auto___65765 < len__4730__auto___65764)){\nargs__4736__auto__.push((arguments[i__4731__auto___65765]));\n\nvar G__65766 = (i__4731__auto___65765 + (1));\ni__4731__auto___65765 = G__65766;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.bdi.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.bdi.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65143 = conformed_args__63365__auto__;\nvar map__65143__$1 = (((((!((map__65143 == null))))?(((((map__65143.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65143.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65143):map__65143);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65143__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65143__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65143__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"bdi\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.bdi.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.bdi.cljs$lang$applyTo = (function (seq65142){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65142));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feDistantLight \"hello\")\n * (feDistantLight nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feDistantLight {:onClick f} \"hello\")\n * (feDistantLight #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feDistantLight :#the-id.klass.other-klass \"hello\")\n * (feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feDistantLight = (function com$fulcrologic$fulcro$dom$feDistantLight(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65767 = arguments.length;\nvar i__4731__auto___65768 = (0);\nwhile(true){\nif((i__4731__auto___65768 < len__4730__auto___65767)){\nargs__4736__auto__.push((arguments[i__4731__auto___65768]));\n\nvar G__65769 = (i__4731__auto___65768 + (1));\ni__4731__auto___65768 = G__65769;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feDistantLight.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDistantLight.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65146 = conformed_args__63365__auto__;\nvar map__65146__$1 = (((((!((map__65146 == null))))?(((((map__65146.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65146.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65146):map__65146);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65146__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65146__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65146__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feDistantLight\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDistantLight.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feDistantLight.cljs$lang$applyTo = (function (seq65145){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65145));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (video \"hello\")\n * (video nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (video {:onClick f} \"hello\")\n * (video #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (video :#the-id.klass.other-klass \"hello\")\n * (video :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.video = (function com$fulcrologic$fulcro$dom$video(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65770 = arguments.length;\nvar i__4731__auto___65771 = (0);\nwhile(true){\nif((i__4731__auto___65771 < len__4730__auto___65770)){\nargs__4736__auto__.push((arguments[i__4731__auto___65771]));\n\nvar G__65772 = (i__4731__auto___65771 + (1));\ni__4731__auto___65771 = G__65772;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.video.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.video.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65149 = conformed_args__63365__auto__;\nvar map__65149__$1 = (((((!((map__65149 == null))))?(((((map__65149.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65149.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65149):map__65149);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65149__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65149__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65149__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"video\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.video.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.video.cljs$lang$applyTo = (function (seq65148){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65148));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (address \"hello\")\n * (address nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (address {:onClick f} \"hello\")\n * (address #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (address :#the-id.klass.other-klass \"hello\")\n * (address :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.address = (function com$fulcrologic$fulcro$dom$address(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65773 = arguments.length;\nvar i__4731__auto___65774 = (0);\nwhile(true){\nif((i__4731__auto___65774 < len__4730__auto___65773)){\nargs__4736__auto__.push((arguments[i__4731__auto___65774]));\n\nvar G__65775 = (i__4731__auto___65774 + (1));\ni__4731__auto___65774 = G__65775;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.address.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.address.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65152 = conformed_args__63365__auto__;\nvar map__65152__$1 = (((((!((map__65152 == null))))?(((((map__65152.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65152.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65152):map__65152);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65152__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65152__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65152__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"address\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.address.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.address.cljs$lang$applyTo = (function (seq65151){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65151));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (caption \"hello\")\n * (caption nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (caption {:onClick f} \"hello\")\n * (caption #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (caption :#the-id.klass.other-klass \"hello\")\n * (caption :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.caption = (function com$fulcrologic$fulcro$dom$caption(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65776 = arguments.length;\nvar i__4731__auto___65777 = (0);\nwhile(true){\nif((i__4731__auto___65777 < len__4730__auto___65776)){\nargs__4736__auto__.push((arguments[i__4731__auto___65777]));\n\nvar G__65778 = (i__4731__auto___65777 + (1));\ni__4731__auto___65777 = G__65778;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.caption.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.caption.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65155 = conformed_args__63365__auto__;\nvar map__65155__$1 = (((((!((map__65155 == null))))?(((((map__65155.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65155.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65155):map__65155);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65155__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65155__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65155__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"caption\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.caption.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.caption.cljs$lang$applyTo = (function (seq65154){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65154));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dd \"hello\")\n * (dd nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dd {:onClick f} \"hello\")\n * (dd #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dd :#the-id.klass.other-klass \"hello\")\n * (dd :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.dd = (function com$fulcrologic$fulcro$dom$dd(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65779 = arguments.length;\nvar i__4731__auto___65780 = (0);\nwhile(true){\nif((i__4731__auto___65780 < len__4730__auto___65779)){\nargs__4736__auto__.push((arguments[i__4731__auto___65780]));\n\nvar G__65781 = (i__4731__auto___65780 + (1));\ni__4731__auto___65780 = G__65781;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dd.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dd.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65158 = conformed_args__63365__auto__;\nvar map__65158__$1 = (((((!((map__65158 == null))))?(((((map__65158.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65158.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65158):map__65158);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65158__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65158__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65158__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dd\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dd.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dd.cljs$lang$applyTo = (function (seq65157){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65157));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (rp \"hello\")\n * (rp nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (rp {:onClick f} \"hello\")\n * (rp #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (rp :#the-id.klass.other-klass \"hello\")\n * (rp :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.rp = (function com$fulcrologic$fulcro$dom$rp(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65782 = arguments.length;\nvar i__4731__auto___65783 = (0);\nwhile(true){\nif((i__4731__auto___65783 < len__4730__auto___65782)){\nargs__4736__auto__.push((arguments[i__4731__auto___65783]));\n\nvar G__65784 = (i__4731__auto___65783 + (1));\ni__4731__auto___65783 = G__65784;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.rp.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rp.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65161 = conformed_args__63365__auto__;\nvar map__65161__$1 = (((((!((map__65161 == null))))?(((((map__65161.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65161.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65161):map__65161);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65161__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65161__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65161__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"rp\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rp.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.rp.cljs$lang$applyTo = (function (seq65160){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65160));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (hr \"hello\")\n * (hr nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (hr {:onClick f} \"hello\")\n * (hr #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (hr :#the-id.klass.other-klass \"hello\")\n * (hr :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.hr = (function com$fulcrologic$fulcro$dom$hr(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65785 = arguments.length;\nvar i__4731__auto___65786 = (0);\nwhile(true){\nif((i__4731__auto___65786 < len__4730__auto___65785)){\nargs__4736__auto__.push((arguments[i__4731__auto___65786]));\n\nvar G__65787 = (i__4731__auto___65786 + (1));\ni__4731__auto___65786 = G__65787;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.hr.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hr.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65164 = conformed_args__63365__auto__;\nvar map__65164__$1 = (((((!((map__65164 == null))))?(((((map__65164.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65164.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65164):map__65164);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65164__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65164__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65164__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"hr\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hr.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.hr.cljs$lang$applyTo = (function (seq65163){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65163));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meta \"hello\")\n * (meta nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meta {:onClick f} \"hello\")\n * (meta #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meta :#the-id.klass.other-klass \"hello\")\n * (meta :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.meta = (function com$fulcrologic$fulcro$dom$meta(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65788 = arguments.length;\nvar i__4731__auto___65789 = (0);\nwhile(true){\nif((i__4731__auto___65789 < len__4730__auto___65788)){\nargs__4736__auto__.push((arguments[i__4731__auto___65789]));\n\nvar G__65790 = (i__4731__auto___65789 + (1));\ni__4731__auto___65789 = G__65790;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meta.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meta.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65167 = conformed_args__63365__auto__;\nvar map__65167__$1 = (((((!((map__65167 == null))))?(((((map__65167.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65167.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65167):map__65167);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65167__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65167__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65167__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meta\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meta.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meta.cljs$lang$applyTo = (function (seq65166){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65166));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tbody \"hello\")\n * (tbody nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tbody {:onClick f} \"hello\")\n * (tbody #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tbody :#the-id.klass.other-klass \"hello\")\n * (tbody :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.tbody = (function com$fulcrologic$fulcro$dom$tbody(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65791 = arguments.length;\nvar i__4731__auto___65792 = (0);\nwhile(true){\nif((i__4731__auto___65792 < len__4730__auto___65791)){\nargs__4736__auto__.push((arguments[i__4731__auto___65792]));\n\nvar G__65793 = (i__4731__auto___65792 + (1));\ni__4731__auto___65792 = G__65793;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tbody.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tbody.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65170 = conformed_args__63365__auto__;\nvar map__65170__$1 = (((((!((map__65170 == null))))?(((((map__65170.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65170.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65170):map__65170);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65170__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65170__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65170__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tbody\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tbody.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tbody.cljs$lang$applyTo = (function (seq65169){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65169));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (desc \"hello\")\n * (desc nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (desc {:onClick f} \"hello\")\n * (desc #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (desc :#the-id.klass.other-klass \"hello\")\n * (desc :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.desc = (function com$fulcrologic$fulcro$dom$desc(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65794 = arguments.length;\nvar i__4731__auto___65795 = (0);\nwhile(true){\nif((i__4731__auto___65795 < len__4730__auto___65794)){\nargs__4736__auto__.push((arguments[i__4731__auto___65795]));\n\nvar G__65796 = (i__4731__auto___65795 + (1));\ni__4731__auto___65795 = G__65796;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.desc.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.desc.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65173 = conformed_args__63365__auto__;\nvar map__65173__$1 = (((((!((map__65173 == null))))?(((((map__65173.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65173.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65173):map__65173);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65173__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65173__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65173__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"desc\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.desc.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.desc.cljs$lang$applyTo = (function (seq65172){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65172));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (table \"hello\")\n * (table nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (table {:onClick f} \"hello\")\n * (table #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (table :#the-id.klass.other-klass \"hello\")\n * (table :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.table = (function com$fulcrologic$fulcro$dom$table(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65797 = arguments.length;\nvar i__4731__auto___65798 = (0);\nwhile(true){\nif((i__4731__auto___65798 < len__4730__auto___65797)){\nargs__4736__auto__.push((arguments[i__4731__auto___65798]));\n\nvar G__65799 = (i__4731__auto___65798 + (1));\ni__4731__auto___65798 = G__65799;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.table.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.table.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65176 = conformed_args__63365__auto__;\nvar map__65176__$1 = (((((!((map__65176 == null))))?(((((map__65176.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65176.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65176):map__65176);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65176__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65176__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65176__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"table\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.table.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.table.cljs$lang$applyTo = (function (seq65175){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65175));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (pre \"hello\")\n * (pre nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (pre {:onClick f} \"hello\")\n * (pre #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (pre :#the-id.klass.other-klass \"hello\")\n * (pre :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.pre = (function com$fulcrologic$fulcro$dom$pre(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65800 = arguments.length;\nvar i__4731__auto___65801 = (0);\nwhile(true){\nif((i__4731__auto___65801 < len__4730__auto___65800)){\nargs__4736__auto__.push((arguments[i__4731__auto___65801]));\n\nvar G__65802 = (i__4731__auto___65801 + (1));\ni__4731__auto___65801 = G__65802;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.pre.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.pre.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65179 = conformed_args__63365__auto__;\nvar map__65179__$1 = (((((!((map__65179 == null))))?(((((map__65179.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65179.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65179):map__65179);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65179__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65179__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65179__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"pre\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.pre.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.pre.cljs$lang$applyTo = (function (seq65178){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65178));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ul \"hello\")\n * (ul nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ul {:onClick f} \"hello\")\n * (ul #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ul :#the-id.klass.other-klass \"hello\")\n * (ul :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.ul = (function com$fulcrologic$fulcro$dom$ul(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65803 = arguments.length;\nvar i__4731__auto___65804 = (0);\nwhile(true){\nif((i__4731__auto___65804 < len__4730__auto___65803)){\nargs__4736__auto__.push((arguments[i__4731__auto___65804]));\n\nvar G__65805 = (i__4731__auto___65804 + (1));\ni__4731__auto___65804 = G__65805;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ul.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ul.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65182 = conformed_args__63365__auto__;\nvar map__65182__$1 = (((((!((map__65182 == null))))?(((((map__65182.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65182.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65182):map__65182);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65182__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65182__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65182__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ul\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ul.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ul.cljs$lang$applyTo = (function (seq65181){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65181));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feConvolveMatrix \"hello\")\n * (feConvolveMatrix nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feConvolveMatrix {:onClick f} \"hello\")\n * (feConvolveMatrix #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n * (feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feConvolveMatrix = (function com$fulcrologic$fulcro$dom$feConvolveMatrix(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65806 = arguments.length;\nvar i__4731__auto___65807 = (0);\nwhile(true){\nif((i__4731__auto___65807 < len__4730__auto___65806)){\nargs__4736__auto__.push((arguments[i__4731__auto___65807]));\n\nvar G__65808 = (i__4731__auto___65807 + (1));\ni__4731__auto___65807 = G__65808;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feConvolveMatrix.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feConvolveMatrix.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65185 = conformed_args__63365__auto__;\nvar map__65185__$1 = (((((!((map__65185 == null))))?(((((map__65185.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65185.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65185):map__65185);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65185__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65185__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65185__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feConvolveMatrix\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feConvolveMatrix.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feConvolveMatrix.cljs$lang$applyTo = (function (seq65184){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65184));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (sup \"hello\")\n * (sup nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (sup {:onClick f} \"hello\")\n * (sup #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (sup :#the-id.klass.other-klass \"hello\")\n * (sup :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.sup = (function com$fulcrologic$fulcro$dom$sup(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65809 = arguments.length;\nvar i__4731__auto___65810 = (0);\nwhile(true){\nif((i__4731__auto___65810 < len__4730__auto___65809)){\nargs__4736__auto__.push((arguments[i__4731__auto___65810]));\n\nvar G__65811 = (i__4731__auto___65810 + (1));\ni__4731__auto___65810 = G__65811;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.sup.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.sup.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65188 = conformed_args__63365__auto__;\nvar map__65188__$1 = (((((!((map__65188 == null))))?(((((map__65188.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65188.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65188):map__65188);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65188__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65188__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65188__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"sup\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.sup.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.sup.cljs$lang$applyTo = (function (seq65187){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65187));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dfn \"hello\")\n * (dfn nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dfn {:onClick f} \"hello\")\n * (dfn #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dfn :#the-id.klass.other-klass \"hello\")\n * (dfn :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.dfn = (function com$fulcrologic$fulcro$dom$dfn(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65812 = arguments.length;\nvar i__4731__auto___65813 = (0);\nwhile(true){\nif((i__4731__auto___65813 < len__4730__auto___65812)){\nargs__4736__auto__.push((arguments[i__4731__auto___65813]));\n\nvar G__65814 = (i__4731__auto___65813 + (1));\ni__4731__auto___65813 = G__65814;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dfn.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dfn.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65191 = conformed_args__63365__auto__;\nvar map__65191__$1 = (((((!((map__65191 == null))))?(((((map__65191.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65191.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65191):map__65191);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65191__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65191__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65191__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dfn\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dfn.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dfn.cljs$lang$applyTo = (function (seq65190){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65190));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (sub \"hello\")\n * (sub nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (sub {:onClick f} \"hello\")\n * (sub #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (sub :#the-id.klass.other-klass \"hello\")\n * (sub :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.sub = (function com$fulcrologic$fulcro$dom$sub(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65815 = arguments.length;\nvar i__4731__auto___65816 = (0);\nwhile(true){\nif((i__4731__auto___65816 < len__4730__auto___65815)){\nargs__4736__auto__.push((arguments[i__4731__auto___65816]));\n\nvar G__65817 = (i__4731__auto___65816 + (1));\ni__4731__auto___65816 = G__65817;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.sub.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65194 = conformed_args__63365__auto__;\nvar map__65194__$1 = (((((!((map__65194 == null))))?(((((map__65194.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65194.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65194):map__65194);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65194__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65194__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65194__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"sub\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.sub.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.sub.cljs$lang$applyTo = (function (seq65193){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65193));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (mark \"hello\")\n * (mark nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (mark {:onClick f} \"hello\")\n * (mark #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (mark :#the-id.klass.other-klass \"hello\")\n * (mark :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.mark = (function com$fulcrologic$fulcro$dom$mark(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65818 = arguments.length;\nvar i__4731__auto___65819 = (0);\nwhile(true){\nif((i__4731__auto___65819 < len__4730__auto___65818)){\nargs__4736__auto__.push((arguments[i__4731__auto___65819]));\n\nvar G__65820 = (i__4731__auto___65819 + (1));\ni__4731__auto___65819 = G__65820;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.mark.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mark.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65197 = conformed_args__63365__auto__;\nvar map__65197__$1 = (((((!((map__65197 == null))))?(((((map__65197.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65197.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65197):map__65197);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65197__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65197__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65197__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"mark\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mark.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.mark.cljs$lang$applyTo = (function (seq65196){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65196));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feDisplacementMap \"hello\")\n * (feDisplacementMap nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feDisplacementMap {:onClick f} \"hello\")\n * (feDisplacementMap #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feDisplacementMap :#the-id.klass.other-klass \"hello\")\n * (feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feDisplacementMap = (function com$fulcrologic$fulcro$dom$feDisplacementMap(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65821 = arguments.length;\nvar i__4731__auto___65822 = (0);\nwhile(true){\nif((i__4731__auto___65822 < len__4730__auto___65821)){\nargs__4736__auto__.push((arguments[i__4731__auto___65822]));\n\nvar G__65823 = (i__4731__auto___65822 + (1));\ni__4731__auto___65822 = G__65823;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feDisplacementMap.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDisplacementMap.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65200 = conformed_args__63365__auto__;\nvar map__65200__$1 = (((((!((map__65200 == null))))?(((((map__65200.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65200.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65200):map__65200);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65200__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65200__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65200__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feDisplacementMap\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDisplacementMap.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feDisplacementMap.cljs$lang$applyTo = (function (seq65199){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65199));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (unknown \"hello\")\n * (unknown nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (unknown {:onClick f} \"hello\")\n * (unknown #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (unknown :#the-id.klass.other-klass \"hello\")\n * (unknown :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.unknown = (function com$fulcrologic$fulcro$dom$unknown(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65824 = arguments.length;\nvar i__4731__auto___65825 = (0);\nwhile(true){\nif((i__4731__auto___65825 < len__4730__auto___65824)){\nargs__4736__auto__.push((arguments[i__4731__auto___65825]));\n\nvar G__65826 = (i__4731__auto___65825 + (1));\ni__4731__auto___65825 = G__65826;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.unknown.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.unknown.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65203 = conformed_args__63365__auto__;\nvar map__65203__$1 = (((((!((map__65203 == null))))?(((((map__65203.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65203.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65203):map__65203);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65203__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65203__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65203__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"unknown\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.unknown.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.unknown.cljs$lang$applyTo = (function (seq65202){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65202));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (script \"hello\")\n * (script nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (script {:onClick f} \"hello\")\n * (script #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (script :#the-id.klass.other-klass \"hello\")\n * (script :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.script = (function com$fulcrologic$fulcro$dom$script(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65827 = arguments.length;\nvar i__4731__auto___65828 = (0);\nwhile(true){\nif((i__4731__auto___65828 < len__4730__auto___65827)){\nargs__4736__auto__.push((arguments[i__4731__auto___65828]));\n\nvar G__65829 = (i__4731__auto___65828 + (1));\ni__4731__auto___65828 = G__65829;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.script.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.script.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65206 = conformed_args__63365__auto__;\nvar map__65206__$1 = (((((!((map__65206 == null))))?(((((map__65206.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65206.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65206):map__65206);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65206__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65206__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65206__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"script\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.script.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.script.cljs$lang$applyTo = (function (seq65205){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65205));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feTurbulence \"hello\")\n * (feTurbulence nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feTurbulence {:onClick f} \"hello\")\n * (feTurbulence #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feTurbulence :#the-id.klass.other-klass \"hello\")\n * (feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feTurbulence = (function com$fulcrologic$fulcro$dom$feTurbulence(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65830 = arguments.length;\nvar i__4731__auto___65831 = (0);\nwhile(true){\nif((i__4731__auto___65831 < len__4730__auto___65830)){\nargs__4736__auto__.push((arguments[i__4731__auto___65831]));\n\nvar G__65832 = (i__4731__auto___65831 + (1));\ni__4731__auto___65831 = G__65832;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feTurbulence.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feTurbulence.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65209 = conformed_args__63365__auto__;\nvar map__65209__$1 = (((((!((map__65209 == null))))?(((((map__65209.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65209.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65209):map__65209);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65209__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65209__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65209__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feTurbulence\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feTurbulence.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feTurbulence.cljs$lang$applyTo = (function (seq65208){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65208));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (big \"hello\")\n * (big nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (big {:onClick f} \"hello\")\n * (big #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (big :#the-id.klass.other-klass \"hello\")\n * (big :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.big = (function com$fulcrologic$fulcro$dom$big(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65833 = arguments.length;\nvar i__4731__auto___65834 = (0);\nwhile(true){\nif((i__4731__auto___65834 < len__4730__auto___65833)){\nargs__4736__auto__.push((arguments[i__4731__auto___65834]));\n\nvar G__65835 = (i__4731__auto___65834 + (1));\ni__4731__auto___65834 = G__65835;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.big.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.big.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65212 = conformed_args__63365__auto__;\nvar map__65212__$1 = (((((!((map__65212 == null))))?(((((map__65212.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65212.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65212):map__65212);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65212__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65212__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65212__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"big\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.big.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.big.cljs$lang$applyTo = (function (seq65211){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65211));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (button \"hello\")\n * (button nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (button {:onClick f} \"hello\")\n * (button #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (button :#the-id.klass.other-klass \"hello\")\n * (button :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.button = (function com$fulcrologic$fulcro$dom$button(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65836 = arguments.length;\nvar i__4731__auto___65837 = (0);\nwhile(true){\nif((i__4731__auto___65837 < len__4730__auto___65836)){\nargs__4736__auto__.push((arguments[i__4731__auto___65837]));\n\nvar G__65838 = (i__4731__auto___65837 + (1));\ni__4731__auto___65837 = G__65838;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.button.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.button.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65215 = conformed_args__63365__auto__;\nvar map__65215__$1 = (((((!((map__65215 == null))))?(((((map__65215.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65215.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65215):map__65215);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65215__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65215__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65215__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"button\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.button.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.button.cljs$lang$applyTo = (function (seq65214){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65214));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face-uri \"hello\")\n * (font-face-uri nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face-uri {:onClick f} \"hello\")\n * (font-face-uri #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face-uri :#the-id.klass.other-klass \"hello\")\n * (font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.font_face_uri = (function com$fulcrologic$fulcro$dom$font_face_uri(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65839 = arguments.length;\nvar i__4731__auto___65840 = (0);\nwhile(true){\nif((i__4731__auto___65840 < len__4730__auto___65839)){\nargs__4736__auto__.push((arguments[i__4731__auto___65840]));\n\nvar G__65841 = (i__4731__auto___65840 + (1));\ni__4731__auto___65840 = G__65841;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face_uri.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_uri.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65218 = conformed_args__63365__auto__;\nvar map__65218__$1 = (((((!((map__65218 == null))))?(((((map__65218.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65218.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65218):map__65218);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65218__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65218__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65218__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face-uri\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_uri.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face_uri.cljs$lang$applyTo = (function (seq65217){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65217));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (wbr \"hello\")\n * (wbr nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (wbr {:onClick f} \"hello\")\n * (wbr #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (wbr :#the-id.klass.other-klass \"hello\")\n * (wbr :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.wbr = (function com$fulcrologic$fulcro$dom$wbr(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65842 = arguments.length;\nvar i__4731__auto___65843 = (0);\nwhile(true){\nif((i__4731__auto___65843 < len__4730__auto___65842)){\nargs__4736__auto__.push((arguments[i__4731__auto___65843]));\n\nvar G__65844 = (i__4731__auto___65843 + (1));\ni__4731__auto___65843 = G__65844;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.wbr.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.wbr.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65221 = conformed_args__63365__auto__;\nvar map__65221__$1 = (((((!((map__65221 == null))))?(((((map__65221.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65221.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65221):map__65221);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65221__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65221__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65221__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"wbr\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.wbr.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.wbr.cljs$lang$applyTo = (function (seq65220){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65220));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (symbol \"hello\")\n * (symbol nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (symbol {:onClick f} \"hello\")\n * (symbol #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (symbol :#the-id.klass.other-klass \"hello\")\n * (symbol :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.symbol = (function com$fulcrologic$fulcro$dom$symbol(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65845 = arguments.length;\nvar i__4731__auto___65846 = (0);\nwhile(true){\nif((i__4731__auto___65846 < len__4730__auto___65845)){\nargs__4736__auto__.push((arguments[i__4731__auto___65846]));\n\nvar G__65847 = (i__4731__auto___65846 + (1));\ni__4731__auto___65846 = G__65847;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.symbol.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.symbol.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65224 = conformed_args__63365__auto__;\nvar map__65224__$1 = (((((!((map__65224 == null))))?(((((map__65224.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65224.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65224):map__65224);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65224__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65224__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65224__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"symbol\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.symbol.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.symbol.cljs$lang$applyTo = (function (seq65223){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65223));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (strong \"hello\")\n * (strong nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (strong {:onClick f} \"hello\")\n * (strong #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (strong :#the-id.klass.other-klass \"hello\")\n * (strong :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.strong = (function com$fulcrologic$fulcro$dom$strong(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65848 = arguments.length;\nvar i__4731__auto___65849 = (0);\nwhile(true){\nif((i__4731__auto___65849 < len__4730__auto___65848)){\nargs__4736__auto__.push((arguments[i__4731__auto___65849]));\n\nvar G__65850 = (i__4731__auto___65849 + (1));\ni__4731__auto___65849 = G__65850;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.strong.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.strong.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65227 = conformed_args__63365__auto__;\nvar map__65227__$1 = (((((!((map__65227 == null))))?(((((map__65227.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65227.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65227):map__65227);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65227__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65227__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65227__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"strong\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.strong.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.strong.cljs$lang$applyTo = (function (seq65226){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65226));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (use \"hello\")\n * (use nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (use {:onClick f} \"hello\")\n * (use #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (use :#the-id.klass.other-klass \"hello\")\n * (use :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.use = (function com$fulcrologic$fulcro$dom$use(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65851 = arguments.length;\nvar i__4731__auto___65852 = (0);\nwhile(true){\nif((i__4731__auto___65852 < len__4730__auto___65851)){\nargs__4736__auto__.push((arguments[i__4731__auto___65852]));\n\nvar G__65853 = (i__4731__auto___65852 + (1));\ni__4731__auto___65852 = G__65853;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.use.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.use.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65230 = conformed_args__63365__auto__;\nvar map__65230__$1 = (((((!((map__65230 == null))))?(((((map__65230.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65230.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65230):map__65230);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65230__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65230__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65230__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"use\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.use.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.use.cljs$lang$applyTo = (function (seq65229){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65229));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (solidcolor \"hello\")\n * (solidcolor nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (solidcolor {:onClick f} \"hello\")\n * (solidcolor #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (solidcolor :#the-id.klass.other-klass \"hello\")\n * (solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.solidcolor = (function com$fulcrologic$fulcro$dom$solidcolor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65854 = arguments.length;\nvar i__4731__auto___65855 = (0);\nwhile(true){\nif((i__4731__auto___65855 < len__4730__auto___65854)){\nargs__4736__auto__.push((arguments[i__4731__auto___65855]));\n\nvar G__65856 = (i__4731__auto___65855 + (1));\ni__4731__auto___65855 = G__65856;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.solidcolor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.solidcolor.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65233 = conformed_args__63365__auto__;\nvar map__65233__$1 = (((((!((map__65233 == null))))?(((((map__65233.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65233.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65233):map__65233);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65233__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65233__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65233__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"solidcolor\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.solidcolor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.solidcolor.cljs$lang$applyTo = (function (seq65232){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65232));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (fePointLight \"hello\")\n * (fePointLight nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (fePointLight {:onClick f} \"hello\")\n * (fePointLight #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (fePointLight :#the-id.klass.other-klass \"hello\")\n * (fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.fePointLight = (function com$fulcrologic$fulcro$dom$fePointLight(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65857 = arguments.length;\nvar i__4731__auto___65858 = (0);\nwhile(true){\nif((i__4731__auto___65858 < len__4730__auto___65857)){\nargs__4736__auto__.push((arguments[i__4731__auto___65858]));\n\nvar G__65859 = (i__4731__auto___65858 + (1));\ni__4731__auto___65858 = G__65859;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.fePointLight.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.fePointLight.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65236 = conformed_args__63365__auto__;\nvar map__65236__$1 = (((((!((map__65236 == null))))?(((((map__65236.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65236.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65236):map__65236);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65236__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65236__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65236__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"fePointLight\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.fePointLight.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.fePointLight.cljs$lang$applyTo = (function (seq65235){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65235));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (li \"hello\")\n * (li nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (li {:onClick f} \"hello\")\n * (li #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (li :#the-id.klass.other-klass \"hello\")\n * (li :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.li = (function com$fulcrologic$fulcro$dom$li(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65860 = arguments.length;\nvar i__4731__auto___65861 = (0);\nwhile(true){\nif((i__4731__auto___65861 < len__4730__auto___65860)){\nargs__4736__auto__.push((arguments[i__4731__auto___65861]));\n\nvar G__65862 = (i__4731__auto___65861 + (1));\ni__4731__auto___65861 = G__65862;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.li.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.li.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65239 = conformed_args__63365__auto__;\nvar map__65239__$1 = (((((!((map__65239 == null))))?(((((map__65239.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65239.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65239):map__65239);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65239__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65239__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65239__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"li\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.li.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.li.cljs$lang$applyTo = (function (seq65238){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65238));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dt \"hello\")\n * (dt nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dt {:onClick f} \"hello\")\n * (dt #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dt :#the-id.klass.other-klass \"hello\")\n * (dt :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.dt = (function com$fulcrologic$fulcro$dom$dt(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65863 = arguments.length;\nvar i__4731__auto___65864 = (0);\nwhile(true){\nif((i__4731__auto___65864 < len__4730__auto___65863)){\nargs__4736__auto__.push((arguments[i__4731__auto___65864]));\n\nvar G__65865 = (i__4731__auto___65864 + (1));\ni__4731__auto___65864 = G__65865;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dt.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dt.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65242 = conformed_args__63365__auto__;\nvar map__65242__$1 = (((((!((map__65242 == null))))?(((((map__65242.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65242.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65242):map__65242);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65242__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65242__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65242__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dt\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dt.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dt.cljs$lang$applyTo = (function (seq65241){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65241));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFuncB \"hello\")\n * (feFuncB nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFuncB {:onClick f} \"hello\")\n * (feFuncB #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFuncB :#the-id.klass.other-klass \"hello\")\n * (feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feFuncB = (function com$fulcrologic$fulcro$dom$feFuncB(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65866 = arguments.length;\nvar i__4731__auto___65867 = (0);\nwhile(true){\nif((i__4731__auto___65867 < len__4730__auto___65866)){\nargs__4736__auto__.push((arguments[i__4731__auto___65867]));\n\nvar G__65868 = (i__4731__auto___65867 + (1));\ni__4731__auto___65867 = G__65868;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFuncB.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncB.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65245 = conformed_args__63365__auto__;\nvar map__65245__$1 = (((((!((map__65245 == null))))?(((((map__65245.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65245.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65245):map__65245);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65245__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65245__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65245__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFuncB\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncB.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFuncB.cljs$lang$applyTo = (function (seq65244){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65244));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (marker \"hello\")\n * (marker nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (marker {:onClick f} \"hello\")\n * (marker #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (marker :#the-id.klass.other-klass \"hello\")\n * (marker :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.marker = (function com$fulcrologic$fulcro$dom$marker(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65869 = arguments.length;\nvar i__4731__auto___65870 = (0);\nwhile(true){\nif((i__4731__auto___65870 < len__4730__auto___65869)){\nargs__4736__auto__.push((arguments[i__4731__auto___65870]));\n\nvar G__65871 = (i__4731__auto___65870 + (1));\ni__4731__auto___65870 = G__65871;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.marker.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.marker.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65248 = conformed_args__63365__auto__;\nvar map__65248__$1 = (((((!((map__65248 == null))))?(((((map__65248.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65248.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65248):map__65248);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65248__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65248__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65248__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"marker\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.marker.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.marker.cljs$lang$applyTo = (function (seq65247){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65247));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feComponentTransfer \"hello\")\n * (feComponentTransfer nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feComponentTransfer {:onClick f} \"hello\")\n * (feComponentTransfer #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feComponentTransfer :#the-id.klass.other-klass \"hello\")\n * (feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feComponentTransfer = (function com$fulcrologic$fulcro$dom$feComponentTransfer(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65872 = arguments.length;\nvar i__4731__auto___65873 = (0);\nwhile(true){\nif((i__4731__auto___65873 < len__4730__auto___65872)){\nargs__4736__auto__.push((arguments[i__4731__auto___65873]));\n\nvar G__65874 = (i__4731__auto___65873 + (1));\ni__4731__auto___65873 = G__65874;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feComponentTransfer.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feComponentTransfer.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65251 = conformed_args__63365__auto__;\nvar map__65251__$1 = (((((!((map__65251 == null))))?(((((map__65251.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65251.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65251):map__65251);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65251__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65251__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65251__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feComponentTransfer\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feComponentTransfer.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feComponentTransfer.cljs$lang$applyTo = (function (seq65250){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65250));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (td \"hello\")\n * (td nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (td {:onClick f} \"hello\")\n * (td #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (td :#the-id.klass.other-klass \"hello\")\n * (td :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.td = (function com$fulcrologic$fulcro$dom$td(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65875 = arguments.length;\nvar i__4731__auto___65876 = (0);\nwhile(true){\nif((i__4731__auto___65876 < len__4730__auto___65875)){\nargs__4736__auto__.push((arguments[i__4731__auto___65876]));\n\nvar G__65877 = (i__4731__auto___65876 + (1));\ni__4731__auto___65876 = G__65877;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.td.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.td.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65254 = conformed_args__63365__auto__;\nvar map__65254__$1 = (((((!((map__65254 == null))))?(((((map__65254.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65254.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65254):map__65254);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65254__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65254__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65254__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"td\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.td.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.td.cljs$lang$applyTo = (function (seq65253){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65253));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tr \"hello\")\n * (tr nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tr {:onClick f} \"hello\")\n * (tr #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tr :#the-id.klass.other-klass \"hello\")\n * (tr :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.tr = (function com$fulcrologic$fulcro$dom$tr(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65878 = arguments.length;\nvar i__4731__auto___65879 = (0);\nwhile(true){\nif((i__4731__auto___65879 < len__4730__auto___65878)){\nargs__4736__auto__.push((arguments[i__4731__auto___65879]));\n\nvar G__65880 = (i__4731__auto___65879 + (1));\ni__4731__auto___65879 = G__65880;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tr.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tr.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65257 = conformed_args__63365__auto__;\nvar map__65257__$1 = (((((!((map__65257 == null))))?(((((map__65257.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65257.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65257):map__65257);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65257__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65257__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65257__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tr\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tr.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tr.cljs$lang$applyTo = (function (seq65256){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65256));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (circle \"hello\")\n * (circle nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (circle {:onClick f} \"hello\")\n * (circle #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (circle :#the-id.klass.other-klass \"hello\")\n * (circle :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.circle = (function com$fulcrologic$fulcro$dom$circle(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65881 = arguments.length;\nvar i__4731__auto___65882 = (0);\nwhile(true){\nif((i__4731__auto___65882 < len__4730__auto___65881)){\nargs__4736__auto__.push((arguments[i__4731__auto___65882]));\n\nvar G__65883 = (i__4731__auto___65882 + (1));\ni__4731__auto___65882 = G__65883;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.circle.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.circle.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65260 = conformed_args__63365__auto__;\nvar map__65260__$1 = (((((!((map__65260 == null))))?(((((map__65260.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65260.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65260):map__65260);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65260__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65260__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65260__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"circle\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.circle.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.circle.cljs$lang$applyTo = (function (seq65259){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65259));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (section \"hello\")\n * (section nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (section {:onClick f} \"hello\")\n * (section #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (section :#the-id.klass.other-klass \"hello\")\n * (section :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.section = (function com$fulcrologic$fulcro$dom$section(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65884 = arguments.length;\nvar i__4731__auto___65885 = (0);\nwhile(true){\nif((i__4731__auto___65885 < len__4730__auto___65884)){\nargs__4736__auto__.push((arguments[i__4731__auto___65885]));\n\nvar G__65886 = (i__4731__auto___65885 + (1));\ni__4731__auto___65885 = G__65886;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.section.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.section.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65263 = conformed_args__63365__auto__;\nvar map__65263__$1 = (((((!((map__65263 == null))))?(((((map__65263.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65263.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65263):map__65263);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65263__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65263__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65263__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"section\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.section.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.section.cljs$lang$applyTo = (function (seq65262){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65262));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feDropShadow \"hello\")\n * (feDropShadow nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feDropShadow {:onClick f} \"hello\")\n * (feDropShadow #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feDropShadow :#the-id.klass.other-klass \"hello\")\n * (feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feDropShadow = (function com$fulcrologic$fulcro$dom$feDropShadow(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65887 = arguments.length;\nvar i__4731__auto___65888 = (0);\nwhile(true){\nif((i__4731__auto___65888 < len__4730__auto___65887)){\nargs__4736__auto__.push((arguments[i__4731__auto___65888]));\n\nvar G__65889 = (i__4731__auto___65888 + (1));\ni__4731__auto___65888 = G__65889;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feDropShadow.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDropShadow.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65266 = conformed_args__63365__auto__;\nvar map__65266__$1 = (((((!((map__65266 == null))))?(((((map__65266.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65266.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65266):map__65266);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65266__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65266__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65266__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feDropShadow\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDropShadow.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feDropShadow.cljs$lang$applyTo = (function (seq65265){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65265));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (th \"hello\")\n * (th nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (th {:onClick f} \"hello\")\n * (th #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (th :#the-id.klass.other-klass \"hello\")\n * (th :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.th = (function com$fulcrologic$fulcro$dom$th(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65890 = arguments.length;\nvar i__4731__auto___65891 = (0);\nwhile(true){\nif((i__4731__auto___65891 < len__4730__auto___65890)){\nargs__4736__auto__.push((arguments[i__4731__auto___65891]));\n\nvar G__65892 = (i__4731__auto___65891 + (1));\ni__4731__auto___65891 = G__65892;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.th.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.th.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65269 = conformed_args__63365__auto__;\nvar map__65269__$1 = (((((!((map__65269 == null))))?(((((map__65269.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65269.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65269):map__65269);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65269__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65269__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65269__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"th\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.th.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.th.cljs$lang$applyTo = (function (seq65268){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65268));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (time \"hello\")\n * (time nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (time {:onClick f} \"hello\")\n * (time #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (time :#the-id.klass.other-klass \"hello\")\n * (time :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.time = (function com$fulcrologic$fulcro$dom$time(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65893 = arguments.length;\nvar i__4731__auto___65894 = (0);\nwhile(true){\nif((i__4731__auto___65894 < len__4730__auto___65893)){\nargs__4736__auto__.push((arguments[i__4731__auto___65894]));\n\nvar G__65895 = (i__4731__auto___65894 + (1));\ni__4731__auto___65894 = G__65895;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.time.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.time.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65272 = conformed_args__63365__auto__;\nvar map__65272__$1 = (((((!((map__65272 == null))))?(((((map__65272.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65272.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65272):map__65272);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65272__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65272__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65272__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"time\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.time.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.time.cljs$lang$applyTo = (function (seq65271){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65271));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (optgroup \"hello\")\n * (optgroup nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (optgroup {:onClick f} \"hello\")\n * (optgroup #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (optgroup :#the-id.klass.other-klass \"hello\")\n * (optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.optgroup = (function com$fulcrologic$fulcro$dom$optgroup(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65896 = arguments.length;\nvar i__4731__auto___65897 = (0);\nwhile(true){\nif((i__4731__auto___65897 < len__4730__auto___65896)){\nargs__4736__auto__.push((arguments[i__4731__auto___65897]));\n\nvar G__65898 = (i__4731__auto___65897 + (1));\ni__4731__auto___65897 = G__65898;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65275 = conformed_args__63365__auto__;\nvar map__65275__$1 = (((((!((map__65275 == null))))?(((((map__65275.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65275.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65275):map__65275);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65275__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65275__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65275__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"optgroup\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.optgroup.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.optgroup.cljs$lang$applyTo = (function (seq65274){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65274));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (iframe \"hello\")\n * (iframe nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (iframe {:onClick f} \"hello\")\n * (iframe #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (iframe :#the-id.klass.other-klass \"hello\")\n * (iframe :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.iframe = (function com$fulcrologic$fulcro$dom$iframe(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65899 = arguments.length;\nvar i__4731__auto___65900 = (0);\nwhile(true){\nif((i__4731__auto___65900 < len__4730__auto___65899)){\nargs__4736__auto__.push((arguments[i__4731__auto___65900]));\n\nvar G__65901 = (i__4731__auto___65900 + (1));\ni__4731__auto___65900 = G__65901;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.iframe.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.iframe.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65278 = conformed_args__63365__auto__;\nvar map__65278__$1 = (((((!((map__65278 == null))))?(((((map__65278.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65278.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65278):map__65278);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65278__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65278__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65278__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"iframe\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.iframe.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.iframe.cljs$lang$applyTo = (function (seq65277){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65277));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (color-profile \"hello\")\n * (color-profile nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (color-profile {:onClick f} \"hello\")\n * (color-profile #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (color-profile :#the-id.klass.other-klass \"hello\")\n * (color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.color_profile = (function com$fulcrologic$fulcro$dom$color_profile(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65902 = arguments.length;\nvar i__4731__auto___65903 = (0);\nwhile(true){\nif((i__4731__auto___65903 < len__4730__auto___65902)){\nargs__4736__auto__.push((arguments[i__4731__auto___65903]));\n\nvar G__65904 = (i__4731__auto___65903 + (1));\ni__4731__auto___65903 = G__65904;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.color_profile.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.color_profile.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65281 = conformed_args__63365__auto__;\nvar map__65281__$1 = (((((!((map__65281 == null))))?(((((map__65281.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65281.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65281):map__65281);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65281__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65281__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65281__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"color-profile\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.color_profile.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.color_profile.cljs$lang$applyTo = (function (seq65280){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65280));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (legend \"hello\")\n * (legend nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (legend {:onClick f} \"hello\")\n * (legend #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (legend :#the-id.klass.other-klass \"hello\")\n * (legend :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.legend = (function com$fulcrologic$fulcro$dom$legend(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65905 = arguments.length;\nvar i__4731__auto___65906 = (0);\nwhile(true){\nif((i__4731__auto___65906 < len__4730__auto___65905)){\nargs__4736__auto__.push((arguments[i__4731__auto___65906]));\n\nvar G__65907 = (i__4731__auto___65906 + (1));\ni__4731__auto___65906 = G__65907;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.legend.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.legend.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65284 = conformed_args__63365__auto__;\nvar map__65284__$1 = (((((!((map__65284 == null))))?(((((map__65284.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65284.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65284):map__65284);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65284__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65284__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65284__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"legend\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.legend.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.legend.cljs$lang$applyTo = (function (seq65283){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65283));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (em \"hello\")\n * (em nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (em {:onClick f} \"hello\")\n * (em #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (em :#the-id.klass.other-klass \"hello\")\n * (em :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.em = (function com$fulcrologic$fulcro$dom$em(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65908 = arguments.length;\nvar i__4731__auto___65909 = (0);\nwhile(true){\nif((i__4731__auto___65909 < len__4730__auto___65908)){\nargs__4736__auto__.push((arguments[i__4731__auto___65909]));\n\nvar G__65910 = (i__4731__auto___65909 + (1));\ni__4731__auto___65909 = G__65910;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.em.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.em.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65287 = conformed_args__63365__auto__;\nvar map__65287__$1 = (((((!((map__65287 == null))))?(((((map__65287.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65287.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65287):map__65287);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65287__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65287__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65287__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"em\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.em.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.em.cljs$lang$applyTo = (function (seq65286){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65286));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (kbd \"hello\")\n * (kbd nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (kbd {:onClick f} \"hello\")\n * (kbd #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (kbd :#the-id.klass.other-klass \"hello\")\n * (kbd :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.kbd = (function com$fulcrologic$fulcro$dom$kbd(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65911 = arguments.length;\nvar i__4731__auto___65912 = (0);\nwhile(true){\nif((i__4731__auto___65912 < len__4730__auto___65911)){\nargs__4736__auto__.push((arguments[i__4731__auto___65912]));\n\nvar G__65913 = (i__4731__auto___65912 + (1));\ni__4731__auto___65912 = G__65913;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.kbd.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.kbd.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65290 = conformed_args__63365__auto__;\nvar map__65290__$1 = (((((!((map__65290 == null))))?(((((map__65290.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65290.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65290):map__65290);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65290__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65290__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65290__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"kbd\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.kbd.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.kbd.cljs$lang$applyTo = (function (seq65289){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65289));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (article \"hello\")\n * (article nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (article {:onClick f} \"hello\")\n * (article #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (article :#the-id.klass.other-klass \"hello\")\n * (article :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.article = (function com$fulcrologic$fulcro$dom$article(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65914 = arguments.length;\nvar i__4731__auto___65915 = (0);\nwhile(true){\nif((i__4731__auto___65915 < len__4730__auto___65914)){\nargs__4736__auto__.push((arguments[i__4731__auto___65915]));\n\nvar G__65916 = (i__4731__auto___65915 + (1));\ni__4731__auto___65915 = G__65916;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.article.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.article.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65293 = conformed_args__63365__auto__;\nvar map__65293__$1 = (((((!((map__65293 == null))))?(((((map__65293.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65293.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65293):map__65293);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65293__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65293__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65293__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"article\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.article.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.article.cljs$lang$applyTo = (function (seq65292){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65292));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (animateColor \"hello\")\n * (animateColor nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (animateColor {:onClick f} \"hello\")\n * (animateColor #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (animateColor :#the-id.klass.other-klass \"hello\")\n * (animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.animateColor = (function com$fulcrologic$fulcro$dom$animateColor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65917 = arguments.length;\nvar i__4731__auto___65918 = (0);\nwhile(true){\nif((i__4731__auto___65918 < len__4730__auto___65917)){\nargs__4736__auto__.push((arguments[i__4731__auto___65918]));\n\nvar G__65919 = (i__4731__auto___65918 + (1));\ni__4731__auto___65918 = G__65919;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.animateColor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateColor.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65296 = conformed_args__63365__auto__;\nvar map__65296__$1 = (((((!((map__65296 == null))))?(((((map__65296.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65296.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65296):map__65296);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65296__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65296__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65296__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"animateColor\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateColor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.animateColor.cljs$lang$applyTo = (function (seq65295){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65295));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (clipPath \"hello\")\n * (clipPath nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (clipPath {:onClick f} \"hello\")\n * (clipPath #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (clipPath :#the-id.klass.other-klass \"hello\")\n * (clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.clipPath = (function com$fulcrologic$fulcro$dom$clipPath(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65920 = arguments.length;\nvar i__4731__auto___65921 = (0);\nwhile(true){\nif((i__4731__auto___65921 < len__4730__auto___65920)){\nargs__4736__auto__.push((arguments[i__4731__auto___65921]));\n\nvar G__65922 = (i__4731__auto___65921 + (1));\ni__4731__auto___65921 = G__65922;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.clipPath.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.clipPath.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65299 = conformed_args__63365__auto__;\nvar map__65299__$1 = (((((!((map__65299 == null))))?(((((map__65299.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65299.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65299):map__65299);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65299__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65299__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65299__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"clipPath\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.clipPath.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.clipPath.cljs$lang$applyTo = (function (seq65298){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65298));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (abbr \"hello\")\n * (abbr nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (abbr {:onClick f} \"hello\")\n * (abbr #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (abbr :#the-id.klass.other-klass \"hello\")\n * (abbr :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.abbr = (function com$fulcrologic$fulcro$dom$abbr(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65923 = arguments.length;\nvar i__4731__auto___65924 = (0);\nwhile(true){\nif((i__4731__auto___65924 < len__4730__auto___65923)){\nargs__4736__auto__.push((arguments[i__4731__auto___65924]));\n\nvar G__65925 = (i__4731__auto___65924 + (1));\ni__4731__auto___65924 = G__65925;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.abbr.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.abbr.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65302 = conformed_args__63365__auto__;\nvar map__65302__$1 = (((((!((map__65302 == null))))?(((((map__65302.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65302.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65302):map__65302);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65302__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65302__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65302__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"abbr\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.abbr.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.abbr.cljs$lang$applyTo = (function (seq65301){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65301));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (altGlyphDef \"hello\")\n * (altGlyphDef nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (altGlyphDef {:onClick f} \"hello\")\n * (altGlyphDef #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (altGlyphDef :#the-id.klass.other-klass \"hello\")\n * (altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.altGlyphDef = (function com$fulcrologic$fulcro$dom$altGlyphDef(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65926 = arguments.length;\nvar i__4731__auto___65927 = (0);\nwhile(true){\nif((i__4731__auto___65927 < len__4730__auto___65926)){\nargs__4736__auto__.push((arguments[i__4731__auto___65927]));\n\nvar G__65928 = (i__4731__auto___65927 + (1));\ni__4731__auto___65927 = G__65928;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.altGlyphDef.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyphDef.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65305 = conformed_args__63365__auto__;\nvar map__65305__$1 = (((((!((map__65305 == null))))?(((((map__65305.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65305.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65305):map__65305);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65305__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65305__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65305__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"altGlyphDef\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyphDef.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.altGlyphDef.cljs$lang$applyTo = (function (seq65304){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65304));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meshrow \"hello\")\n * (meshrow nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meshrow {:onClick f} \"hello\")\n * (meshrow #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meshrow :#the-id.klass.other-klass \"hello\")\n * (meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.meshrow = (function com$fulcrologic$fulcro$dom$meshrow(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65929 = arguments.length;\nvar i__4731__auto___65930 = (0);\nwhile(true){\nif((i__4731__auto___65930 < len__4730__auto___65929)){\nargs__4736__auto__.push((arguments[i__4731__auto___65930]));\n\nvar G__65931 = (i__4731__auto___65930 + (1));\ni__4731__auto___65930 = G__65931;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meshrow.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshrow.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65308 = conformed_args__63365__auto__;\nvar map__65308__$1 = (((((!((map__65308 == null))))?(((((map__65308.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65308.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65308):map__65308);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65308__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65308__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65308__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meshrow\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshrow.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meshrow.cljs$lang$applyTo = (function (seq65307){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65307));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (cursor \"hello\")\n * (cursor nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (cursor {:onClick f} \"hello\")\n * (cursor #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (cursor :#the-id.klass.other-klass \"hello\")\n * (cursor :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.cursor = (function com$fulcrologic$fulcro$dom$cursor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65932 = arguments.length;\nvar i__4731__auto___65933 = (0);\nwhile(true){\nif((i__4731__auto___65933 < len__4730__auto___65932)){\nargs__4736__auto__.push((arguments[i__4731__auto___65933]));\n\nvar G__65934 = (i__4731__auto___65933 + (1));\ni__4731__auto___65933 = G__65934;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.cursor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.cursor.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65311 = conformed_args__63365__auto__;\nvar map__65311__$1 = (((((!((map__65311 == null))))?(((((map__65311.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65311.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65311):map__65311);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65311__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65311__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65311__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"cursor\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.cursor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.cursor.cljs$lang$applyTo = (function (seq65310){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65310));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (animate \"hello\")\n * (animate nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (animate {:onClick f} \"hello\")\n * (animate #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (animate :#the-id.klass.other-klass \"hello\")\n * (animate :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.animate = (function com$fulcrologic$fulcro$dom$animate(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65935 = arguments.length;\nvar i__4731__auto___65936 = (0);\nwhile(true){\nif((i__4731__auto___65936 < len__4730__auto___65935)){\nargs__4736__auto__.push((arguments[i__4731__auto___65936]));\n\nvar G__65937 = (i__4731__auto___65936 + (1));\ni__4731__auto___65936 = G__65937;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.animate.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animate.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65314 = conformed_args__63365__auto__;\nvar map__65314__$1 = (((((!((map__65314 == null))))?(((((map__65314.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65314.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65314):map__65314);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65314__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65314__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65314__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"animate\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animate.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.animate.cljs$lang$applyTo = (function (seq65313){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65313));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (source \"hello\")\n * (source nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (source {:onClick f} \"hello\")\n * (source #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (source :#the-id.klass.other-klass \"hello\")\n * (source :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.source = (function com$fulcrologic$fulcro$dom$source(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65938 = arguments.length;\nvar i__4731__auto___65939 = (0);\nwhile(true){\nif((i__4731__auto___65939 < len__4730__auto___65938)){\nargs__4736__auto__.push((arguments[i__4731__auto___65939]));\n\nvar G__65940 = (i__4731__auto___65939 + (1));\ni__4731__auto___65939 = G__65940;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.source.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.source.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65317 = conformed_args__63365__auto__;\nvar map__65317__$1 = (((((!((map__65317 == null))))?(((((map__65317.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65317.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65317):map__65317);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65317__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65317__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65317__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"source\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.source.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.source.cljs$lang$applyTo = (function (seq65316){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65316));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (output \"hello\")\n * (output nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (output {:onClick f} \"hello\")\n * (output #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (output :#the-id.klass.other-klass \"hello\")\n * (output :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.output = (function com$fulcrologic$fulcro$dom$output(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65941 = arguments.length;\nvar i__4731__auto___65942 = (0);\nwhile(true){\nif((i__4731__auto___65942 < len__4730__auto___65941)){\nargs__4736__auto__.push((arguments[i__4731__auto___65942]));\n\nvar G__65943 = (i__4731__auto___65942 + (1));\ni__4731__auto___65942 = G__65943;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.output.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.output.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65320 = conformed_args__63365__auto__;\nvar map__65320__$1 = (((((!((map__65320 == null))))?(((((map__65320.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65320.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65320):map__65320);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65320__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65320__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65320__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"output\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.output.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.output.cljs$lang$applyTo = (function (seq65319){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65319));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face \"hello\")\n * (font-face nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face {:onClick f} \"hello\")\n * (font-face #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face :#the-id.klass.other-klass \"hello\")\n * (font-face :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.font_face = (function com$fulcrologic$fulcro$dom$font_face(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65944 = arguments.length;\nvar i__4731__auto___65945 = (0);\nwhile(true){\nif((i__4731__auto___65945 < len__4730__auto___65944)){\nargs__4736__auto__.push((arguments[i__4731__auto___65945]));\n\nvar G__65946 = (i__4731__auto___65945 + (1));\ni__4731__auto___65945 = G__65946;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65323 = conformed_args__63365__auto__;\nvar map__65323__$1 = (((((!((map__65323 == null))))?(((((map__65323.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65323.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65323):map__65323);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65323__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65323__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65323__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face.cljs$lang$applyTo = (function (seq65322){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65322));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feMergeNode \"hello\")\n * (feMergeNode nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feMergeNode {:onClick f} \"hello\")\n * (feMergeNode #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feMergeNode :#the-id.klass.other-klass \"hello\")\n * (feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feMergeNode = (function com$fulcrologic$fulcro$dom$feMergeNode(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65947 = arguments.length;\nvar i__4731__auto___65948 = (0);\nwhile(true){\nif((i__4731__auto___65948 < len__4730__auto___65947)){\nargs__4736__auto__.push((arguments[i__4731__auto___65948]));\n\nvar G__65949 = (i__4731__auto___65948 + (1));\ni__4731__auto___65948 = G__65949;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feMergeNode.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMergeNode.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65326 = conformed_args__63365__auto__;\nvar map__65326__$1 = (((((!((map__65326 == null))))?(((((map__65326.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65326.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65326):map__65326);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65326__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65326__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65326__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feMergeNode\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMergeNode.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feMergeNode.cljs$lang$applyTo = (function (seq65325){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65325));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feSpotLight \"hello\")\n * (feSpotLight nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feSpotLight {:onClick f} \"hello\")\n * (feSpotLight #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feSpotLight :#the-id.klass.other-klass \"hello\")\n * (feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feSpotLight = (function com$fulcrologic$fulcro$dom$feSpotLight(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65950 = arguments.length;\nvar i__4731__auto___65951 = (0);\nwhile(true){\nif((i__4731__auto___65951 < len__4730__auto___65950)){\nargs__4736__auto__.push((arguments[i__4731__auto___65951]));\n\nvar G__65952 = (i__4731__auto___65951 + (1));\ni__4731__auto___65951 = G__65952;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feSpotLight.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feSpotLight.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65329 = conformed_args__63365__auto__;\nvar map__65329__$1 = (((((!((map__65329 == null))))?(((((map__65329.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65329.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65329):map__65329);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65329__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65329__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65329__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feSpotLight\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feSpotLight.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feSpotLight.cljs$lang$applyTo = (function (seq65328){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65328));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (header \"hello\")\n * (header nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (header {:onClick f} \"hello\")\n * (header #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (header :#the-id.klass.other-klass \"hello\")\n * (header :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.header = (function com$fulcrologic$fulcro$dom$header(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65953 = arguments.length;\nvar i__4731__auto___65954 = (0);\nwhile(true){\nif((i__4731__auto___65954 < len__4730__auto___65953)){\nargs__4736__auto__.push((arguments[i__4731__auto___65954]));\n\nvar G__65955 = (i__4731__auto___65954 + (1));\ni__4731__auto___65954 = G__65955;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.header.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.header.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65332 = conformed_args__63365__auto__;\nvar map__65332__$1 = (((((!((map__65332 == null))))?(((((map__65332.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65332.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65332):map__65332);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65332__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65332__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65332__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"header\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.header.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.header.cljs$lang$applyTo = (function (seq65331){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65331));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (datalist \"hello\")\n * (datalist nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (datalist {:onClick f} \"hello\")\n * (datalist #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (datalist :#the-id.klass.other-klass \"hello\")\n * (datalist :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.datalist = (function com$fulcrologic$fulcro$dom$datalist(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65956 = arguments.length;\nvar i__4731__auto___65957 = (0);\nwhile(true){\nif((i__4731__auto___65957 < len__4730__auto___65956)){\nargs__4736__auto__.push((arguments[i__4731__auto___65957]));\n\nvar G__65958 = (i__4731__auto___65957 + (1));\ni__4731__auto___65957 = G__65958;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.datalist.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.datalist.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65335 = conformed_args__63365__auto__;\nvar map__65335__$1 = (((((!((map__65335 == null))))?(((((map__65335.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65335.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65335):map__65335);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65335__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65335__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65335__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"datalist\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.datalist.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.datalist.cljs$lang$applyTo = (function (seq65334){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65334));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tfoot \"hello\")\n * (tfoot nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tfoot {:onClick f} \"hello\")\n * (tfoot #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tfoot :#the-id.klass.other-klass \"hello\")\n * (tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.tfoot = (function com$fulcrologic$fulcro$dom$tfoot(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65959 = arguments.length;\nvar i__4731__auto___65960 = (0);\nwhile(true){\nif((i__4731__auto___65960 < len__4730__auto___65959)){\nargs__4736__auto__.push((arguments[i__4731__auto___65960]));\n\nvar G__65961 = (i__4731__auto___65960 + (1));\ni__4731__auto___65960 = G__65961;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65338 = conformed_args__63365__auto__;\nvar map__65338__$1 = (((((!((map__65338 == null))))?(((((map__65338.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65338.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65338):map__65338);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65338__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65338__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65338__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tfoot\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tfoot.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tfoot.cljs$lang$applyTo = (function (seq65337){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65337));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (s \"hello\")\n * (s nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (s {:onClick f} \"hello\")\n * (s #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (s :#the-id.klass.other-klass \"hello\")\n * (s :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.s = (function com$fulcrologic$fulcro$dom$s(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65962 = arguments.length;\nvar i__4731__auto___65963 = (0);\nwhile(true){\nif((i__4731__auto___65963 < len__4730__auto___65962)){\nargs__4736__auto__.push((arguments[i__4731__auto___65963]));\n\nvar G__65964 = (i__4731__auto___65963 + (1));\ni__4731__auto___65963 = G__65964;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.s.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.s.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65341 = conformed_args__63365__auto__;\nvar map__65341__$1 = (((((!((map__65341 == null))))?(((((map__65341.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65341.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65341):map__65341);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65341__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65341__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65341__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"s\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.s.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.s.cljs$lang$applyTo = (function (seq65340){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65340));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (hatch \"hello\")\n * (hatch nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (hatch {:onClick f} \"hello\")\n * (hatch #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (hatch :#the-id.klass.other-klass \"hello\")\n * (hatch :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.hatch = (function com$fulcrologic$fulcro$dom$hatch(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65965 = arguments.length;\nvar i__4731__auto___65966 = (0);\nwhile(true){\nif((i__4731__auto___65966 < len__4730__auto___65965)){\nargs__4736__auto__.push((arguments[i__4731__auto___65966]));\n\nvar G__65967 = (i__4731__auto___65966 + (1));\ni__4731__auto___65966 = G__65967;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.hatch.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hatch.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65344 = conformed_args__63365__auto__;\nvar map__65344__$1 = (((((!((map__65344 == null))))?(((((map__65344.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65344.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65344):map__65344);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65344__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65344__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65344__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"hatch\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hatch.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.hatch.cljs$lang$applyTo = (function (seq65343){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65343));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ins \"hello\")\n * (ins nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ins {:onClick f} \"hello\")\n * (ins #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ins :#the-id.klass.other-klass \"hello\")\n * (ins :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.ins = (function com$fulcrologic$fulcro$dom$ins(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65968 = arguments.length;\nvar i__4731__auto___65969 = (0);\nwhile(true){\nif((i__4731__auto___65969 < len__4730__auto___65968)){\nargs__4736__auto__.push((arguments[i__4731__auto___65969]));\n\nvar G__65970 = (i__4731__auto___65969 + (1));\ni__4731__auto___65969 = G__65970;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ins.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ins.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65347 = conformed_args__63365__auto__;\nvar map__65347__$1 = (((((!((map__65347 == null))))?(((((map__65347.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65347.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65347):map__65347);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65347__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65347__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65347__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ins\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ins.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ins.cljs$lang$applyTo = (function (seq65346){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65346));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (footer \"hello\")\n * (footer nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (footer {:onClick f} \"hello\")\n * (footer #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (footer :#the-id.klass.other-klass \"hello\")\n * (footer :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.footer = (function com$fulcrologic$fulcro$dom$footer(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65971 = arguments.length;\nvar i__4731__auto___65972 = (0);\nwhile(true){\nif((i__4731__auto___65972 < len__4730__auto___65971)){\nargs__4736__auto__.push((arguments[i__4731__auto___65972]));\n\nvar G__65973 = (i__4731__auto___65972 + (1));\ni__4731__auto___65972 = G__65973;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.footer.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.footer.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65350 = conformed_args__63365__auto__;\nvar map__65350__$1 = (((((!((map__65350 == null))))?(((((map__65350.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65350.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65350):map__65350);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65350__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65350__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65350__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"footer\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.footer.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.footer.cljs$lang$applyTo = (function (seq65349){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65349));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (mpath \"hello\")\n * (mpath nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (mpath {:onClick f} \"hello\")\n * (mpath #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (mpath :#the-id.klass.other-klass \"hello\")\n * (mpath :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.mpath = (function com$fulcrologic$fulcro$dom$mpath(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65974 = arguments.length;\nvar i__4731__auto___65975 = (0);\nwhile(true){\nif((i__4731__auto___65975 < len__4730__auto___65974)){\nargs__4736__auto__.push((arguments[i__4731__auto___65975]));\n\nvar G__65976 = (i__4731__auto___65975 + (1));\ni__4731__auto___65975 = G__65976;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.mpath.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mpath.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65353 = conformed_args__63365__auto__;\nvar map__65353__$1 = (((((!((map__65353 == null))))?(((((map__65353.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65353.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65353):map__65353);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65353__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65353__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65353__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"mpath\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mpath.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.mpath.cljs$lang$applyTo = (function (seq65352){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65352));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (title \"hello\")\n * (title nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (title {:onClick f} \"hello\")\n * (title #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (title :#the-id.klass.other-klass \"hello\")\n * (title :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.title = (function com$fulcrologic$fulcro$dom$title(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65977 = arguments.length;\nvar i__4731__auto___65978 = (0);\nwhile(true){\nif((i__4731__auto___65978 < len__4730__auto___65977)){\nargs__4736__auto__.push((arguments[i__4731__auto___65978]));\n\nvar G__65979 = (i__4731__auto___65978 + (1));\ni__4731__auto___65978 = G__65979;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.title.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.title.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65356 = conformed_args__63365__auto__;\nvar map__65356__$1 = (((((!((map__65356 == null))))?(((((map__65356.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65356.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65356):map__65356);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65356__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65356__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65356__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"title\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.title.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.title.cljs$lang$applyTo = (function (seq65355){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65355));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h5 \"hello\")\n * (h5 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h5 {:onClick f} \"hello\")\n * (h5 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h5 :#the-id.klass.other-klass \"hello\")\n * (h5 :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.h5 = (function com$fulcrologic$fulcro$dom$h5(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65980 = arguments.length;\nvar i__4731__auto___65981 = (0);\nwhile(true){\nif((i__4731__auto___65981 < len__4730__auto___65980)){\nargs__4736__auto__.push((arguments[i__4731__auto___65981]));\n\nvar G__65982 = (i__4731__auto___65981 + (1));\ni__4731__auto___65981 = G__65982;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h5.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h5.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65359 = conformed_args__63365__auto__;\nvar map__65359__$1 = (((((!((map__65359 == null))))?(((((map__65359.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65359.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65359):map__65359);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65359__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65359__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65359__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h5\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h5.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h5.cljs$lang$applyTo = (function (seq65358){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65358));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meshgradient \"hello\")\n * (meshgradient nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meshgradient {:onClick f} \"hello\")\n * (meshgradient #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meshgradient :#the-id.klass.other-klass \"hello\")\n * (meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.meshgradient = (function com$fulcrologic$fulcro$dom$meshgradient(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65983 = arguments.length;\nvar i__4731__auto___65984 = (0);\nwhile(true){\nif((i__4731__auto___65984 < len__4730__auto___65983)){\nargs__4736__auto__.push((arguments[i__4731__auto___65984]));\n\nvar G__65985 = (i__4731__auto___65984 + (1));\ni__4731__auto___65984 = G__65985;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meshgradient.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshgradient.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65362 = conformed_args__63365__auto__;\nvar map__65362__$1 = (((((!((map__65362 == null))))?(((((map__65362.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65362.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65362):map__65362);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65362__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65362__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65362__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meshgradient\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshgradient.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meshgradient.cljs$lang$applyTo = (function (seq65361){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65361));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (canvas \"hello\")\n * (canvas nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (canvas {:onClick f} \"hello\")\n * (canvas #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (canvas :#the-id.klass.other-klass \"hello\")\n * (canvas :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.canvas = (function com$fulcrologic$fulcro$dom$canvas(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65986 = arguments.length;\nvar i__4731__auto___65987 = (0);\nwhile(true){\nif((i__4731__auto___65987 < len__4730__auto___65986)){\nargs__4736__auto__.push((arguments[i__4731__auto___65987]));\n\nvar G__65988 = (i__4731__auto___65987 + (1));\ni__4731__auto___65987 = G__65988;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.canvas.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.canvas.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65365 = conformed_args__63365__auto__;\nvar map__65365__$1 = (((((!((map__65365 == null))))?(((((map__65365.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65365.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65365):map__65365);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65365__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65365__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65365__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"canvas\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.canvas.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.canvas.cljs$lang$applyTo = (function (seq65364){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65364));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (param \"hello\")\n * (param nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (param {:onClick f} \"hello\")\n * (param #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (param :#the-id.klass.other-klass \"hello\")\n * (param :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.param = (function com$fulcrologic$fulcro$dom$param(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65989 = arguments.length;\nvar i__4731__auto___65990 = (0);\nwhile(true){\nif((i__4731__auto___65990 < len__4730__auto___65989)){\nargs__4736__auto__.push((arguments[i__4731__auto___65990]));\n\nvar G__65991 = (i__4731__auto___65990 + (1));\ni__4731__auto___65990 = G__65991;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.param.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.param.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65368 = conformed_args__63365__auto__;\nvar map__65368__$1 = (((((!((map__65368 == null))))?(((((map__65368.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65368.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65368):map__65368);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65368__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65368__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65368__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"param\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.param.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.param.cljs$lang$applyTo = (function (seq65367){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65367));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font \"hello\")\n * (font nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font {:onClick f} \"hello\")\n * (font #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font :#the-id.klass.other-klass \"hello\")\n * (font :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.font = (function com$fulcrologic$fulcro$dom$font(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65992 = arguments.length;\nvar i__4731__auto___65993 = (0);\nwhile(true){\nif((i__4731__auto___65993 < len__4730__auto___65992)){\nargs__4736__auto__.push((arguments[i__4731__auto___65993]));\n\nvar G__65994 = (i__4731__auto___65993 + (1));\ni__4731__auto___65993 = G__65994;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65371 = conformed_args__63365__auto__;\nvar map__65371__$1 = (((((!((map__65371 == null))))?(((((map__65371.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65371.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65371):map__65371);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65371__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65371__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65371__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font.cljs$lang$applyTo = (function (seq65370){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65370));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (div \"hello\")\n * (div nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (div {:onClick f} \"hello\")\n * (div #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (div :#the-id.klass.other-klass \"hello\")\n * (div :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.div = (function com$fulcrologic$fulcro$dom$div(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65995 = arguments.length;\nvar i__4731__auto___65996 = (0);\nwhile(true){\nif((i__4731__auto___65996 < len__4730__auto___65995)){\nargs__4736__auto__.push((arguments[i__4731__auto___65996]));\n\nvar G__65997 = (i__4731__auto___65996 + (1));\ni__4731__auto___65996 = G__65997;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.div.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.div.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65374 = conformed_args__63365__auto__;\nvar map__65374__$1 = (((((!((map__65374 == null))))?(((((map__65374.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65374.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65374):map__65374);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65374__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65374__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65374__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"div\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.div.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.div.cljs$lang$applyTo = (function (seq65373){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65373));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (option \"hello\")\n * (option nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (option {:onClick f} \"hello\")\n * (option #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (option :#the-id.klass.other-klass \"hello\")\n * (option :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.option = (function com$fulcrologic$fulcro$dom$option(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65998 = arguments.length;\nvar i__4731__auto___65999 = (0);\nwhile(true){\nif((i__4731__auto___65999 < len__4730__auto___65998)){\nargs__4736__auto__.push((arguments[i__4731__auto___65999]));\n\nvar G__66000 = (i__4731__auto___65999 + (1));\ni__4731__auto___65999 = G__66000;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.option.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.option.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65377 = conformed_args__63365__auto__;\nvar map__65377__$1 = (((((!((map__65377 == null))))?(((((map__65377.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65377.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65377):map__65377);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65377__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65377__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65377__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"option\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.option.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.option.cljs$lang$applyTo = (function (seq65376){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65376));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFlood \"hello\")\n * (feFlood nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFlood {:onClick f} \"hello\")\n * (feFlood #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFlood :#the-id.klass.other-klass \"hello\")\n * (feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feFlood = (function com$fulcrologic$fulcro$dom$feFlood(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66001 = arguments.length;\nvar i__4731__auto___66002 = (0);\nwhile(true){\nif((i__4731__auto___66002 < len__4730__auto___66001)){\nargs__4736__auto__.push((arguments[i__4731__auto___66002]));\n\nvar G__66003 = (i__4731__auto___66002 + (1));\ni__4731__auto___66002 = G__66003;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFlood.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFlood.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65380 = conformed_args__63365__auto__;\nvar map__65380__$1 = (((((!((map__65380 == null))))?(((((map__65380.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65380.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65380):map__65380);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65380__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65380__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65380__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFlood\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFlood.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFlood.cljs$lang$applyTo = (function (seq65379){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65379));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (summary \"hello\")\n * (summary nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (summary {:onClick f} \"hello\")\n * (summary #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (summary :#the-id.klass.other-klass \"hello\")\n * (summary :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.summary = (function com$fulcrologic$fulcro$dom$summary(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66004 = arguments.length;\nvar i__4731__auto___66005 = (0);\nwhile(true){\nif((i__4731__auto___66005 < len__4730__auto___66004)){\nargs__4736__auto__.push((arguments[i__4731__auto___66005]));\n\nvar G__66006 = (i__4731__auto___66005 + (1));\ni__4731__auto___66005 = G__66006;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.summary.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.summary.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65383 = conformed_args__63365__auto__;\nvar map__65383__$1 = (((((!((map__65383 == null))))?(((((map__65383.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65383.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65383):map__65383);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65383__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65383__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65383__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"summary\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.summary.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.summary.cljs$lang$applyTo = (function (seq65382){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65382));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feMorphology \"hello\")\n * (feMorphology nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feMorphology {:onClick f} \"hello\")\n * (feMorphology #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feMorphology :#the-id.klass.other-klass \"hello\")\n * (feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feMorphology = (function com$fulcrologic$fulcro$dom$feMorphology(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66007 = arguments.length;\nvar i__4731__auto___66008 = (0);\nwhile(true){\nif((i__4731__auto___66008 < len__4730__auto___66007)){\nargs__4736__auto__.push((arguments[i__4731__auto___66008]));\n\nvar G__66009 = (i__4731__auto___66008 + (1));\ni__4731__auto___66008 = G__66009;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feMorphology.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMorphology.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65386 = conformed_args__63365__auto__;\nvar map__65386__$1 = (((((!((map__65386 == null))))?(((((map__65386.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65386.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65386):map__65386);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65386__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65386__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65386__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feMorphology\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMorphology.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feMorphology.cljs$lang$applyTo = (function (seq65385){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65385));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (samp \"hello\")\n * (samp nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (samp {:onClick f} \"hello\")\n * (samp #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (samp :#the-id.klass.other-klass \"hello\")\n * (samp :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.samp = (function com$fulcrologic$fulcro$dom$samp(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66010 = arguments.length;\nvar i__4731__auto___66011 = (0);\nwhile(true){\nif((i__4731__auto___66011 < len__4730__auto___66010)){\nargs__4736__auto__.push((arguments[i__4731__auto___66011]));\n\nvar G__66012 = (i__4731__auto___66011 + (1));\ni__4731__auto___66011 = G__66012;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.samp.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.samp.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65389 = conformed_args__63365__auto__;\nvar map__65389__$1 = (((((!((map__65389 == null))))?(((((map__65389.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65389.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65389):map__65389);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65389__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65389__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65389__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"samp\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.samp.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.samp.cljs$lang$applyTo = (function (seq65388){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65388));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (glyphRef \"hello\")\n * (glyphRef nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (glyphRef {:onClick f} \"hello\")\n * (glyphRef #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (glyphRef :#the-id.klass.other-klass \"hello\")\n * (glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.glyphRef = (function com$fulcrologic$fulcro$dom$glyphRef(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66013 = arguments.length;\nvar i__4731__auto___66014 = (0);\nwhile(true){\nif((i__4731__auto___66014 < len__4730__auto___66013)){\nargs__4736__auto__.push((arguments[i__4731__auto___66014]));\n\nvar G__66015 = (i__4731__auto___66014 + (1));\ni__4731__auto___66014 = G__66015;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.glyphRef.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.glyphRef.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65392 = conformed_args__63365__auto__;\nvar map__65392__$1 = (((((!((map__65392 == null))))?(((((map__65392.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65392.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65392):map__65392);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65392__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65392__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65392__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"glyphRef\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.glyphRef.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.glyphRef.cljs$lang$applyTo = (function (seq65391){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65391));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (small \"hello\")\n * (small nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (small {:onClick f} \"hello\")\n * (small #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (small :#the-id.klass.other-klass \"hello\")\n * (small :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.small = (function com$fulcrologic$fulcro$dom$small(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66016 = arguments.length;\nvar i__4731__auto___66017 = (0);\nwhile(true){\nif((i__4731__auto___66017 < len__4730__auto___66016)){\nargs__4736__auto__.push((arguments[i__4731__auto___66017]));\n\nvar G__66018 = (i__4731__auto___66017 + (1));\ni__4731__auto___66017 = G__66018;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.small.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.small.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65395 = conformed_args__63365__auto__;\nvar map__65395__$1 = (((((!((map__65395 == null))))?(((((map__65395.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65395.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65395):map__65395);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65395__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65395__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65395__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"small\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.small.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.small.cljs$lang$applyTo = (function (seq65394){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65394));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (style \"hello\")\n * (style nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (style {:onClick f} \"hello\")\n * (style #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (style :#the-id.klass.other-klass \"hello\")\n * (style :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.style = (function com$fulcrologic$fulcro$dom$style(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66019 = arguments.length;\nvar i__4731__auto___66020 = (0);\nwhile(true){\nif((i__4731__auto___66020 < len__4730__auto___66019)){\nargs__4736__auto__.push((arguments[i__4731__auto___66020]));\n\nvar G__66021 = (i__4731__auto___66020 + (1));\ni__4731__auto___66020 = G__66021;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.style.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.style.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65398 = conformed_args__63365__auto__;\nvar map__65398__$1 = (((((!((map__65398 == null))))?(((((map__65398.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65398.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65398):map__65398);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65398__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65398__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65398__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"style\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.style.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.style.cljs$lang$applyTo = (function (seq65397){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65397));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (textarea \"hello\")\n * (textarea nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (textarea {:onClick f} \"hello\")\n * (textarea #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (textarea :#the-id.klass.other-klass \"hello\")\n * (textarea :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.textarea = (function com$fulcrologic$fulcro$dom$textarea(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66022 = arguments.length;\nvar i__4731__auto___66023 = (0);\nwhile(true){\nif((i__4731__auto___66023 < len__4730__auto___66022)){\nargs__4736__auto__.push((arguments[i__4731__auto___66023]));\n\nvar G__66024 = (i__4731__auto___66023 + (1));\ni__4731__auto___66023 = G__66024;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.textarea.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.textarea.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65401 = conformed_args__63365__auto__;\nvar map__65401__$1 = (((((!((map__65401 == null))))?(((((map__65401.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65401.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65401):map__65401);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65401__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65401__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65401__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"textarea\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.textarea.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.textarea.cljs$lang$applyTo = (function (seq65400){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65400));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feGaussianBlur \"hello\")\n * (feGaussianBlur nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feGaussianBlur {:onClick f} \"hello\")\n * (feGaussianBlur #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feGaussianBlur :#the-id.klass.other-klass \"hello\")\n * (feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feGaussianBlur = (function com$fulcrologic$fulcro$dom$feGaussianBlur(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66025 = arguments.length;\nvar i__4731__auto___66026 = (0);\nwhile(true){\nif((i__4731__auto___66026 < len__4730__auto___66025)){\nargs__4736__auto__.push((arguments[i__4731__auto___66026]));\n\nvar G__66027 = (i__4731__auto___66026 + (1));\ni__4731__auto___66026 = G__66027;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feGaussianBlur.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feGaussianBlur.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65404 = conformed_args__63365__auto__;\nvar map__65404__$1 = (((((!((map__65404 == null))))?(((((map__65404.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65404.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65404):map__65404);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65404__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65404__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65404__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feGaussianBlur\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feGaussianBlur.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feGaussianBlur.cljs$lang$applyTo = (function (seq65403){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65403));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h4 \"hello\")\n * (h4 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h4 {:onClick f} \"hello\")\n * (h4 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h4 :#the-id.klass.other-klass \"hello\")\n * (h4 :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.h4 = (function com$fulcrologic$fulcro$dom$h4(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66028 = arguments.length;\nvar i__4731__auto___66029 = (0);\nwhile(true){\nif((i__4731__auto___66029 < len__4730__auto___66028)){\nargs__4736__auto__.push((arguments[i__4731__auto___66029]));\n\nvar G__66030 = (i__4731__auto___66029 + (1));\ni__4731__auto___66029 = G__66030;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h4.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h4.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65407 = conformed_args__63365__auto__;\nvar map__65407__$1 = (((((!((map__65407 == null))))?(((((map__65407.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65407.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65407):map__65407);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65407__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65407__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65407__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h4\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h4.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h4.cljs$lang$applyTo = (function (seq65406){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65406));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (head \"hello\")\n * (head nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (head {:onClick f} \"hello\")\n * (head #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (head :#the-id.klass.other-klass \"hello\")\n * (head :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.head = (function com$fulcrologic$fulcro$dom$head(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66031 = arguments.length;\nvar i__4731__auto___66032 = (0);\nwhile(true){\nif((i__4731__auto___66032 < len__4730__auto___66031)){\nargs__4736__auto__.push((arguments[i__4731__auto___66032]));\n\nvar G__66033 = (i__4731__auto___66032 + (1));\ni__4731__auto___66032 = G__66033;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.head.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.head.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65410 = conformed_args__63365__auto__;\nvar map__65410__$1 = (((((!((map__65410 == null))))?(((((map__65410.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65410.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65410):map__65410);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65410__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65410__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65410__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"head\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.head.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.head.cljs$lang$applyTo = (function (seq65409){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65409));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (g \"hello\")\n * (g nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (g {:onClick f} \"hello\")\n * (g #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (g :#the-id.klass.other-klass \"hello\")\n * (g :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.g = (function com$fulcrologic$fulcro$dom$g(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66034 = arguments.length;\nvar i__4731__auto___66035 = (0);\nwhile(true){\nif((i__4731__auto___66035 < len__4730__auto___66034)){\nargs__4736__auto__.push((arguments[i__4731__auto___66035]));\n\nvar G__66036 = (i__4731__auto___66035 + (1));\ni__4731__auto___66035 = G__66036;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.g.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.g.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65413 = conformed_args__63365__auto__;\nvar map__65413__$1 = (((((!((map__65413 == null))))?(((((map__65413.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65413.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65413):map__65413);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65413__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65413__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65413__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"g\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.g.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.g.cljs$lang$applyTo = (function (seq65412){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65412));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (missing-glyph \"hello\")\n * (missing-glyph nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (missing-glyph {:onClick f} \"hello\")\n * (missing-glyph #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (missing-glyph :#the-id.klass.other-klass \"hello\")\n * (missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.missing_glyph = (function com$fulcrologic$fulcro$dom$missing_glyph(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66037 = arguments.length;\nvar i__4731__auto___66038 = (0);\nwhile(true){\nif((i__4731__auto___66038 < len__4730__auto___66037)){\nargs__4736__auto__.push((arguments[i__4731__auto___66038]));\n\nvar G__66039 = (i__4731__auto___66038 + (1));\ni__4731__auto___66038 = G__66039;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.missing_glyph.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.missing_glyph.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65416 = conformed_args__63365__auto__;\nvar map__65416__$1 = (((((!((map__65416 == null))))?(((((map__65416.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65416.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65416):map__65416);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65416__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65416__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65416__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"missing-glyph\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.missing_glyph.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.missing_glyph.cljs$lang$applyTo = (function (seq65415){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65415));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (stop \"hello\")\n * (stop nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (stop {:onClick f} \"hello\")\n * (stop #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (stop :#the-id.klass.other-klass \"hello\")\n * (stop :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.stop = (function com$fulcrologic$fulcro$dom$stop(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66040 = arguments.length;\nvar i__4731__auto___66041 = (0);\nwhile(true){\nif((i__4731__auto___66041 < len__4730__auto___66040)){\nargs__4736__auto__.push((arguments[i__4731__auto___66041]));\n\nvar G__66042 = (i__4731__auto___66041 + (1));\ni__4731__auto___66041 = G__66042;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.stop.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.stop.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65419 = conformed_args__63365__auto__;\nvar map__65419__$1 = (((((!((map__65419 == null))))?(((((map__65419.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65419.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65419):map__65419);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65419__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65419__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65419__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"stop\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.stop.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.stop.cljs$lang$applyTo = (function (seq65418){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65418));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feDiffuseLighting \"hello\")\n * (feDiffuseLighting nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feDiffuseLighting {:onClick f} \"hello\")\n * (feDiffuseLighting #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n * (feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feDiffuseLighting = (function com$fulcrologic$fulcro$dom$feDiffuseLighting(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66043 = arguments.length;\nvar i__4731__auto___66044 = (0);\nwhile(true){\nif((i__4731__auto___66044 < len__4730__auto___66043)){\nargs__4736__auto__.push((arguments[i__4731__auto___66044]));\n\nvar G__66045 = (i__4731__auto___66044 + (1));\ni__4731__auto___66044 = G__66045;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feDiffuseLighting.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDiffuseLighting.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65422 = conformed_args__63365__auto__;\nvar map__65422__$1 = (((((!((map__65422 == null))))?(((((map__65422.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65422.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65422):map__65422);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65422__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65422__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65422__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feDiffuseLighting\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDiffuseLighting.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feDiffuseLighting.cljs$lang$applyTo = (function (seq65421){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65421));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (filter \"hello\")\n * (filter nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (filter {:onClick f} \"hello\")\n * (filter #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (filter :#the-id.klass.other-klass \"hello\")\n * (filter :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.filter = (function com$fulcrologic$fulcro$dom$filter(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66046 = arguments.length;\nvar i__4731__auto___66047 = (0);\nwhile(true){\nif((i__4731__auto___66047 < len__4730__auto___66046)){\nargs__4736__auto__.push((arguments[i__4731__auto___66047]));\n\nvar G__66048 = (i__4731__auto___66047 + (1));\ni__4731__auto___66047 = G__66048;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.filter.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.filter.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65425 = conformed_args__63365__auto__;\nvar map__65425__$1 = (((((!((map__65425 == null))))?(((((map__65425.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65425.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65425):map__65425);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65425__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65425__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65425__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"filter\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.filter.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.filter.cljs$lang$applyTo = (function (seq65424){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65424));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feComposite \"hello\")\n * (feComposite nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feComposite {:onClick f} \"hello\")\n * (feComposite #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feComposite :#the-id.klass.other-klass \"hello\")\n * (feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feComposite = (function com$fulcrologic$fulcro$dom$feComposite(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66049 = arguments.length;\nvar i__4731__auto___66050 = (0);\nwhile(true){\nif((i__4731__auto___66050 < len__4730__auto___66049)){\nargs__4736__auto__.push((arguments[i__4731__auto___66050]));\n\nvar G__66051 = (i__4731__auto___66050 + (1));\ni__4731__auto___66050 = G__66051;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feComposite.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feComposite.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65428 = conformed_args__63365__auto__;\nvar map__65428__$1 = (((((!((map__65428 == null))))?(((((map__65428.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65428.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65428):map__65428);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65428__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65428__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65428__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feComposite\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feComposite.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feComposite.cljs$lang$applyTo = (function (seq65427){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65427));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (mesh \"hello\")\n * (mesh nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (mesh {:onClick f} \"hello\")\n * (mesh #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (mesh :#the-id.klass.other-klass \"hello\")\n * (mesh :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.mesh = (function com$fulcrologic$fulcro$dom$mesh(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66052 = arguments.length;\nvar i__4731__auto___66053 = (0);\nwhile(true){\nif((i__4731__auto___66053 < len__4730__auto___66052)){\nargs__4736__auto__.push((arguments[i__4731__auto___66053]));\n\nvar G__66054 = (i__4731__auto___66053 + (1));\ni__4731__auto___66053 = G__66054;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.mesh.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mesh.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65431 = conformed_args__63365__auto__;\nvar map__65431__$1 = (((((!((map__65431 == null))))?(((((map__65431.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65431.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65431):map__65431);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65431__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65431__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65431__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"mesh\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mesh.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.mesh.cljs$lang$applyTo = (function (seq65430){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65430));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (var \"hello\")\n * (var nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (var {:onClick f} \"hello\")\n * (var #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (var :#the-id.klass.other-klass \"hello\")\n * (var :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.var$ = (function com$fulcrologic$fulcro$dom$var(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66055 = arguments.length;\nvar i__4731__auto___66056 = (0);\nwhile(true){\nif((i__4731__auto___66056 < len__4730__auto___66055)){\nargs__4736__auto__.push((arguments[i__4731__auto___66056]));\n\nvar G__66057 = (i__4731__auto___66056 + (1));\ni__4731__auto___66056 = G__66057;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.var$.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.var$.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65434 = conformed_args__63365__auto__;\nvar map__65434__$1 = (((((!((map__65434 == null))))?(((((map__65434.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65434.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65434):map__65434);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65434__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65434__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65434__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"var\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.var$.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.var$.cljs$lang$applyTo = (function (seq65433){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65433));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tspan \"hello\")\n * (tspan nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tspan {:onClick f} \"hello\")\n * (tspan #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tspan :#the-id.klass.other-klass \"hello\")\n * (tspan :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.tspan = (function com$fulcrologic$fulcro$dom$tspan(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66058 = arguments.length;\nvar i__4731__auto___66059 = (0);\nwhile(true){\nif((i__4731__auto___66059 < len__4730__auto___66058)){\nargs__4736__auto__.push((arguments[i__4731__auto___66059]));\n\nvar G__66060 = (i__4731__auto___66059 + (1));\ni__4731__auto___66059 = G__66060;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tspan.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tspan.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65437 = conformed_args__63365__auto__;\nvar map__65437__$1 = (((((!((map__65437 == null))))?(((((map__65437.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65437.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65437):map__65437);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65437__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65437__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65437__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tspan\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tspan.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tspan.cljs$lang$applyTo = (function (seq65436){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65436));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ol \"hello\")\n * (ol nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ol {:onClick f} \"hello\")\n * (ol #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ol :#the-id.klass.other-klass \"hello\")\n * (ol :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.ol = (function com$fulcrologic$fulcro$dom$ol(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66061 = arguments.length;\nvar i__4731__auto___66062 = (0);\nwhile(true){\nif((i__4731__auto___66062 < len__4730__auto___66061)){\nargs__4736__auto__.push((arguments[i__4731__auto___66062]));\n\nvar G__66063 = (i__4731__auto___66062 + (1));\ni__4731__auto___66062 = G__66063;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ol.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ol.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65440 = conformed_args__63365__auto__;\nvar map__65440__$1 = (((((!((map__65440 == null))))?(((((map__65440.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65440.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65440):map__65440);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65440__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65440__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65440__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ol\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ol.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ol.cljs$lang$applyTo = (function (seq65439){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65439));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (details \"hello\")\n * (details nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (details {:onClick f} \"hello\")\n * (details #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (details :#the-id.klass.other-klass \"hello\")\n * (details :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.details = (function com$fulcrologic$fulcro$dom$details(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66064 = arguments.length;\nvar i__4731__auto___66065 = (0);\nwhile(true){\nif((i__4731__auto___66065 < len__4730__auto___66064)){\nargs__4736__auto__.push((arguments[i__4731__auto___66065]));\n\nvar G__66066 = (i__4731__auto___66065 + (1));\ni__4731__auto___66065 = G__66066;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.details.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.details.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65443 = conformed_args__63365__auto__;\nvar map__65443__$1 = (((((!((map__65443 == null))))?(((((map__65443.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65443.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65443):map__65443);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65443__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65443__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65443__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"details\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.details.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.details.cljs$lang$applyTo = (function (seq65442){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65442));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (line \"hello\")\n * (line nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (line {:onClick f} \"hello\")\n * (line #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (line :#the-id.klass.other-klass \"hello\")\n * (line :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.line = (function com$fulcrologic$fulcro$dom$line(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66067 = arguments.length;\nvar i__4731__auto___66068 = (0);\nwhile(true){\nif((i__4731__auto___66068 < len__4730__auto___66067)){\nargs__4736__auto__.push((arguments[i__4731__auto___66068]));\n\nvar G__66069 = (i__4731__auto___66068 + (1));\ni__4731__auto___66068 = G__66069;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.line.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.line.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65446 = conformed_args__63365__auto__;\nvar map__65446__$1 = (((((!((map__65446 == null))))?(((((map__65446.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65446.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65446):map__65446);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65446__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65446__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65446__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"line\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.line.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.line.cljs$lang$applyTo = (function (seq65445){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65445));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (col \"hello\")\n * (col nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (col {:onClick f} \"hello\")\n * (col #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (col :#the-id.klass.other-klass \"hello\")\n * (col :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.col = (function com$fulcrologic$fulcro$dom$col(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66070 = arguments.length;\nvar i__4731__auto___66071 = (0);\nwhile(true){\nif((i__4731__auto___66071 < len__4730__auto___66070)){\nargs__4736__auto__.push((arguments[i__4731__auto___66071]));\n\nvar G__66072 = (i__4731__auto___66071 + (1));\ni__4731__auto___66071 = G__66072;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.col.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.col.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65449 = conformed_args__63365__auto__;\nvar map__65449__$1 = (((((!((map__65449 == null))))?(((((map__65449.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65449.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65449):map__65449);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65449__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65449__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65449__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"col\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.col.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.col.cljs$lang$applyTo = (function (seq65448){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65448));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (label \"hello\")\n * (label nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (label {:onClick f} \"hello\")\n * (label #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (label :#the-id.klass.other-klass \"hello\")\n * (label :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.label = (function com$fulcrologic$fulcro$dom$label(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66073 = arguments.length;\nvar i__4731__auto___66074 = (0);\nwhile(true){\nif((i__4731__auto___66074 < len__4730__auto___66073)){\nargs__4736__auto__.push((arguments[i__4731__auto___66074]));\n\nvar G__66075 = (i__4731__auto___66074 + (1));\ni__4731__auto___66074 = G__66075;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.label.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.label.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65452 = conformed_args__63365__auto__;\nvar map__65452__$1 = (((((!((map__65452 == null))))?(((((map__65452.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65452.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65452):map__65452);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65452__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65452__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65452__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"label\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.label.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.label.cljs$lang$applyTo = (function (seq65451){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65451));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (picture \"hello\")\n * (picture nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (picture {:onClick f} \"hello\")\n * (picture #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (picture :#the-id.klass.other-klass \"hello\")\n * (picture :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.picture = (function com$fulcrologic$fulcro$dom$picture(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66076 = arguments.length;\nvar i__4731__auto___66077 = (0);\nwhile(true){\nif((i__4731__auto___66077 < len__4730__auto___66076)){\nargs__4736__auto__.push((arguments[i__4731__auto___66077]));\n\nvar G__66078 = (i__4731__auto___66077 + (1));\ni__4731__auto___66077 = G__66078;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.picture.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.picture.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65455 = conformed_args__63365__auto__;\nvar map__65455__$1 = (((((!((map__65455 == null))))?(((((map__65455.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65455.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65455):map__65455);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65455__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65455__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65455__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"picture\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.picture.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.picture.cljs$lang$applyTo = (function (seq65454){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65454));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (rt \"hello\")\n * (rt nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (rt {:onClick f} \"hello\")\n * (rt #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (rt :#the-id.klass.other-klass \"hello\")\n * (rt :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.rt = (function com$fulcrologic$fulcro$dom$rt(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66079 = arguments.length;\nvar i__4731__auto___66080 = (0);\nwhile(true){\nif((i__4731__auto___66080 < len__4730__auto___66079)){\nargs__4736__auto__.push((arguments[i__4731__auto___66080]));\n\nvar G__66081 = (i__4731__auto___66080 + (1));\ni__4731__auto___66080 = G__66081;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.rt.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rt.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65458 = conformed_args__63365__auto__;\nvar map__65458__$1 = (((((!((map__65458 == null))))?(((((map__65458.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65458.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65458):map__65458);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65458__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65458__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65458__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"rt\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rt.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.rt.cljs$lang$applyTo = (function (seq65457){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65457));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h6 \"hello\")\n * (h6 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h6 {:onClick f} \"hello\")\n * (h6 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h6 :#the-id.klass.other-klass \"hello\")\n * (h6 :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.h6 = (function com$fulcrologic$fulcro$dom$h6(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66082 = arguments.length;\nvar i__4731__auto___66083 = (0);\nwhile(true){\nif((i__4731__auto___66083 < len__4730__auto___66082)){\nargs__4736__auto__.push((arguments[i__4731__auto___66083]));\n\nvar G__66084 = (i__4731__auto___66083 + (1));\ni__4731__auto___66083 = G__66084;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h6.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h6.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65461 = conformed_args__63365__auto__;\nvar map__65461__$1 = (((((!((map__65461 == null))))?(((((map__65461.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65461.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65461):map__65461);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65461__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65461__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65461__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h6\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h6.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h6.cljs$lang$applyTo = (function (seq65460){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65460));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (vkern \"hello\")\n * (vkern nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (vkern {:onClick f} \"hello\")\n * (vkern #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (vkern :#the-id.klass.other-klass \"hello\")\n * (vkern :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.vkern = (function com$fulcrologic$fulcro$dom$vkern(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66085 = arguments.length;\nvar i__4731__auto___66086 = (0);\nwhile(true){\nif((i__4731__auto___66086 < len__4730__auto___66085)){\nargs__4736__auto__.push((arguments[i__4731__auto___66086]));\n\nvar G__66087 = (i__4731__auto___66086 + (1));\ni__4731__auto___66086 = G__66087;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.vkern.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.vkern.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65464 = conformed_args__63365__auto__;\nvar map__65464__$1 = (((((!((map__65464 == null))))?(((((map__65464.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65464.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65464):map__65464);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65464__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65464__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65464__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"vkern\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.vkern.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.vkern.cljs$lang$applyTo = (function (seq65463){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65463));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (link \"hello\")\n * (link nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (link {:onClick f} \"hello\")\n * (link #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (link :#the-id.klass.other-klass \"hello\")\n * (link :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.link = (function com$fulcrologic$fulcro$dom$link(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66088 = arguments.length;\nvar i__4731__auto___66089 = (0);\nwhile(true){\nif((i__4731__auto___66089 < len__4730__auto___66088)){\nargs__4736__auto__.push((arguments[i__4731__auto___66089]));\n\nvar G__66090 = (i__4731__auto___66089 + (1));\ni__4731__auto___66089 = G__66090;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.link.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.link.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65467 = conformed_args__63365__auto__;\nvar map__65467__$1 = (((((!((map__65467 == null))))?(((((map__65467.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65467.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65467):map__65467);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65467__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65467__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65467__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"link\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.link.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.link.cljs$lang$applyTo = (function (seq65466){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65466));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (defs \"hello\")\n * (defs nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (defs {:onClick f} \"hello\")\n * (defs #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (defs :#the-id.klass.other-klass \"hello\")\n * (defs :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.defs = (function com$fulcrologic$fulcro$dom$defs(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66091 = arguments.length;\nvar i__4731__auto___66092 = (0);\nwhile(true){\nif((i__4731__auto___66092 < len__4730__auto___66091)){\nargs__4736__auto__.push((arguments[i__4731__auto___66092]));\n\nvar G__66093 = (i__4731__auto___66092 + (1));\ni__4731__auto___66092 = G__66093;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.defs.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.defs.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65470 = conformed_args__63365__auto__;\nvar map__65470__$1 = (((((!((map__65470 == null))))?(((((map__65470.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65470.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65470):map__65470);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65470__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65470__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65470__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"defs\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.defs.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.defs.cljs$lang$applyTo = (function (seq65469){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65469));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (glyph \"hello\")\n * (glyph nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (glyph {:onClick f} \"hello\")\n * (glyph #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (glyph :#the-id.klass.other-klass \"hello\")\n * (glyph :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.glyph = (function com$fulcrologic$fulcro$dom$glyph(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66094 = arguments.length;\nvar i__4731__auto___66095 = (0);\nwhile(true){\nif((i__4731__auto___66095 < len__4730__auto___66094)){\nargs__4736__auto__.push((arguments[i__4731__auto___66095]));\n\nvar G__66096 = (i__4731__auto___66095 + (1));\ni__4731__auto___66095 = G__66096;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.glyph.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.glyph.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65473 = conformed_args__63365__auto__;\nvar map__65473__$1 = (((((!((map__65473 == null))))?(((((map__65473.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65473.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65473):map__65473);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65473__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65473__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65473__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"glyph\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.glyph.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.glyph.cljs$lang$applyTo = (function (seq65472){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65472));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (colgroup \"hello\")\n * (colgroup nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (colgroup {:onClick f} \"hello\")\n * (colgroup #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (colgroup :#the-id.klass.other-klass \"hello\")\n * (colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.colgroup = (function com$fulcrologic$fulcro$dom$colgroup(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66097 = arguments.length;\nvar i__4731__auto___66098 = (0);\nwhile(true){\nif((i__4731__auto___66098 < len__4730__auto___66097)){\nargs__4736__auto__.push((arguments[i__4731__auto___66098]));\n\nvar G__66099 = (i__4731__auto___66098 + (1));\ni__4731__auto___66098 = G__66099;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65476 = conformed_args__63365__auto__;\nvar map__65476__$1 = (((((!((map__65476 == null))))?(((((map__65476.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65476.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65476):map__65476);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65476__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65476__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65476__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"colgroup\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.colgroup.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.colgroup.cljs$lang$applyTo = (function (seq65475){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65475));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meter \"hello\")\n * (meter nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meter {:onClick f} \"hello\")\n * (meter #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meter :#the-id.klass.other-klass \"hello\")\n * (meter :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.meter = (function com$fulcrologic$fulcro$dom$meter(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66100 = arguments.length;\nvar i__4731__auto___66101 = (0);\nwhile(true){\nif((i__4731__auto___66101 < len__4730__auto___66100)){\nargs__4736__auto__.push((arguments[i__4731__auto___66101]));\n\nvar G__66102 = (i__4731__auto___66101 + (1));\ni__4731__auto___66101 = G__66102;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meter.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meter.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65479 = conformed_args__63365__auto__;\nvar map__65479__$1 = (((((!((map__65479 == null))))?(((((map__65479.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65479.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65479):map__65479);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65479__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65479__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65479__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meter\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meter.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meter.cljs$lang$applyTo = (function (seq65478){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65478));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (bdo \"hello\")\n * (bdo nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (bdo {:onClick f} \"hello\")\n * (bdo #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (bdo :#the-id.klass.other-klass \"hello\")\n * (bdo :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.bdo = (function com$fulcrologic$fulcro$dom$bdo(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66103 = arguments.length;\nvar i__4731__auto___66104 = (0);\nwhile(true){\nif((i__4731__auto___66104 < len__4730__auto___66103)){\nargs__4736__auto__.push((arguments[i__4731__auto___66104]));\n\nvar G__66105 = (i__4731__auto___66104 + (1));\ni__4731__auto___66104 = G__66105;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.bdo.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.bdo.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65482 = conformed_args__63365__auto__;\nvar map__65482__$1 = (((((!((map__65482 == null))))?(((((map__65482.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65482.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65482):map__65482);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65482__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65482__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65482__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"bdo\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.bdo.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.bdo.cljs$lang$applyTo = (function (seq65481){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65481));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feImage \"hello\")\n * (feImage nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feImage {:onClick f} \"hello\")\n * (feImage #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feImage :#the-id.klass.other-klass \"hello\")\n * (feImage :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feImage = (function com$fulcrologic$fulcro$dom$feImage(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66106 = arguments.length;\nvar i__4731__auto___66107 = (0);\nwhile(true){\nif((i__4731__auto___66107 < len__4730__auto___66106)){\nargs__4736__auto__.push((arguments[i__4731__auto___66107]));\n\nvar G__66108 = (i__4731__auto___66107 + (1));\ni__4731__auto___66107 = G__66108;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feImage.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feImage.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65485 = conformed_args__63365__auto__;\nvar map__65485__$1 = (((((!((map__65485 == null))))?(((((map__65485.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65485.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65485):map__65485);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65485__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65485__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65485__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feImage\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feImage.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feImage.cljs$lang$applyTo = (function (seq65484){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65484));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (b \"hello\")\n * (b nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (b {:onClick f} \"hello\")\n * (b #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (b :#the-id.klass.other-klass \"hello\")\n * (b :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.b = (function com$fulcrologic$fulcro$dom$b(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66109 = arguments.length;\nvar i__4731__auto___66110 = (0);\nwhile(true){\nif((i__4731__auto___66110 < len__4730__auto___66109)){\nargs__4736__auto__.push((arguments[i__4731__auto___66110]));\n\nvar G__66111 = (i__4731__auto___66110 + (1));\ni__4731__auto___66110 = G__66111;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.b.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.b.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65488 = conformed_args__63365__auto__;\nvar map__65488__$1 = (((((!((map__65488 == null))))?(((((map__65488.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65488.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65488):map__65488);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65488__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65488__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65488__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"b\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.b.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.b.cljs$lang$applyTo = (function (seq65487){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65487));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (svg \"hello\")\n * (svg nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (svg {:onClick f} \"hello\")\n * (svg #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (svg :#the-id.klass.other-klass \"hello\")\n * (svg :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.svg = (function com$fulcrologic$fulcro$dom$svg(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66112 = arguments.length;\nvar i__4731__auto___66113 = (0);\nwhile(true){\nif((i__4731__auto___66113 < len__4730__auto___66112)){\nargs__4736__auto__.push((arguments[i__4731__auto___66113]));\n\nvar G__66114 = (i__4731__auto___66113 + (1));\ni__4731__auto___66113 = G__66114;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.svg.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.svg.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65491 = conformed_args__63365__auto__;\nvar map__65491__$1 = (((((!((map__65491 == null))))?(((((map__65491.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65491.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65491):map__65491);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65491__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65491__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65491__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"svg\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.svg.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.svg.cljs$lang$applyTo = (function (seq65490){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65490));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feTile \"hello\")\n * (feTile nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feTile {:onClick f} \"hello\")\n * (feTile #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feTile :#the-id.klass.other-klass \"hello\")\n * (feTile :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feTile = (function com$fulcrologic$fulcro$dom$feTile(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66115 = arguments.length;\nvar i__4731__auto___66116 = (0);\nwhile(true){\nif((i__4731__auto___66116 < len__4730__auto___66115)){\nargs__4736__auto__.push((arguments[i__4731__auto___66116]));\n\nvar G__66117 = (i__4731__auto___66116 + (1));\ni__4731__auto___66116 = G__66117;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feTile.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feTile.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65494 = conformed_args__63365__auto__;\nvar map__65494__$1 = (((((!((map__65494 == null))))?(((((map__65494.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65494.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65494):map__65494);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65494__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65494__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65494__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feTile\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feTile.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feTile.cljs$lang$applyTo = (function (seq65493){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65493));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ellipse \"hello\")\n * (ellipse nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ellipse {:onClick f} \"hello\")\n * (ellipse #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ellipse :#the-id.klass.other-klass \"hello\")\n * (ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.ellipse = (function com$fulcrologic$fulcro$dom$ellipse(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66118 = arguments.length;\nvar i__4731__auto___66119 = (0);\nwhile(true){\nif((i__4731__auto___66119 < len__4730__auto___66118)){\nargs__4736__auto__.push((arguments[i__4731__auto___66119]));\n\nvar G__66120 = (i__4731__auto___66119 + (1));\ni__4731__auto___66119 = G__66120;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65497 = conformed_args__63365__auto__;\nvar map__65497__$1 = (((((!((map__65497 == null))))?(((((map__65497.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65497.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65497):map__65497);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65497__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65497__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65497__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ellipse\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ellipse.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ellipse.cljs$lang$applyTo = (function (seq65496){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65496));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (code \"hello\")\n * (code nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (code {:onClick f} \"hello\")\n * (code #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (code :#the-id.klass.other-klass \"hello\")\n * (code :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.code = (function com$fulcrologic$fulcro$dom$code(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66121 = arguments.length;\nvar i__4731__auto___66122 = (0);\nwhile(true){\nif((i__4731__auto___66122 < len__4730__auto___66121)){\nargs__4736__auto__.push((arguments[i__4731__auto___66122]));\n\nvar G__66123 = (i__4731__auto___66122 + (1));\ni__4731__auto___66122 = G__66123;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.code.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.code.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65500 = conformed_args__63365__auto__;\nvar map__65500__$1 = (((((!((map__65500 == null))))?(((((map__65500.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65500.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65500):map__65500);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65500__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65500__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65500__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"code\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.code.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.code.cljs$lang$applyTo = (function (seq65499){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65499));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dialog \"hello\")\n * (dialog nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dialog {:onClick f} \"hello\")\n * (dialog #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dialog :#the-id.klass.other-klass \"hello\")\n * (dialog :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.dialog = (function com$fulcrologic$fulcro$dom$dialog(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66124 = arguments.length;\nvar i__4731__auto___66125 = (0);\nwhile(true){\nif((i__4731__auto___66125 < len__4730__auto___66124)){\nargs__4736__auto__.push((arguments[i__4731__auto___66125]));\n\nvar G__66126 = (i__4731__auto___66125 + (1));\ni__4731__auto___66125 = G__66126;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dialog.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dialog.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65503 = conformed_args__63365__auto__;\nvar map__65503__$1 = (((((!((map__65503 == null))))?(((((map__65503.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65503.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65503):map__65503);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65503__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65503__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65503__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dialog\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dialog.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dialog.cljs$lang$applyTo = (function (seq65502){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65502));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (linearGradient \"hello\")\n * (linearGradient nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (linearGradient {:onClick f} \"hello\")\n * (linearGradient #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (linearGradient :#the-id.klass.other-klass \"hello\")\n * (linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.linearGradient = (function com$fulcrologic$fulcro$dom$linearGradient(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66127 = arguments.length;\nvar i__4731__auto___66128 = (0);\nwhile(true){\nif((i__4731__auto___66128 < len__4730__auto___66127)){\nargs__4736__auto__.push((arguments[i__4731__auto___66128]));\n\nvar G__66129 = (i__4731__auto___66128 + (1));\ni__4731__auto___66128 = G__66129;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65506 = conformed_args__63365__auto__;\nvar map__65506__$1 = (((((!((map__65506 == null))))?(((((map__65506.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65506.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65506):map__65506);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65506__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65506__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65506__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"linearGradient\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.linearGradient.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.linearGradient.cljs$lang$applyTo = (function (seq65505){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65505));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (discard \"hello\")\n * (discard nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (discard {:onClick f} \"hello\")\n * (discard #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (discard :#the-id.klass.other-klass \"hello\")\n * (discard :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.discard = (function com$fulcrologic$fulcro$dom$discard(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66130 = arguments.length;\nvar i__4731__auto___66131 = (0);\nwhile(true){\nif((i__4731__auto___66131 < len__4730__auto___66130)){\nargs__4736__auto__.push((arguments[i__4731__auto___66131]));\n\nvar G__66132 = (i__4731__auto___66131 + (1));\ni__4731__auto___66131 = G__66132;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.discard.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.discard.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65509 = conformed_args__63365__auto__;\nvar map__65509__$1 = (((((!((map__65509 == null))))?(((((map__65509.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65509.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65509):map__65509);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65509__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65509__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65509__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"discard\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.discard.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.discard.cljs$lang$applyTo = (function (seq65508){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65508));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face-src \"hello\")\n * (font-face-src nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face-src {:onClick f} \"hello\")\n * (font-face-src #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face-src :#the-id.klass.other-klass \"hello\")\n * (font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.font_face_src = (function com$fulcrologic$fulcro$dom$font_face_src(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66133 = arguments.length;\nvar i__4731__auto___66134 = (0);\nwhile(true){\nif((i__4731__auto___66134 < len__4730__auto___66133)){\nargs__4736__auto__.push((arguments[i__4731__auto___66134]));\n\nvar G__66135 = (i__4731__auto___66134 + (1));\ni__4731__auto___66134 = G__66135;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face_src.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_src.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65512 = conformed_args__63365__auto__;\nvar map__65512__$1 = (((((!((map__65512 == null))))?(((((map__65512.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65512.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65512):map__65512);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65512__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65512__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65512__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face-src\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_src.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face_src.cljs$lang$applyTo = (function (seq65511){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65511));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (noscript \"hello\")\n * (noscript nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (noscript {:onClick f} \"hello\")\n * (noscript #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (noscript :#the-id.klass.other-klass \"hello\")\n * (noscript :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.noscript = (function com$fulcrologic$fulcro$dom$noscript(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66136 = arguments.length;\nvar i__4731__auto___66137 = (0);\nwhile(true){\nif((i__4731__auto___66137 < len__4730__auto___66136)){\nargs__4736__auto__.push((arguments[i__4731__auto___66137]));\n\nvar G__66138 = (i__4731__auto___66137 + (1));\ni__4731__auto___66137 = G__66138;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.noscript.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.noscript.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65515 = conformed_args__63365__auto__;\nvar map__65515__$1 = (((((!((map__65515 == null))))?(((((map__65515.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65515.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65515):map__65515);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65515__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65515__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65515__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"noscript\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.noscript.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.noscript.cljs$lang$applyTo = (function (seq65514){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65514));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (animateTransform \"hello\")\n * (animateTransform nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (animateTransform {:onClick f} \"hello\")\n * (animateTransform #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (animateTransform :#the-id.klass.other-klass \"hello\")\n * (animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.animateTransform = (function com$fulcrologic$fulcro$dom$animateTransform(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66139 = arguments.length;\nvar i__4731__auto___66140 = (0);\nwhile(true){\nif((i__4731__auto___66140 < len__4730__auto___66139)){\nargs__4736__auto__.push((arguments[i__4731__auto___66140]));\n\nvar G__66141 = (i__4731__auto___66140 + (1));\ni__4731__auto___66140 = G__66141;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.animateTransform.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateTransform.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65518 = conformed_args__63365__auto__;\nvar map__65518__$1 = (((((!((map__65518 == null))))?(((((map__65518.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65518.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65518):map__65518);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65518__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65518__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65518__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"animateTransform\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateTransform.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.animateTransform.cljs$lang$applyTo = (function (seq65517){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65517));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feColorMatrix \"hello\")\n * (feColorMatrix nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feColorMatrix {:onClick f} \"hello\")\n * (feColorMatrix #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feColorMatrix :#the-id.klass.other-klass \"hello\")\n * (feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feColorMatrix = (function com$fulcrologic$fulcro$dom$feColorMatrix(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66142 = arguments.length;\nvar i__4731__auto___66143 = (0);\nwhile(true){\nif((i__4731__auto___66143 < len__4730__auto___66142)){\nargs__4736__auto__.push((arguments[i__4731__auto___66143]));\n\nvar G__66144 = (i__4731__auto___66143 + (1));\ni__4731__auto___66143 = G__66144;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feColorMatrix.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feColorMatrix.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65521 = conformed_args__63365__auto__;\nvar map__65521__$1 = (((((!((map__65521 == null))))?(((((map__65521.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65521.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65521):map__65521);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65521__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65521__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65521__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feColorMatrix\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feColorMatrix.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feColorMatrix.cljs$lang$applyTo = (function (seq65520){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65520));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h2 \"hello\")\n * (h2 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h2 {:onClick f} \"hello\")\n * (h2 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h2 :#the-id.klass.other-klass \"hello\")\n * (h2 :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.h2 = (function com$fulcrologic$fulcro$dom$h2(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66145 = arguments.length;\nvar i__4731__auto___66146 = (0);\nwhile(true){\nif((i__4731__auto___66146 < len__4730__auto___66145)){\nargs__4736__auto__.push((arguments[i__4731__auto___66146]));\n\nvar G__66147 = (i__4731__auto___66146 + (1));\ni__4731__auto___66146 = G__66147;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h2.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h2.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65524 = conformed_args__63365__auto__;\nvar map__65524__$1 = (((((!((map__65524 == null))))?(((((map__65524.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65524.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65524):map__65524);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65524__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65524__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65524__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h2\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h2.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h2.cljs$lang$applyTo = (function (seq65523){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65523));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (area \"hello\")\n * (area nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (area {:onClick f} \"hello\")\n * (area #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (area :#the-id.klass.other-klass \"hello\")\n * (area :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.area = (function com$fulcrologic$fulcro$dom$area(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66148 = arguments.length;\nvar i__4731__auto___66149 = (0);\nwhile(true){\nif((i__4731__auto___66149 < len__4730__auto___66148)){\nargs__4736__auto__.push((arguments[i__4731__auto___66149]));\n\nvar G__66150 = (i__4731__auto___66149 + (1));\ni__4731__auto___66149 = G__66150;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.area.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.area.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65527 = conformed_args__63365__auto__;\nvar map__65527__$1 = (((((!((map__65527 == null))))?(((((map__65527.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65527.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65527):map__65527);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65527__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65527__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65527__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"area\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.area.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.area.cljs$lang$applyTo = (function (seq65526){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65526));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (br \"hello\")\n * (br nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (br {:onClick f} \"hello\")\n * (br #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (br :#the-id.klass.other-klass \"hello\")\n * (br :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.br = (function com$fulcrologic$fulcro$dom$br(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66151 = arguments.length;\nvar i__4731__auto___66152 = (0);\nwhile(true){\nif((i__4731__auto___66152 < len__4730__auto___66151)){\nargs__4736__auto__.push((arguments[i__4731__auto___66152]));\n\nvar G__66153 = (i__4731__auto___66152 + (1));\ni__4731__auto___66152 = G__66153;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.br.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.br.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65530 = conformed_args__63365__auto__;\nvar map__65530__$1 = (((((!((map__65530 == null))))?(((((map__65530.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65530.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65530):map__65530);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65530__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65530__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65530__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"br\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.br.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.br.cljs$lang$applyTo = (function (seq65529){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65529));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (image \"hello\")\n * (image nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (image {:onClick f} \"hello\")\n * (image #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (image :#the-id.klass.other-klass \"hello\")\n * (image :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.image = (function com$fulcrologic$fulcro$dom$image(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___66154 = arguments.length;\nvar i__4731__auto___66155 = (0);\nwhile(true){\nif((i__4731__auto___66155 < len__4730__auto___66154)){\nargs__4736__auto__.push((arguments[i__4731__auto___66155]));\n\nvar G__66156 = (i__4731__auto___66155 + (1));\ni__4731__auto___66155 = G__66156;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.image.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.image.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__63365__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__65533 = conformed_args__63365__auto__;\nvar map__65533__$1 = (((((!((map__65533 == null))))?(((((map__65533.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65533.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65533):map__65533);\nvar css__63368__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65533__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__63367__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65533__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__63366__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65533__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar children__63367__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__63367__auto__);\nvar attrs_value__63369__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__63366__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"image\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__63369__auto__], null),children__63367__auto____$1),css__63368__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.image.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.image.cljs$lang$applyTo = (function (seq65532){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq65532));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Client-side DOM macros and functions. For isomorphic (server) support, see also com.fulcrologic.fulcro.dom-server","~:file","com/fulcrologic/fulcro/dom.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",31],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",["~$set","~$map","~$select","~$mask","~$meta","~$symbol","~$use","~$time","~$filter"]],"~:macros",["^ ","~$form",["^ ","~:arglists",["~#list",[["~$&","~$args"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(form \"hello\")\n(form nil \"hello\")\n\nThese two are made equivalent at compile time\n(form {:onClick f} \"hello\")\n(form #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(form :#the-id.klass.other-klass \"hello\")\n(form :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","~:name","~$com.fulcrologic.fulcro.dom/form","~:ns","~$com.fulcrologic.fulcro.dom","~:macro",true],"~$audio",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(audio \"hello\")\n(audio nil \"hello\")\n\nThese two are made equivalent at compile time\n(audio {:onClick f} \"hello\")\n(audio #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(audio :#the-id.klass.other-klass \"hello\")\n(audio :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/audio","^14","^15","^16",true],"~$input",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(input \"hello\")\n(input nil \"hello\")\n\nThese two are made equivalent at compile time\n(input {:onClick f} \"hello\")\n(input #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(input :#the-id.klass.other-klass \"hello\")\n(input :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/input","^14","^15","^16",true],"~$menuitem",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menuitem \"hello\")\n(menuitem nil \"hello\")\n\nThese two are made equivalent at compile time\n(menuitem {:onClick f} \"hello\")\n(menuitem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menuitem :#the-id.klass.other-klass \"hello\")\n(menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/menuitem","^14","^15","^16",true],"~$radialGradient",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(radialGradient \"hello\")\n(radialGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(radialGradient {:onClick f} \"hello\")\n(radialGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(radialGradient :#the-id.klass.other-klass \"hello\")\n(radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/radialGradient","^14","^15","^16",true],"~$feMerge",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMerge \"hello\")\n(feMerge nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMerge {:onClick f} \"hello\")\n(feMerge #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMerge :#the-id.klass.other-klass \"hello\")\n(feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feMerge","^14","^15","^16",true],"^P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(set \"hello\")\n(set nil \"hello\")\n\nThese two are made equivalent at compile time\n(set {:onClick f} \"hello\")\n(set #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(set :#the-id.klass.other-klass \"hello\")\n(set :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/set","^14","^15","^16",true],"~$feSpecularLighting",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpecularLighting \"hello\")\n(feSpecularLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpecularLighting {:onClick f} \"hello\")\n(feSpecularLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpecularLighting :#the-id.klass.other-klass \"hello\")\n(feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feSpecularLighting","^14","^15","^16",true],"~$base",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(base \"hello\")\n(base nil \"hello\")\n\nThese two are made equivalent at compile time\n(base {:onClick f} \"hello\")\n(base #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(base :#the-id.klass.other-klass \"hello\")\n(base :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/base","^14","^15","^16",true],"~$h1",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h1 \"hello\")\n(h1 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h1 {:onClick f} \"hello\")\n(h1 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h1 :#the-id.klass.other-klass \"hello\")\n(h1 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h1","^14","^15","^16",true],"~$feOffset",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feOffset \"hello\")\n(feOffset nil \"hello\")\n\nThese two are made equivalent at compile time\n(feOffset {:onClick f} \"hello\")\n(feOffset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feOffset :#the-id.klass.other-klass \"hello\")\n(feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feOffset","^14","^15","^16",true],"~$embed",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(embed \"hello\")\n(embed nil \"hello\")\n\nThese two are made equivalent at compile time\n(embed {:onClick f} \"hello\")\n(embed #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(embed :#the-id.klass.other-klass \"hello\")\n(embed :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/embed","^14","^15","^16",true],"~$animateMotion",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateMotion \"hello\")\n(animateMotion nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateMotion {:onClick f} \"hello\")\n(animateMotion #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateMotion :#the-id.klass.other-klass \"hello\")\n(animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/animateMotion","^14","^15","^16",true],"~$h3",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h3 \"hello\")\n(h3 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h3 {:onClick f} \"hello\")\n(h3 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h3 :#the-id.klass.other-klass \"hello\")\n(h3 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h3","^14","^15","^16",true],"~$body",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(body \"hello\")\n(body nil \"hello\")\n\nThese two are made equivalent at compile time\n(body {:onClick f} \"hello\")\n(body #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(body :#the-id.klass.other-klass \"hello\")\n(body :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/body","^14","^15","^16",true],"~$hkern",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hkern \"hello\")\n(hkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(hkern {:onClick f} \"hello\")\n(hkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hkern :#the-id.klass.other-klass \"hello\")\n(hkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/hkern","^14","^15","^16",true],"~$keygen",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(keygen \"hello\")\n(keygen nil \"hello\")\n\nThese two are made equivalent at compile time\n(keygen {:onClick f} \"hello\")\n(keygen #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(keygen :#the-id.klass.other-klass \"hello\")\n(keygen :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/keygen","^14","^15","^16",true],"~$font-face-format",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-format \"hello\")\n(font-face-format nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-format {:onClick f} \"hello\")\n(font-face-format #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-format :#the-id.klass.other-klass \"hello\")\n(font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face-format","^14","^15","^16",true],"~$feFuncA",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncA \"hello\")\n(feFuncA nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncA {:onClick f} \"hello\")\n(feFuncA #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncA :#the-id.klass.other-klass \"hello\")\n(feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFuncA","^14","^15","^16",true],"~$progress",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(progress \"hello\")\n(progress nil \"hello\")\n\nThese two are made equivalent at compile time\n(progress {:onClick f} \"hello\")\n(progress #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(progress :#the-id.klass.other-klass \"hello\")\n(progress :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/progress","^14","^15","^16",true],"~$main",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(main \"hello\")\n(main nil \"hello\")\n\nThese two are made equivalent at compile time\n(main {:onClick f} \"hello\")\n(main #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(main :#the-id.klass.other-klass \"hello\")\n(main :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/main","^14","^15","^16",true],"~$cite",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cite \"hello\")\n(cite nil \"hello\")\n\nThese two are made equivalent at compile time\n(cite {:onClick f} \"hello\")\n(cite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cite :#the-id.klass.other-klass \"hello\")\n(cite :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/cite","^14","^15","^16",true],"~$rect",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rect \"hello\")\n(rect nil \"hello\")\n\nThese two are made equivalent at compile time\n(rect {:onClick f} \"hello\")\n(rect #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rect :#the-id.klass.other-klass \"hello\")\n(rect :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/rect","^14","^15","^16",true],"~$tref",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tref \"hello\")\n(tref nil \"hello\")\n\nThese two are made equivalent at compile time\n(tref {:onClick f} \"hello\")\n(tref #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tref :#the-id.klass.other-klass \"hello\")\n(tref :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tref","^14","^15","^16",true],"~$meshpatch",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshpatch \"hello\")\n(meshpatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshpatch {:onClick f} \"hello\")\n(meshpatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshpatch :#the-id.klass.other-klass \"hello\")\n(meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meshpatch","^14","^15","^16",true],"~$polyline",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polyline \"hello\")\n(polyline nil \"hello\")\n\nThese two are made equivalent at compile time\n(polyline {:onClick f} \"hello\")\n(polyline #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polyline :#the-id.klass.other-klass \"hello\")\n(polyline :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/polyline","^14","^15","^16",true],"~$metadata",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(metadata \"hello\")\n(metadata nil \"hello\")\n\nThese two are made equivalent at compile time\n(metadata {:onClick f} \"hello\")\n(metadata #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(metadata :#the-id.klass.other-klass \"hello\")\n(metadata :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/metadata","^14","^15","^16",true],"^Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(map \"hello\")\n(map nil \"hello\")\n\nThese two are made equivalent at compile time\n(map {:onClick f} \"hello\")\n(map #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(map :#the-id.klass.other-klass \"hello\")\n(map :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/map","^14","^15","^16",true],"~$object",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(object \"hello\")\n(object nil \"hello\")\n\nThese two are made equivalent at compile time\n(object {:onClick f} \"hello\")\n(object #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(object :#the-id.klass.other-klass \"hello\")\n(object :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/object","^14","^15","^16",true],"~$i",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(i \"hello\")\n(i nil \"hello\")\n\nThese two are made equivalent at compile time\n(i {:onClick f} \"hello\")\n(i #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(i :#the-id.klass.other-klass \"hello\")\n(i :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/i","^14","^15","^16",true],"~$font-face-name",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-name \"hello\")\n(font-face-name nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-name {:onClick f} \"hello\")\n(font-face-name #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-name :#the-id.klass.other-klass \"hello\")\n(font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face-name","^14","^15","^16",true],"~$p",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(p \"hello\")\n(p nil \"hello\")\n\nThese two are made equivalent at compile time\n(p {:onClick f} \"hello\")\n(p #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(p :#the-id.klass.other-klass \"hello\")\n(p :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/p","^14","^15","^16",true],"~$feFuncR",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncR \"hello\")\n(feFuncR nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncR {:onClick f} \"hello\")\n(feFuncR #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncR :#the-id.klass.other-klass \"hello\")\n(feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFuncR","^14","^15","^16",true],"~$hatchpath",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatchpath \"hello\")\n(hatchpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatchpath {:onClick f} \"hello\")\n(hatchpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatchpath :#the-id.klass.other-klass \"hello\")\n(hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/hatchpath","^14","^15","^16",true],"~$altGlyphItem",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphItem \"hello\")\n(altGlyphItem nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphItem {:onClick f} \"hello\")\n(altGlyphItem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphItem :#the-id.klass.other-klass \"hello\")\n(altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/altGlyphItem","^14","^15","^16",true],"~$nav",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(nav \"hello\")\n(nav nil \"hello\")\n\nThese two are made equivalent at compile time\n(nav {:onClick f} \"hello\")\n(nav #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(nav :#the-id.klass.other-klass \"hello\")\n(nav :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/nav","^14","^15","^16",true],"~$ruby",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ruby \"hello\")\n(ruby nil \"hello\")\n\nThese two are made equivalent at compile time\n(ruby {:onClick f} \"hello\")\n(ruby #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ruby :#the-id.klass.other-klass \"hello\")\n(ruby :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ruby","^14","^15","^16",true],"~$switch",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(switch \"hello\")\n(switch nil \"hello\")\n\nThese two are made equivalent at compile time\n(switch {:onClick f} \"hello\")\n(switch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(switch :#the-id.klass.other-klass \"hello\")\n(switch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/switch","^14","^15","^16",true],"~$a",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(a \"hello\")\n(a nil \"hello\")\n\nThese two are made equivalent at compile time\n(a {:onClick f} \"hello\")\n(a #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(a :#the-id.klass.other-klass \"hello\")\n(a :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/a","^14","^15","^16",true],"~$gen-dom-macros",["^ ","^[",["^10",[["~$emitter"]]],"^8",121,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/gen-dom-macros","^14","^15","^16",true],"~$view",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(view \"hello\")\n(view nil \"hello\")\n\nThese two are made equivalent at compile time\n(view {:onClick f} \"hello\")\n(view #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(view :#the-id.klass.other-klass \"hello\")\n(view :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/view","^14","^15","^16",true],"~$menu",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menu \"hello\")\n(menu nil \"hello\")\n\nThese two are made equivalent at compile time\n(menu {:onClick f} \"hello\")\n(menu #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menu :#the-id.klass.other-klass \"hello\")\n(menu :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/menu","^14","^15","^16",true],"~$blockquote",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(blockquote \"hello\")\n(blockquote nil \"hello\")\n\nThese two are made equivalent at compile time\n(blockquote {:onClick f} \"hello\")\n(blockquote #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(blockquote :#the-id.klass.other-klass \"hello\")\n(blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/blockquote","^14","^15","^16",true],"~$img",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(img \"hello\")\n(img nil \"hello\")\n\nThese two are made equivalent at compile time\n(img {:onClick f} \"hello\")\n(img #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(img :#the-id.klass.other-klass \"hello\")\n(img :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/img","^14","^15","^16",true],"~$feFuncG",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncG \"hello\")\n(feFuncG nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncG {:onClick f} \"hello\")\n(feFuncG #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncG :#the-id.klass.other-klass \"hello\")\n(feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFuncG","^14","^15","^16",true],"~$text",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(text \"hello\")\n(text nil \"hello\")\n\nThese two are made equivalent at compile time\n(text {:onClick f} \"hello\")\n(text #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(text :#the-id.klass.other-klass \"hello\")\n(text :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/text","^14","^15","^16",true],"~$span",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(span \"hello\")\n(span nil \"hello\")\n\nThese two are made equivalent at compile time\n(span {:onClick f} \"hello\")\n(span #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(span :#the-id.klass.other-klass \"hello\")\n(span :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/span","^14","^15","^16",true],"~$track",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(track \"hello\")\n(track nil \"hello\")\n\nThese two are made equivalent at compile time\n(track {:onClick f} \"hello\")\n(track #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(track :#the-id.klass.other-klass \"hello\")\n(track :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/track","^14","^15","^16",true],"~$data",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(data \"hello\")\n(data nil \"hello\")\n\nThese two are made equivalent at compile time\n(data {:onClick f} \"hello\")\n(data #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(data :#the-id.klass.other-klass \"hello\")\n(data :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/data","^14","^15","^16",true],"~$u",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(u \"hello\")\n(u nil \"hello\")\n\nThese two are made equivalent at compile time\n(u {:onClick f} \"hello\")\n(u #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(u :#the-id.klass.other-klass \"hello\")\n(u :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/u","^14","^15","^16",true],"~$dl",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dl \"hello\")\n(dl nil \"hello\")\n\nThese two are made equivalent at compile time\n(dl {:onClick f} \"hello\")\n(dl #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dl :#the-id.klass.other-klass \"hello\")\n(dl :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dl","^14","^15","^16",true],"^R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(select \"hello\")\n(select nil \"hello\")\n\nThese two are made equivalent at compile time\n(select {:onClick f} \"hello\")\n(select #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(select :#the-id.klass.other-klass \"hello\")\n(select :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/select","^14","^15","^16",true],"~$polygon",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polygon \"hello\")\n(polygon nil \"hello\")\n\nThese two are made equivalent at compile time\n(polygon {:onClick f} \"hello\")\n(polygon #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polygon :#the-id.klass.other-klass \"hello\")\n(polygon :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/polygon","^14","^15","^16",true],"~$pattern",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pattern \"hello\")\n(pattern nil \"hello\")\n\nThese two are made equivalent at compile time\n(pattern {:onClick f} \"hello\")\n(pattern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pattern :#the-id.klass.other-klass \"hello\")\n(pattern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/pattern","^14","^15","^16",true],"~$html",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(html \"hello\")\n(html nil \"hello\")\n\nThese two are made equivalent at compile time\n(html {:onClick f} \"hello\")\n(html #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(html :#the-id.klass.other-klass \"hello\")\n(html :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/html","^14","^15","^16",true],"~$foreignObject",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(foreignObject \"hello\")\n(foreignObject nil \"hello\")\n\nThese two are made equivalent at compile time\n(foreignObject {:onClick f} \"hello\")\n(foreignObject #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(foreignObject :#the-id.klass.other-klass \"hello\")\n(foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/foreignObject","^14","^15","^16",true],"~$thead",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(thead \"hello\")\n(thead nil \"hello\")\n\nThese two are made equivalent at compile time\n(thead {:onClick f} \"hello\")\n(thead #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(thead :#the-id.klass.other-klass \"hello\")\n(thead :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/thead","^14","^15","^16",true],"~$path",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(path \"hello\")\n(path nil \"hello\")\n\nThese two are made equivalent at compile time\n(path {:onClick f} \"hello\")\n(path #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(path :#the-id.klass.other-klass \"hello\")\n(path :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/path","^14","^15","^16",true],"~$del",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(del \"hello\")\n(del nil \"hello\")\n\nThese two are made equivalent at compile time\n(del {:onClick f} \"hello\")\n(del #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(del :#the-id.klass.other-klass \"hello\")\n(del :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/del","^14","^15","^16",true],"~$altGlyph",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyph \"hello\")\n(altGlyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyph {:onClick f} \"hello\")\n(altGlyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyph :#the-id.klass.other-klass \"hello\")\n(altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/altGlyph","^14","^15","^16",true],"~$fieldset",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fieldset \"hello\")\n(fieldset nil \"hello\")\n\nThese two are made equivalent at compile time\n(fieldset {:onClick f} \"hello\")\n(fieldset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fieldset :#the-id.klass.other-klass \"hello\")\n(fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/fieldset","^14","^15","^16",true],"~$aside",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(aside \"hello\")\n(aside nil \"hello\")\n\nThese two are made equivalent at compile time\n(aside {:onClick f} \"hello\")\n(aside #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(aside :#the-id.klass.other-klass \"hello\")\n(aside :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/aside","^14","^15","^16",true],"~$feBlend",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feBlend \"hello\")\n(feBlend nil \"hello\")\n\nThese two are made equivalent at compile time\n(feBlend {:onClick f} \"hello\")\n(feBlend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feBlend :#the-id.klass.other-klass \"hello\")\n(feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feBlend","^14","^15","^16",true],"~$figure",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figure \"hello\")\n(figure nil \"hello\")\n\nThese two are made equivalent at compile time\n(figure {:onClick f} \"hello\")\n(figure #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figure :#the-id.klass.other-klass \"hello\")\n(figure :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/figure","^14","^15","^16",true],"~$textPath",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textPath \"hello\")\n(textPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(textPath {:onClick f} \"hello\")\n(textPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textPath :#the-id.klass.other-klass \"hello\")\n(textPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/textPath","^14","^15","^16",true],"~$figcaption",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figcaption \"hello\")\n(figcaption nil \"hello\")\n\nThese two are made equivalent at compile time\n(figcaption {:onClick f} \"hello\")\n(figcaption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figcaption :#the-id.klass.other-klass \"hello\")\n(figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/figcaption","^14","^15","^16",true],"^S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mask \"hello\")\n(mask nil \"hello\")\n\nThese two are made equivalent at compile time\n(mask {:onClick f} \"hello\")\n(mask #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mask :#the-id.klass.other-klass \"hello\")\n(mask :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/mask","^14","^15","^16",true],"~$q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(q \"hello\")\n(q nil \"hello\")\n\nThese two are made equivalent at compile time\n(q {:onClick f} \"hello\")\n(q #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(q :#the-id.klass.other-klass \"hello\")\n(q :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/q","^14","^15","^16",true],"~$bdi",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdi \"hello\")\n(bdi nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdi {:onClick f} \"hello\")\n(bdi #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdi :#the-id.klass.other-klass \"hello\")\n(bdi :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/bdi","^14","^15","^16",true],"~$feDistantLight",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDistantLight \"hello\")\n(feDistantLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDistantLight {:onClick f} \"hello\")\n(feDistantLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDistantLight :#the-id.klass.other-klass \"hello\")\n(feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feDistantLight","^14","^15","^16",true],"~$video",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(video \"hello\")\n(video nil \"hello\")\n\nThese two are made equivalent at compile time\n(video {:onClick f} \"hello\")\n(video #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(video :#the-id.klass.other-klass \"hello\")\n(video :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/video","^14","^15","^16",true],"~$address",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(address \"hello\")\n(address nil \"hello\")\n\nThese two are made equivalent at compile time\n(address {:onClick f} \"hello\")\n(address #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(address :#the-id.klass.other-klass \"hello\")\n(address :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/address","^14","^15","^16",true],"~$caption",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(caption \"hello\")\n(caption nil \"hello\")\n\nThese two are made equivalent at compile time\n(caption {:onClick f} \"hello\")\n(caption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(caption :#the-id.klass.other-klass \"hello\")\n(caption :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/caption","^14","^15","^16",true],"~$dd",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dd \"hello\")\n(dd nil \"hello\")\n\nThese two are made equivalent at compile time\n(dd {:onClick f} \"hello\")\n(dd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dd :#the-id.klass.other-klass \"hello\")\n(dd :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dd","^14","^15","^16",true],"~$rp",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rp \"hello\")\n(rp nil \"hello\")\n\nThese two are made equivalent at compile time\n(rp {:onClick f} \"hello\")\n(rp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rp :#the-id.klass.other-klass \"hello\")\n(rp :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/rp","^14","^15","^16",true],"~$hr",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hr \"hello\")\n(hr nil \"hello\")\n\nThese two are made equivalent at compile time\n(hr {:onClick f} \"hello\")\n(hr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hr :#the-id.klass.other-klass \"hello\")\n(hr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/hr","^14","^15","^16",true],"^T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meta \"hello\")\n(meta nil \"hello\")\n\nThese two are made equivalent at compile time\n(meta {:onClick f} \"hello\")\n(meta #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meta :#the-id.klass.other-klass \"hello\")\n(meta :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meta","^14","^15","^16",true],"~$tbody",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tbody \"hello\")\n(tbody nil \"hello\")\n\nThese two are made equivalent at compile time\n(tbody {:onClick f} \"hello\")\n(tbody #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tbody :#the-id.klass.other-klass \"hello\")\n(tbody :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tbody","^14","^15","^16",true],"~$desc",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(desc \"hello\")\n(desc nil \"hello\")\n\nThese two are made equivalent at compile time\n(desc {:onClick f} \"hello\")\n(desc #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(desc :#the-id.klass.other-klass \"hello\")\n(desc :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/desc","^14","^15","^16",true],"~$table",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(table \"hello\")\n(table nil \"hello\")\n\nThese two are made equivalent at compile time\n(table {:onClick f} \"hello\")\n(table #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(table :#the-id.klass.other-klass \"hello\")\n(table :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/table","^14","^15","^16",true],"~$pre",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pre \"hello\")\n(pre nil \"hello\")\n\nThese two are made equivalent at compile time\n(pre {:onClick f} \"hello\")\n(pre #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pre :#the-id.klass.other-klass \"hello\")\n(pre :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/pre","^14","^15","^16",true],"~$ul",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ul \"hello\")\n(ul nil \"hello\")\n\nThese two are made equivalent at compile time\n(ul {:onClick f} \"hello\")\n(ul #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ul :#the-id.klass.other-klass \"hello\")\n(ul :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ul","^14","^15","^16",true],"~$feConvolveMatrix",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feConvolveMatrix \"hello\")\n(feConvolveMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feConvolveMatrix {:onClick f} \"hello\")\n(feConvolveMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n(feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feConvolveMatrix","^14","^15","^16",true],"~$sup",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sup \"hello\")\n(sup nil \"hello\")\n\nThese two are made equivalent at compile time\n(sup {:onClick f} \"hello\")\n(sup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sup :#the-id.klass.other-klass \"hello\")\n(sup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/sup","^14","^15","^16",true],"~$dfn",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dfn \"hello\")\n(dfn nil \"hello\")\n\nThese two are made equivalent at compile time\n(dfn {:onClick f} \"hello\")\n(dfn #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dfn :#the-id.klass.other-klass \"hello\")\n(dfn :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dfn","^14","^15","^16",true],"~$sub",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sub \"hello\")\n(sub nil \"hello\")\n\nThese two are made equivalent at compile time\n(sub {:onClick f} \"hello\")\n(sub #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sub :#the-id.klass.other-klass \"hello\")\n(sub :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/sub","^14","^15","^16",true],"~$mark",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mark \"hello\")\n(mark nil \"hello\")\n\nThese two are made equivalent at compile time\n(mark {:onClick f} \"hello\")\n(mark #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mark :#the-id.klass.other-klass \"hello\")\n(mark :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/mark","^14","^15","^16",true],"~$feDisplacementMap",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDisplacementMap \"hello\")\n(feDisplacementMap nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDisplacementMap {:onClick f} \"hello\")\n(feDisplacementMap #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDisplacementMap :#the-id.klass.other-klass \"hello\")\n(feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feDisplacementMap","^14","^15","^16",true],"~$unknown",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(unknown \"hello\")\n(unknown nil \"hello\")\n\nThese two are made equivalent at compile time\n(unknown {:onClick f} \"hello\")\n(unknown #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(unknown :#the-id.klass.other-klass \"hello\")\n(unknown :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/unknown","^14","^15","^16",true],"~$script",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(script \"hello\")\n(script nil \"hello\")\n\nThese two are made equivalent at compile time\n(script {:onClick f} \"hello\")\n(script #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(script :#the-id.klass.other-klass \"hello\")\n(script :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/script","^14","^15","^16",true],"~$feTurbulence",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTurbulence \"hello\")\n(feTurbulence nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTurbulence {:onClick f} \"hello\")\n(feTurbulence #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTurbulence :#the-id.klass.other-klass \"hello\")\n(feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feTurbulence","^14","^15","^16",true],"~$big",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(big \"hello\")\n(big nil \"hello\")\n\nThese two are made equivalent at compile time\n(big {:onClick f} \"hello\")\n(big #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(big :#the-id.klass.other-klass \"hello\")\n(big :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/big","^14","^15","^16",true],"~$button",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(button \"hello\")\n(button nil \"hello\")\n\nThese two are made equivalent at compile time\n(button {:onClick f} \"hello\")\n(button #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(button :#the-id.klass.other-klass \"hello\")\n(button :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/button","^14","^15","^16",true],"~$font-face-uri",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-uri \"hello\")\n(font-face-uri nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-uri {:onClick f} \"hello\")\n(font-face-uri #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-uri :#the-id.klass.other-klass \"hello\")\n(font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face-uri","^14","^15","^16",true],"~$wbr",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(wbr \"hello\")\n(wbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(wbr {:onClick f} \"hello\")\n(wbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(wbr :#the-id.klass.other-klass \"hello\")\n(wbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/wbr","^14","^15","^16",true],"^U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(symbol \"hello\")\n(symbol nil \"hello\")\n\nThese two are made equivalent at compile time\n(symbol {:onClick f} \"hello\")\n(symbol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(symbol :#the-id.klass.other-klass \"hello\")\n(symbol :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/symbol","^14","^15","^16",true],"~$strong",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(strong \"hello\")\n(strong nil \"hello\")\n\nThese two are made equivalent at compile time\n(strong {:onClick f} \"hello\")\n(strong #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(strong :#the-id.klass.other-klass \"hello\")\n(strong :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/strong","^14","^15","^16",true],"^V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(use \"hello\")\n(use nil \"hello\")\n\nThese two are made equivalent at compile time\n(use {:onClick f} \"hello\")\n(use #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(use :#the-id.klass.other-klass \"hello\")\n(use :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/use","^14","^15","^16",true],"~$solidcolor",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(solidcolor \"hello\")\n(solidcolor nil \"hello\")\n\nThese two are made equivalent at compile time\n(solidcolor {:onClick f} \"hello\")\n(solidcolor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(solidcolor :#the-id.klass.other-klass \"hello\")\n(solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/solidcolor","^14","^15","^16",true],"~$fePointLight",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fePointLight \"hello\")\n(fePointLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(fePointLight {:onClick f} \"hello\")\n(fePointLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fePointLight :#the-id.klass.other-klass \"hello\")\n(fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/fePointLight","^14","^15","^16",true],"~$li",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(li \"hello\")\n(li nil \"hello\")\n\nThese two are made equivalent at compile time\n(li {:onClick f} \"hello\")\n(li #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(li :#the-id.klass.other-klass \"hello\")\n(li :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/li","^14","^15","^16",true],"~$dt",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dt \"hello\")\n(dt nil \"hello\")\n\nThese two are made equivalent at compile time\n(dt {:onClick f} \"hello\")\n(dt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dt :#the-id.klass.other-klass \"hello\")\n(dt :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dt","^14","^15","^16",true],"~$feFuncB",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncB \"hello\")\n(feFuncB nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncB {:onClick f} \"hello\")\n(feFuncB #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncB :#the-id.klass.other-klass \"hello\")\n(feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFuncB","^14","^15","^16",true],"~$marker",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(marker \"hello\")\n(marker nil \"hello\")\n\nThese two are made equivalent at compile time\n(marker {:onClick f} \"hello\")\n(marker #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(marker :#the-id.klass.other-klass \"hello\")\n(marker :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/marker","^14","^15","^16",true],"~$feComponentTransfer",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComponentTransfer \"hello\")\n(feComponentTransfer nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComponentTransfer {:onClick f} \"hello\")\n(feComponentTransfer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComponentTransfer :#the-id.klass.other-klass \"hello\")\n(feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feComponentTransfer","^14","^15","^16",true],"~$td",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(td \"hello\")\n(td nil \"hello\")\n\nThese two are made equivalent at compile time\n(td {:onClick f} \"hello\")\n(td #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(td :#the-id.klass.other-klass \"hello\")\n(td :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/td","^14","^15","^16",true],"~$tr",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tr \"hello\")\n(tr nil \"hello\")\n\nThese two are made equivalent at compile time\n(tr {:onClick f} \"hello\")\n(tr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tr :#the-id.klass.other-klass \"hello\")\n(tr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tr","^14","^15","^16",true],"~$circle",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(circle \"hello\")\n(circle nil \"hello\")\n\nThese two are made equivalent at compile time\n(circle {:onClick f} \"hello\")\n(circle #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(circle :#the-id.klass.other-klass \"hello\")\n(circle :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/circle","^14","^15","^16",true],"~$section",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(section \"hello\")\n(section nil \"hello\")\n\nThese two are made equivalent at compile time\n(section {:onClick f} \"hello\")\n(section #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(section :#the-id.klass.other-klass \"hello\")\n(section :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/section","^14","^15","^16",true],"~$feDropShadow",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDropShadow \"hello\")\n(feDropShadow nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDropShadow {:onClick f} \"hello\")\n(feDropShadow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDropShadow :#the-id.klass.other-klass \"hello\")\n(feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feDropShadow","^14","^15","^16",true],"~$th",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(th \"hello\")\n(th nil \"hello\")\n\nThese two are made equivalent at compile time\n(th {:onClick f} \"hello\")\n(th #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(th :#the-id.klass.other-klass \"hello\")\n(th :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/th","^14","^15","^16",true],"^W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(time \"hello\")\n(time nil \"hello\")\n\nThese two are made equivalent at compile time\n(time {:onClick f} \"hello\")\n(time #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(time :#the-id.klass.other-klass \"hello\")\n(time :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/time","^14","^15","^16",true],"~$optgroup",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(optgroup \"hello\")\n(optgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(optgroup {:onClick f} \"hello\")\n(optgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(optgroup :#the-id.klass.other-klass \"hello\")\n(optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/optgroup","^14","^15","^16",true],"~$iframe",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(iframe \"hello\")\n(iframe nil \"hello\")\n\nThese two are made equivalent at compile time\n(iframe {:onClick f} \"hello\")\n(iframe #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(iframe :#the-id.klass.other-klass \"hello\")\n(iframe :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/iframe","^14","^15","^16",true],"~$color-profile",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(color-profile \"hello\")\n(color-profile nil \"hello\")\n\nThese two are made equivalent at compile time\n(color-profile {:onClick f} \"hello\")\n(color-profile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(color-profile :#the-id.klass.other-klass \"hello\")\n(color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/color-profile","^14","^15","^16",true],"~$legend",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(legend \"hello\")\n(legend nil \"hello\")\n\nThese two are made equivalent at compile time\n(legend {:onClick f} \"hello\")\n(legend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(legend :#the-id.klass.other-klass \"hello\")\n(legend :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/legend","^14","^15","^16",true],"~$em",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(em \"hello\")\n(em nil \"hello\")\n\nThese two are made equivalent at compile time\n(em {:onClick f} \"hello\")\n(em #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(em :#the-id.klass.other-klass \"hello\")\n(em :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/em","^14","^15","^16",true],"~$kbd",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(kbd \"hello\")\n(kbd nil \"hello\")\n\nThese two are made equivalent at compile time\n(kbd {:onClick f} \"hello\")\n(kbd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(kbd :#the-id.klass.other-klass \"hello\")\n(kbd :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/kbd","^14","^15","^16",true],"~$article",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(article \"hello\")\n(article nil \"hello\")\n\nThese two are made equivalent at compile time\n(article {:onClick f} \"hello\")\n(article #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(article :#the-id.klass.other-klass \"hello\")\n(article :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/article","^14","^15","^16",true],"~$animateColor",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateColor \"hello\")\n(animateColor nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateColor {:onClick f} \"hello\")\n(animateColor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateColor :#the-id.klass.other-klass \"hello\")\n(animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/animateColor","^14","^15","^16",true],"~$clipPath",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(clipPath \"hello\")\n(clipPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(clipPath {:onClick f} \"hello\")\n(clipPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(clipPath :#the-id.klass.other-klass \"hello\")\n(clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/clipPath","^14","^15","^16",true],"~$abbr",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(abbr \"hello\")\n(abbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(abbr {:onClick f} \"hello\")\n(abbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(abbr :#the-id.klass.other-klass \"hello\")\n(abbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/abbr","^14","^15","^16",true],"~$altGlyphDef",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphDef \"hello\")\n(altGlyphDef nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphDef {:onClick f} \"hello\")\n(altGlyphDef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphDef :#the-id.klass.other-klass \"hello\")\n(altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/altGlyphDef","^14","^15","^16",true],"~$meshrow",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshrow \"hello\")\n(meshrow nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshrow {:onClick f} \"hello\")\n(meshrow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshrow :#the-id.klass.other-klass \"hello\")\n(meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meshrow","^14","^15","^16",true],"~$cursor",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cursor \"hello\")\n(cursor nil \"hello\")\n\nThese two are made equivalent at compile time\n(cursor {:onClick f} \"hello\")\n(cursor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cursor :#the-id.klass.other-klass \"hello\")\n(cursor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/cursor","^14","^15","^16",true],"~$animate",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animate \"hello\")\n(animate nil \"hello\")\n\nThese two are made equivalent at compile time\n(animate {:onClick f} \"hello\")\n(animate #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animate :#the-id.klass.other-klass \"hello\")\n(animate :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/animate","^14","^15","^16",true],"~$source",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(source \"hello\")\n(source nil \"hello\")\n\nThese two are made equivalent at compile time\n(source {:onClick f} \"hello\")\n(source #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(source :#the-id.klass.other-klass \"hello\")\n(source :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/source","^14","^15","^16",true],"~$output",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(output \"hello\")\n(output nil \"hello\")\n\nThese two are made equivalent at compile time\n(output {:onClick f} \"hello\")\n(output #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(output :#the-id.klass.other-klass \"hello\")\n(output :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/output","^14","^15","^16",true],"~$font-face",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face \"hello\")\n(font-face nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face {:onClick f} \"hello\")\n(font-face #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face :#the-id.klass.other-klass \"hello\")\n(font-face :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face","^14","^15","^16",true],"~$feMergeNode",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMergeNode \"hello\")\n(feMergeNode nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMergeNode {:onClick f} \"hello\")\n(feMergeNode #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMergeNode :#the-id.klass.other-klass \"hello\")\n(feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feMergeNode","^14","^15","^16",true],"~$feSpotLight",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpotLight \"hello\")\n(feSpotLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpotLight {:onClick f} \"hello\")\n(feSpotLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpotLight :#the-id.klass.other-klass \"hello\")\n(feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feSpotLight","^14","^15","^16",true],"~$header",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(header \"hello\")\n(header nil \"hello\")\n\nThese two are made equivalent at compile time\n(header {:onClick f} \"hello\")\n(header #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(header :#the-id.klass.other-klass \"hello\")\n(header :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/header","^14","^15","^16",true],"~$gen-client-dom-fns",["^ ","^[",["^10",[["~$create-element-sym"]]],"^8",135,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/gen-client-dom-fns","^14","^15","^16",true],"~$datalist",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(datalist \"hello\")\n(datalist nil \"hello\")\n\nThese two are made equivalent at compile time\n(datalist {:onClick f} \"hello\")\n(datalist #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(datalist :#the-id.klass.other-klass \"hello\")\n(datalist :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/datalist","^14","^15","^16",true],"~$tfoot",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tfoot \"hello\")\n(tfoot nil \"hello\")\n\nThese two are made equivalent at compile time\n(tfoot {:onClick f} \"hello\")\n(tfoot #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tfoot :#the-id.klass.other-klass \"hello\")\n(tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tfoot","^14","^15","^16",true],"~$s",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(s \"hello\")\n(s nil \"hello\")\n\nThese two are made equivalent at compile time\n(s {:onClick f} \"hello\")\n(s #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(s :#the-id.klass.other-klass \"hello\")\n(s :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/s","^14","^15","^16",true],"~$hatch",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatch \"hello\")\n(hatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatch {:onClick f} \"hello\")\n(hatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatch :#the-id.klass.other-klass \"hello\")\n(hatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/hatch","^14","^15","^16",true],"~$ins",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ins \"hello\")\n(ins nil \"hello\")\n\nThese two are made equivalent at compile time\n(ins {:onClick f} \"hello\")\n(ins #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ins :#the-id.klass.other-klass \"hello\")\n(ins :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ins","^14","^15","^16",true],"~$footer",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(footer \"hello\")\n(footer nil \"hello\")\n\nThese two are made equivalent at compile time\n(footer {:onClick f} \"hello\")\n(footer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(footer :#the-id.klass.other-klass \"hello\")\n(footer :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/footer","^14","^15","^16",true],"~$mpath",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mpath \"hello\")\n(mpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(mpath {:onClick f} \"hello\")\n(mpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mpath :#the-id.klass.other-klass \"hello\")\n(mpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/mpath","^14","^15","^16",true],"~$title",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(title \"hello\")\n(title nil \"hello\")\n\nThese two are made equivalent at compile time\n(title {:onClick f} \"hello\")\n(title #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(title :#the-id.klass.other-klass \"hello\")\n(title :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/title","^14","^15","^16",true],"~$h5",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h5 \"hello\")\n(h5 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h5 {:onClick f} \"hello\")\n(h5 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h5 :#the-id.klass.other-klass \"hello\")\n(h5 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h5","^14","^15","^16",true],"~$meshgradient",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshgradient \"hello\")\n(meshgradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshgradient {:onClick f} \"hello\")\n(meshgradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshgradient :#the-id.klass.other-klass \"hello\")\n(meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meshgradient","^14","^15","^16",true],"~$canvas",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(canvas \"hello\")\n(canvas nil \"hello\")\n\nThese two are made equivalent at compile time\n(canvas {:onClick f} \"hello\")\n(canvas #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(canvas :#the-id.klass.other-klass \"hello\")\n(canvas :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/canvas","^14","^15","^16",true],"~$param",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(param \"hello\")\n(param nil \"hello\")\n\nThese two are made equivalent at compile time\n(param {:onClick f} \"hello\")\n(param #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(param :#the-id.klass.other-klass \"hello\")\n(param :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/param","^14","^15","^16",true],"~$font",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font \"hello\")\n(font nil \"hello\")\n\nThese two are made equivalent at compile time\n(font {:onClick f} \"hello\")\n(font #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font :#the-id.klass.other-klass \"hello\")\n(font :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font","^14","^15","^16",true],"~$div",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(div \"hello\")\n(div nil \"hello\")\n\nThese two are made equivalent at compile time\n(div {:onClick f} \"hello\")\n(div #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(div :#the-id.klass.other-klass \"hello\")\n(div :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/div","^14","^15","^16",true],"~$option",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(option \"hello\")\n(option nil \"hello\")\n\nThese two are made equivalent at compile time\n(option {:onClick f} \"hello\")\n(option #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(option :#the-id.klass.other-klass \"hello\")\n(option :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/option","^14","^15","^16",true],"~$feFlood",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFlood \"hello\")\n(feFlood nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFlood {:onClick f} \"hello\")\n(feFlood #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFlood :#the-id.klass.other-klass \"hello\")\n(feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFlood","^14","^15","^16",true],"~$summary",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(summary \"hello\")\n(summary nil \"hello\")\n\nThese two are made equivalent at compile time\n(summary {:onClick f} \"hello\")\n(summary #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(summary :#the-id.klass.other-klass \"hello\")\n(summary :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/summary","^14","^15","^16",true],"~$feMorphology",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMorphology \"hello\")\n(feMorphology nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMorphology {:onClick f} \"hello\")\n(feMorphology #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMorphology :#the-id.klass.other-klass \"hello\")\n(feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feMorphology","^14","^15","^16",true],"~$samp",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(samp \"hello\")\n(samp nil \"hello\")\n\nThese two are made equivalent at compile time\n(samp {:onClick f} \"hello\")\n(samp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(samp :#the-id.klass.other-klass \"hello\")\n(samp :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/samp","^14","^15","^16",true],"~$glyphRef",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyphRef \"hello\")\n(glyphRef nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyphRef {:onClick f} \"hello\")\n(glyphRef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyphRef :#the-id.klass.other-klass \"hello\")\n(glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/glyphRef","^14","^15","^16",true],"~$small",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(small \"hello\")\n(small nil \"hello\")\n\nThese two are made equivalent at compile time\n(small {:onClick f} \"hello\")\n(small #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(small :#the-id.klass.other-klass \"hello\")\n(small :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/small","^14","^15","^16",true],"~$style",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(style \"hello\")\n(style nil \"hello\")\n\nThese two are made equivalent at compile time\n(style {:onClick f} \"hello\")\n(style #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(style :#the-id.klass.other-klass \"hello\")\n(style :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/style","^14","^15","^16",true],"~$textarea",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textarea \"hello\")\n(textarea nil \"hello\")\n\nThese two are made equivalent at compile time\n(textarea {:onClick f} \"hello\")\n(textarea #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textarea :#the-id.klass.other-klass \"hello\")\n(textarea :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/textarea","^14","^15","^16",true],"~$feGaussianBlur",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feGaussianBlur \"hello\")\n(feGaussianBlur nil \"hello\")\n\nThese two are made equivalent at compile time\n(feGaussianBlur {:onClick f} \"hello\")\n(feGaussianBlur #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feGaussianBlur :#the-id.klass.other-klass \"hello\")\n(feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feGaussianBlur","^14","^15","^16",true],"~$h4",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h4 \"hello\")\n(h4 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h4 {:onClick f} \"hello\")\n(h4 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h4 :#the-id.klass.other-klass \"hello\")\n(h4 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h4","^14","^15","^16",true],"~$head",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(head \"hello\")\n(head nil \"hello\")\n\nThese two are made equivalent at compile time\n(head {:onClick f} \"hello\")\n(head #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(head :#the-id.klass.other-klass \"hello\")\n(head :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/head","^14","^15","^16",true],"~$g",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(g \"hello\")\n(g nil \"hello\")\n\nThese two are made equivalent at compile time\n(g {:onClick f} \"hello\")\n(g #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(g :#the-id.klass.other-klass \"hello\")\n(g :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/g","^14","^15","^16",true],"~$missing-glyph",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(missing-glyph \"hello\")\n(missing-glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(missing-glyph {:onClick f} \"hello\")\n(missing-glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(missing-glyph :#the-id.klass.other-klass \"hello\")\n(missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/missing-glyph","^14","^15","^16",true],"~$stop",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(stop \"hello\")\n(stop nil \"hello\")\n\nThese two are made equivalent at compile time\n(stop {:onClick f} \"hello\")\n(stop #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(stop :#the-id.klass.other-klass \"hello\")\n(stop :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/stop","^14","^15","^16",true],"~$feDiffuseLighting",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDiffuseLighting \"hello\")\n(feDiffuseLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDiffuseLighting {:onClick f} \"hello\")\n(feDiffuseLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n(feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feDiffuseLighting","^14","^15","^16",true],"^X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(filter \"hello\")\n(filter nil \"hello\")\n\nThese two are made equivalent at compile time\n(filter {:onClick f} \"hello\")\n(filter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(filter :#the-id.klass.other-klass \"hello\")\n(filter :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/filter","^14","^15","^16",true],"~$feComposite",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComposite \"hello\")\n(feComposite nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComposite {:onClick f} \"hello\")\n(feComposite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComposite :#the-id.klass.other-klass \"hello\")\n(feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feComposite","^14","^15","^16",true],"~$mesh",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mesh \"hello\")\n(mesh nil \"hello\")\n\nThese two are made equivalent at compile time\n(mesh {:onClick f} \"hello\")\n(mesh #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mesh :#the-id.klass.other-klass \"hello\")\n(mesh :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/mesh","^14","^15","^16",true],"~$var",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(var \"hello\")\n(var nil \"hello\")\n\nThese two are made equivalent at compile time\n(var {:onClick f} \"hello\")\n(var #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(var :#the-id.klass.other-klass \"hello\")\n(var :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/var","^14","^15","^16",true],"~$tspan",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tspan \"hello\")\n(tspan nil \"hello\")\n\nThese two are made equivalent at compile time\n(tspan {:onClick f} \"hello\")\n(tspan #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tspan :#the-id.klass.other-klass \"hello\")\n(tspan :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tspan","^14","^15","^16",true],"~$ol",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ol \"hello\")\n(ol nil \"hello\")\n\nThese two are made equivalent at compile time\n(ol {:onClick f} \"hello\")\n(ol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ol :#the-id.klass.other-klass \"hello\")\n(ol :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ol","^14","^15","^16",true],"~$details",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(details \"hello\")\n(details nil \"hello\")\n\nThese two are made equivalent at compile time\n(details {:onClick f} \"hello\")\n(details #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(details :#the-id.klass.other-klass \"hello\")\n(details :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/details","^14","^15","^16",true],"~$line",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(line \"hello\")\n(line nil \"hello\")\n\nThese two are made equivalent at compile time\n(line {:onClick f} \"hello\")\n(line #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(line :#the-id.klass.other-klass \"hello\")\n(line :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/line","^14","^15","^16",true],"~$col",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(col \"hello\")\n(col nil \"hello\")\n\nThese two are made equivalent at compile time\n(col {:onClick f} \"hello\")\n(col #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(col :#the-id.klass.other-klass \"hello\")\n(col :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/col","^14","^15","^16",true],"~$label",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(label \"hello\")\n(label nil \"hello\")\n\nThese two are made equivalent at compile time\n(label {:onClick f} \"hello\")\n(label #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(label :#the-id.klass.other-klass \"hello\")\n(label :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/label","^14","^15","^16",true],"~$picture",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(picture \"hello\")\n(picture nil \"hello\")\n\nThese two are made equivalent at compile time\n(picture {:onClick f} \"hello\")\n(picture #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(picture :#the-id.klass.other-klass \"hello\")\n(picture :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/picture","^14","^15","^16",true],"~$rt",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rt \"hello\")\n(rt nil \"hello\")\n\nThese two are made equivalent at compile time\n(rt {:onClick f} \"hello\")\n(rt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rt :#the-id.klass.other-klass \"hello\")\n(rt :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/rt","^14","^15","^16",true],"~$h6",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h6 \"hello\")\n(h6 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h6 {:onClick f} \"hello\")\n(h6 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h6 :#the-id.klass.other-klass \"hello\")\n(h6 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h6","^14","^15","^16",true],"~$vkern",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(vkern \"hello\")\n(vkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(vkern {:onClick f} \"hello\")\n(vkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(vkern :#the-id.klass.other-klass \"hello\")\n(vkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/vkern","^14","^15","^16",true],"~$link",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(link \"hello\")\n(link nil \"hello\")\n\nThese two are made equivalent at compile time\n(link {:onClick f} \"hello\")\n(link #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(link :#the-id.klass.other-klass \"hello\")\n(link :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/link","^14","^15","^16",true],"~$defs",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(defs \"hello\")\n(defs nil \"hello\")\n\nThese two are made equivalent at compile time\n(defs {:onClick f} \"hello\")\n(defs #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(defs :#the-id.klass.other-klass \"hello\")\n(defs :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/defs","^14","^15","^16",true],"~$glyph",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyph \"hello\")\n(glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyph {:onClick f} \"hello\")\n(glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyph :#the-id.klass.other-klass \"hello\")\n(glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/glyph","^14","^15","^16",true],"~$colgroup",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(colgroup \"hello\")\n(colgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(colgroup {:onClick f} \"hello\")\n(colgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(colgroup :#the-id.klass.other-klass \"hello\")\n(colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/colgroup","^14","^15","^16",true],"~$meter",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meter \"hello\")\n(meter nil \"hello\")\n\nThese two are made equivalent at compile time\n(meter {:onClick f} \"hello\")\n(meter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meter :#the-id.klass.other-klass \"hello\")\n(meter :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meter","^14","^15","^16",true],"~$bdo",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdo \"hello\")\n(bdo nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdo {:onClick f} \"hello\")\n(bdo #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdo :#the-id.klass.other-klass \"hello\")\n(bdo :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/bdo","^14","^15","^16",true],"~$feImage",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feImage \"hello\")\n(feImage nil \"hello\")\n\nThese two are made equivalent at compile time\n(feImage {:onClick f} \"hello\")\n(feImage #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feImage :#the-id.klass.other-klass \"hello\")\n(feImage :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feImage","^14","^15","^16",true],"~$b",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(b \"hello\")\n(b nil \"hello\")\n\nThese two are made equivalent at compile time\n(b {:onClick f} \"hello\")\n(b #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(b :#the-id.klass.other-klass \"hello\")\n(b :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/b","^14","^15","^16",true],"~$svg",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(svg \"hello\")\n(svg nil \"hello\")\n\nThese two are made equivalent at compile time\n(svg {:onClick f} \"hello\")\n(svg #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(svg :#the-id.klass.other-klass \"hello\")\n(svg :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/svg","^14","^15","^16",true],"~$feTile",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTile \"hello\")\n(feTile nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTile {:onClick f} \"hello\")\n(feTile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTile :#the-id.klass.other-klass \"hello\")\n(feTile :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feTile","^14","^15","^16",true],"~$ellipse",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ellipse \"hello\")\n(ellipse nil \"hello\")\n\nThese two are made equivalent at compile time\n(ellipse {:onClick f} \"hello\")\n(ellipse #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ellipse :#the-id.klass.other-klass \"hello\")\n(ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ellipse","^14","^15","^16",true],"~$code",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(code \"hello\")\n(code nil \"hello\")\n\nThese two are made equivalent at compile time\n(code {:onClick f} \"hello\")\n(code #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(code :#the-id.klass.other-klass \"hello\")\n(code :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/code","^14","^15","^16",true],"~$dialog",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dialog \"hello\")\n(dialog nil \"hello\")\n\nThese two are made equivalent at compile time\n(dialog {:onClick f} \"hello\")\n(dialog #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dialog :#the-id.klass.other-klass \"hello\")\n(dialog :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dialog","^14","^15","^16",true],"~$linearGradient",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(linearGradient \"hello\")\n(linearGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(linearGradient {:onClick f} \"hello\")\n(linearGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(linearGradient :#the-id.klass.other-klass \"hello\")\n(linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/linearGradient","^14","^15","^16",true],"~$discard",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(discard \"hello\")\n(discard nil \"hello\")\n\nThese two are made equivalent at compile time\n(discard {:onClick f} \"hello\")\n(discard #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(discard :#the-id.klass.other-klass \"hello\")\n(discard :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/discard","^14","^15","^16",true],"~$font-face-src",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-src \"hello\")\n(font-face-src nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-src {:onClick f} \"hello\")\n(font-face-src #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-src :#the-id.klass.other-klass \"hello\")\n(font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face-src","^14","^15","^16",true],"~$noscript",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(noscript \"hello\")\n(noscript nil \"hello\")\n\nThese two are made equivalent at compile time\n(noscript {:onClick f} \"hello\")\n(noscript #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(noscript :#the-id.klass.other-klass \"hello\")\n(noscript :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/noscript","^14","^15","^16",true],"~$animateTransform",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateTransform \"hello\")\n(animateTransform nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateTransform {:onClick f} \"hello\")\n(animateTransform #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateTransform :#the-id.klass.other-klass \"hello\")\n(animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/animateTransform","^14","^15","^16",true],"~$feColorMatrix",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feColorMatrix \"hello\")\n(feColorMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feColorMatrix {:onClick f} \"hello\")\n(feColorMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feColorMatrix :#the-id.klass.other-klass \"hello\")\n(feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feColorMatrix","^14","^15","^16",true],"~$h2",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h2 \"hello\")\n(h2 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h2 {:onClick f} \"hello\")\n(h2 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h2 :#the-id.klass.other-klass \"hello\")\n(h2 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h2","^14","^15","^16",true],"~$area",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(area \"hello\")\n(area nil \"hello\")\n\nThese two are made equivalent at compile time\n(area {:onClick f} \"hello\")\n(area #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(area :#the-id.klass.other-klass \"hello\")\n(area :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/area","^14","^15","^16",true],"~$br",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(br \"hello\")\n(br nil \"hello\")\n\nThese two are made equivalent at compile time\n(br {:onClick f} \"hello\")\n(br #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(br :#the-id.klass.other-klass \"hello\")\n(br :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/br","^14","^15","^16",true],"~$image",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(image \"hello\")\n(image nil \"hello\")\n\nThese two are made equivalent at compile time\n(image {:onClick f} \"hello\")\n(image #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(image :#the-id.klass.other-klass \"hello\")\n(image :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/image","^14","^15","^16",true]],"^12","^15","~:op","^14","~:imports",null,"~:requires",["^ ","^?","^@","~$goog.dom","^9Y","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","^B","^B","~$gobj","~$goog.object","~$goog","^:4","^:3","^:3","~$com.fulcrologic.fulcro.dom-common","^:5","~$cljsjs.react","^:6","~$cljsjs.react.dom","^:7","~$cdom","^:5","~$gdom","^9Y","~$s","^@","^:1","^:1","^9[","^9[","~$str","~$clojure.string","^:;","^:;","^@","^@"],"~:seen",["^O",["~:require","~:require-macros"]],"~:uses",null,"^:>",["^ ","^?","^@","^9Z","^9[","^:0","^:1","^B","^B","~$s","^@","^:1","^:1","^9[","^9[","^@","^@","^15","^15"],"~:form",["^10",["~$ns","^15","Client-side DOM macros and functions. For isomorphic (server) support, see also com.fulcrologic.fulcro.dom-server",["^10",["~:refer-clojure","~:exclude",["^Q","^T","^W","^S","^R","^V","^P","^U","^X"]]],["^10",["^:>",["^15"]]],["^10",["^:=",["^?","~:as","~$s"],["^:;","^:D","^::"],["^:1","^:D","^:0"],["^:6"],["^:7"],["^:3","^:D","^:2"],["^9Y","^:D","^:9"],["^:5","^:D","^:8"],["^9[","^:D","^9Z"]]]]],"~:flags",["^ ","^:>",["^O",[]],"^:=",["^O",[]]],"~:js-deps",["^ "],"~:deps",["^:4","^B","^@","^:;","^:1","^:6","^:7","^:3","^9Y","^:5","^9["]],"^14","^15","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/dom.cljs"],"~:compiled-at",1705355275901,"~:resource-name","com/fulcrologic/fulcro/dom.cljs","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.dom\n  \"Client-side DOM macros and functions. For isomorphic (server) support, see also com.fulcrologic.fulcro.dom-server\"\n  (:refer-clojure :exclude [map meta time mask select use set symbol filter])\n  (:require-macros [com.fulcrologic.fulcro.dom])\n  (:require\n    [clojure.spec.alpha :as s]\n    [clojure.string :as str]\n    [com.fulcrologic.fulcro.components :as comp]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.object :as gobj]\n    [goog.dom :as gdom]\n    [com.fulcrologic.fulcro.dom-common :as cdom]\n    [taoensso.timbre :as log]))\n\n(declare a abbr address altGlyph altGlyphDef altGlyphItem animate animateColor animateMotion animateTransform area\n  article aside audio b base bdi bdo big blockquote body br button canvas caption circle cite clipPath code\n  col colgroup color-profile cursor data datalist dd defs del desc details dfn dialog discard div dl dt\n  ellipse em embed feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting\n  feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur\n  feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence\n  fieldset figcaption figure filter font font-face font-face-format font-face-name font-face-src font-face-uri\n  footer foreignObject form g glyph glyphRef h1 h2 h3 h4 h5 h6 hatch hatchpath head header hkern hr html\n  i iframe image img input ins kbd keygen label legend li line linearGradient link main map mark marker mask\n  menu menuitem mesh meshgradient meshpatch meshrow meta metadata meter missing-glyph\n  mpath nav noscript object ol optgroup option output p param path pattern picture polygon polyline pre progress q radialGradient\n  rect rp rt ruby s samp script section select set small solidcolor source span stop strong style sub summary\n  sup svg switch symbol table tbody td text textPath textarea tfoot th thead time title tr track tref tspan\n  u ul unknown use var video view vkern wbr)\n\n(def ^{:private true} element-marker\n  (-> (js/React.createElement \"div\" nil)\n    (gobj/get \"$$typeof\")))\n\n(defn element? \"Returns true if the given arg is a react element.\"\n  [x]\n  (and (object? x) (= element-marker (gobj/get x \"$$typeof\"))))\n\n(s/def ::dom-element-args\n  (s/cat\n    :css (s/? keyword?)\n    :attrs (s/? (s/or\n                  :nil nil?\n                  :map #(and (map? %) (not (element? %)))\n                  :js-object #(and (object? %) (not (element? %)))))\n    :children (s/* (s/or\n                     :string string?\n                     :number number?\n                     :collection #(or (vector? %) (seq? %) (array? %))\n                     :nil nil?\n                     :element element?))))\n\n(defn render\n  \"Equivalent to React.render\"\n  [component el]\n  (js/ReactDOM.render component el))\n\n(defn render-to-str\n  \"Equivalent to React.renderToString. NOTE: You must require cljsjs.react.dom.server to use this function.\"\n  [c]\n  (js/ReactDOMServer.renderToString c))\n\n(defn node\n  \"Returns the dom node associated with a component's React ref.\"\n  ([component]\n   (js/ReactDOM.findDOMNode component))\n  ([component name]\n   (some-> (.-refs component) (gobj/get name) (js/ReactDOM.findDOMNode))))\n\n(defn create-element\n  \"Create a DOM element for which there exists no corresponding function.\n   Useful to create DOM elements not included in React.DOM. Equivalent\n   to calling `js/React.createElement`\"\n  ([tag]\n   (create-element tag nil))\n  ([tag opts]\n   (js/React.createElement tag opts))\n  ([tag opts & children]\n   (js/React.createElement tag opts children)))\n\n(defn convert-props\n  \"Given props, which can be nil, a js-obj or a clj map: returns a js object.\"\n  [props]\n  (cond\n    (nil? props)\n    #js {}\n    (map? props)\n    (clj->js props)\n    :else\n    props))\n\n;; called from macro\n;; react v16 is really picky, the old direct .children prop trick no longer works\n(defn macro-create-element*\n  \"Used internally by the DOM element generation.\"\n  [arr]\n  {:pre [(array? arr)]}\n  (.apply js/React.createElement nil arr))\n\n(defn- update-state\n  \"Updates the state of the wrapped input element.\"\n  [component next-props value]\n  (let [on-change  (gobj/getValueByKeys component \"state\" \"onChange\")\n        next-state #js {}\n        inputRef   (gobj/get next-props \"inputRef\")]\n    (gobj/extend next-state next-props #js {:onChange on-change})\n    (gobj/set next-state \"value\" value)\n    (when inputRef\n      (gobj/remove next-state \"inputRef\")\n      (gobj/set next-state \"ref\" inputRef))\n    (.setState component next-state)))\n\n(defonce form-elements? #{\"input\" \"select\" \"option\" \"textarea\"})\n\n(defn is-form-element? [element]\n  (let [tag (.-tagName element)]\n    (and tag (form-elements? (str/lower-case tag)))))\n\n(defn wrap-form-element [element]\n  (let [ctor (fn [props]\n               (this-as this\n                 (set! (.-state this)\n                   (let [state #js {:ref (gobj/get props \"inputRef\")}]\n                     (->> #js {:onChange (goog/bind (gobj/get this \"onChange\") this)}\n                       (gobj/extend state props))\n                     (gobj/remove state \"inputRef\")\n                     state))\n                 (.apply js/React.Component this (js-arguments))))]\n    (set! (.-displayName ctor) (str \"wrapped-\" element))\n    (goog.inherits ctor js/React.Component)\n    (specify! (.-prototype ctor)\n      Object\n      (onChange [this event]\n        (when-let [handler (.-onChange (.-props this))]\n          (handler event)\n          (update-state\n            this (.-props this)\n            (gobj/getValueByKeys event \"target\" \"value\"))))\n\n      (componentWillReceiveProps [this new-props]\n        (let [state-value   (gobj/getValueByKeys this \"state\" \"value\")\n              this-node     (js/ReactDOM.findDOMNode this)\n              value-node    (if (is-form-element? this-node)\n                              this-node\n                              (gdom/findNode this-node #(is-form-element? %)))\n              element-value (gobj/get value-node \"value\")]\n          (when goog.DEBUG\n            (when (and state-value element-value (not= (type state-value) (type element-value)))\n              (log/warn \"There is a mismatch for the data type of the value on an input with value \" element-value\n                \". This will cause the input to miss refreshes. In general you should force the :value of an input to\n                be a string since that is how values are stored on most real DOM elements.\")))\n          (if (not= state-value element-value)\n            (update-state this new-props element-value)\n            (update-state this new-props (gobj/get new-props \"value\")))))\n\n      (render [this]\n        (js/React.createElement element (.-state this))))\n    (let [real-factory (js/React.createFactory ctor)]\n      (fn [props & children]\n        (if-let [r (gobj/get props \"ref\")]\n          (if (string? r)\n            (apply real-factory props children)\n            (let [p #js{}]\n              (gobj/extend p props)\n              (gobj/set p \"inputRef\" r)\n              (gobj/remove p \"ref\")\n              (apply real-factory p children)))\n          (apply real-factory props children))))))\n\n\n(def wrapped-input \"Low-level form input, with no syntactic sugar. Used internally by DOM macros\" (wrap-form-element \"input\"))\n(def wrapped-textarea \"Low-level form input, with no syntactic sugar. Used internally by DOM macros\" (wrap-form-element \"textarea\"))\n(def wrapped-option \"Low-level form input, with no syntactic sugar. Used internally by DOM macros\" (wrap-form-element \"option\"))\n(def wrapped-select \"Low-level form input, with no syntactic sugar. Used internally by DOM macros\" (wrap-form-element \"select\"))\n\n(defn- arr-append* [arr x]\n  (.push arr x)\n  arr)\n\n(defn- arr-append [arr tail]\n  (reduce arr-append* arr (comp/force-children tail)))\n\n(defn macro-create-wrapped-form-element\n  \"Used internally by element generation.\"\n  [opts]\n  (let [tag      (aget opts 0)\n        props    (aget opts 1)\n        children (.splice opts 2)]\n    (case tag\n      \"input\" (apply wrapped-input props children)\n      \"textarea\" (apply wrapped-textarea props children)\n      \"select\" (apply wrapped-select props children)\n      \"option\" (apply wrapped-option props children))))\n\n\n;; fallback if the macro didn't do this\n(defn macro-create-element\n  \"Runtime interpretation of props. Used internally by element generation when the macro cannot expand the element at compile time.\"\n  ([type args] (macro-create-element type args nil))\n  ([type args csskw]\n   (let [[head & tail] args\n         f (if (form-elements? type)\n             macro-create-wrapped-form-element\n             macro-create-element*)]\n     (cond\n       (nil? head)\n       (f (doto #js [type (cdom/add-kwprops-to-props #js {} csskw)]\n            (arr-append tail)))\n\n       (element? head)\n       (f (doto #js [type (cdom/add-kwprops-to-props #js {} csskw)]\n            (arr-append args)))\n\n       (object? head)\n       (f (doto #js [type (cdom/add-kwprops-to-props head csskw)]\n            (arr-append tail)))\n\n       (map? head)\n       (f (doto #js [type (clj->js (cdom/add-kwprops-to-props (cdom/interpret-classes head) csskw))]\n            (arr-append tail)))\n\n       :else\n       (f (doto #js [type (cdom/add-kwprops-to-props #js {} csskw)]\n            (arr-append args)))))))\n\n(com.fulcrologic.fulcro.dom/gen-client-dom-fns com.fulcrologic.fulcro.dom/macro-create-element)\n","~:reader-features",["^O",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.dom/element-marker","js/React.createElement","G__64752","G__64753","goog.object/get","com.fulcrologic.fulcro.dom/element?","x","cljs.core/object?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/keyword?","cljs.spec.alpha/or-spec-impl","p1__64754#","p1__64755#","cljs.core/nil?","cljs.core/map?","cljs.spec.alpha/rep-impl","p1__64756#","cljs.core/string?","cljs.core/number?","cljs.core/vector?","cljs.core/seq?","cljs.core/array?","com.fulcrologic.fulcro.dom/render","component","el","js/ReactDOM.render","com.fulcrologic.fulcro.dom/render-to-str","c","js/ReactDOMServer.renderToString","var_args","G__64785","com.fulcrologic.fulcro.dom/node","js/Error","js/ReactDOM.findDOMNode","name","G__64786","G__64796","com.fulcrologic.fulcro.dom/create-element","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq64793","G__64794","cljs.core/first","cljs.core/next","G__64795","self__4717__auto__","tag","com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$2","opts","children","com.fulcrologic.fulcro.dom/convert-props","props","cljs.core/clj->js","com.fulcrologic.fulcro.dom/macro-create-element*","arr","com.fulcrologic.fulcro.dom/update-state","next-props","value","on-change","goog.object/getValueByKeys","next-state","inputRef","G__64805","G__64806","G__64807","goog.object/extend","goog.object/set","goog.object/remove","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.dom","js/com.fulcrologic.fulcro.dom.form-elements?","com.fulcrologic.fulcro.dom/form-elements?","com.fulcrologic.fulcro.dom/is-form-element?","element","and__4120__auto__","G__64809","clojure.string/lower-case","com.fulcrologic.fulcro.dom/wrap-form-element","ctor","this","state","G__64819","G__64820","goog/bind","G__64816","G__64817","G__64818","js/React.Component","js/goog.inherits","x64822","event","temp__5804__auto__","handler","new-props","state-value","this-node","value-node","G__64825","G__64826","p1__64813#","goog.dom/findNode","element-value","js/goog.DEBUG","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/type","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","real-factory","js/React.createFactory","temp__5802__auto__","r","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","p","com.fulcrologic.fulcro.dom/wrapped-input","com.fulcrologic.fulcro.dom/wrapped-textarea","com.fulcrologic.fulcro.dom/wrapped-option","com.fulcrologic.fulcro.dom/wrapped-select","com.fulcrologic.fulcro.dom/arr-append*","com.fulcrologic.fulcro.dom/arr-append","tail","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom/macro-create-wrapped-form-element","G__64831","G__64833","com.fulcrologic.fulcro.dom/macro-create-element","type","args","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","csskw","vec__64834","seq__64835","cljs.core/seq","first__64836","head","f","G__64837","G__64838","com.fulcrologic.fulcro.dom-common/add-kwprops-to-props","G__64839","G__64840","G__64841","G__64842","G__64843","G__64844","com.fulcrologic.fulcro.dom-common/interpret-classes","G__64845","G__64846","com.fulcrologic.fulcro.dom/form","args__4736__auto__","argseq__4737__auto__","conformed-args__63365__auto__","com.fulcrologic.fulcro.algorithms.do-not-use/conform!","map__64852","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","css__63368__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","children__63367__auto__","attrs__63366__auto__","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/second","attrs-value__63369__auto__","or__4131__auto__","cljs.core.into.cljs$core$IFn$_invoke$arity$2","seq64847","self__4718__auto__","com.fulcrologic.fulcro.dom/audio","map__64859","seq64854","com.fulcrologic.fulcro.dom/input","map__64862","seq64861","com.fulcrologic.fulcro.dom/menuitem","map__64872","seq64869","com.fulcrologic.fulcro.dom/radialGradient","map__64886","seq64884","com.fulcrologic.fulcro.dom/feMerge","map__64894","seq64889","com.fulcrologic.fulcro.dom/set","map__64903","seq64900","com.fulcrologic.fulcro.dom/feSpecularLighting","map__64909","seq64907","com.fulcrologic.fulcro.dom/base","map__64916","seq64914","com.fulcrologic.fulcro.dom/h1","map__64922","seq64918","com.fulcrologic.fulcro.dom/feOffset","map__64928","seq64927","com.fulcrologic.fulcro.dom/embed","map__64935","seq64933","com.fulcrologic.fulcro.dom/animateMotion","map__64941","seq64937","com.fulcrologic.fulcro.dom/h3","map__64945","seq64943","com.fulcrologic.fulcro.dom/body","map__64952","seq64950","com.fulcrologic.fulcro.dom/hkern","map__64955","seq64954","com.fulcrologic.fulcro.dom/keygen","map__64966","seq64959","com.fulcrologic.fulcro.dom/font-face-format","map__64970","seq64969","com.fulcrologic.fulcro.dom/feFuncA","map__64980","seq64976","com.fulcrologic.fulcro.dom/progress","map__64983","seq64982","com.fulcrologic.fulcro.dom/main","map__64986","seq64985","com.fulcrologic.fulcro.dom/cite","map__64990","seq64988","com.fulcrologic.fulcro.dom/rect","map__65001","seq64992","com.fulcrologic.fulcro.dom/tref","map__65007","seq65005","com.fulcrologic.fulcro.dom/meshpatch","map__65011","seq65010","com.fulcrologic.fulcro.dom/polyline","map__65014","seq65013","com.fulcrologic.fulcro.dom/metadata","map__65018","seq65016","com.fulcrologic.fulcro.dom/map","map__65021","seq65020","com.fulcrologic.fulcro.dom/object","map__65024","seq65023","com.fulcrologic.fulcro.dom/i","map__65027","seq65026","com.fulcrologic.fulcro.dom/font-face-name","map__65031","seq65029","com.fulcrologic.fulcro.dom/p","map__65034","seq65033","com.fulcrologic.fulcro.dom/feFuncR","map__65037","seq65036","com.fulcrologic.fulcro.dom/hatchpath","map__65041","seq65039","com.fulcrologic.fulcro.dom/altGlyphItem","map__65044","seq65043","com.fulcrologic.fulcro.dom/nav","map__65047","seq65046","com.fulcrologic.fulcro.dom/ruby","map__65050","seq65049","com.fulcrologic.fulcro.dom/switch","map__65053","seq65052","com.fulcrologic.fulcro.dom/a","map__65056","seq65055","com.fulcrologic.fulcro.dom/view","map__65059","seq65058","com.fulcrologic.fulcro.dom/menu","map__65062","seq65061","com.fulcrologic.fulcro.dom/blockquote","map__65065","seq65064","com.fulcrologic.fulcro.dom/img","map__65068","seq65067","com.fulcrologic.fulcro.dom/feFuncG","map__65071","seq65070","com.fulcrologic.fulcro.dom/text","map__65074","seq65073","com.fulcrologic.fulcro.dom/span","map__65077","seq65076","com.fulcrologic.fulcro.dom/track","map__65080","seq65079","com.fulcrologic.fulcro.dom/data","map__65083","seq65082","com.fulcrologic.fulcro.dom/u","map__65086","seq65085","com.fulcrologic.fulcro.dom/dl","map__65089","seq65088","com.fulcrologic.fulcro.dom/select","map__65092","seq65091","com.fulcrologic.fulcro.dom/polygon","map__65095","seq65094","com.fulcrologic.fulcro.dom/pattern","map__65098","seq65097","com.fulcrologic.fulcro.dom/html","map__65101","seq65100","com.fulcrologic.fulcro.dom/foreignObject","map__65104","seq65103","com.fulcrologic.fulcro.dom/thead","map__65107","seq65106","com.fulcrologic.fulcro.dom/path","map__65110","seq65109","com.fulcrologic.fulcro.dom/del","map__65113","seq65112","com.fulcrologic.fulcro.dom/altGlyph","map__65116","seq65115","com.fulcrologic.fulcro.dom/fieldset","map__65119","seq65118","com.fulcrologic.fulcro.dom/aside","map__65122","seq65121","com.fulcrologic.fulcro.dom/feBlend","map__65125","seq65124","com.fulcrologic.fulcro.dom/figure","map__65128","seq65127","com.fulcrologic.fulcro.dom/textPath","map__65131","seq65130","com.fulcrologic.fulcro.dom/figcaption","map__65134","seq65133","com.fulcrologic.fulcro.dom/mask","map__65137","seq65136","com.fulcrologic.fulcro.dom/q","map__65140","seq65139","com.fulcrologic.fulcro.dom/bdi","map__65143","seq65142","com.fulcrologic.fulcro.dom/feDistantLight","map__65146","seq65145","com.fulcrologic.fulcro.dom/video","map__65149","seq65148","com.fulcrologic.fulcro.dom/address","map__65152","seq65151","com.fulcrologic.fulcro.dom/caption","map__65155","seq65154","com.fulcrologic.fulcro.dom/dd","map__65158","seq65157","com.fulcrologic.fulcro.dom/rp","map__65161","seq65160","com.fulcrologic.fulcro.dom/hr","map__65164","seq65163","com.fulcrologic.fulcro.dom/meta","map__65167","seq65166","com.fulcrologic.fulcro.dom/tbody","map__65170","seq65169","com.fulcrologic.fulcro.dom/desc","map__65173","seq65172","com.fulcrologic.fulcro.dom/table","map__65176","seq65175","com.fulcrologic.fulcro.dom/pre","map__65179","seq65178","com.fulcrologic.fulcro.dom/ul","map__65182","seq65181","com.fulcrologic.fulcro.dom/feConvolveMatrix","map__65185","seq65184","com.fulcrologic.fulcro.dom/sup","map__65188","seq65187","com.fulcrologic.fulcro.dom/dfn","map__65191","seq65190","com.fulcrologic.fulcro.dom/sub","map__65194","seq65193","com.fulcrologic.fulcro.dom/mark","map__65197","seq65196","com.fulcrologic.fulcro.dom/feDisplacementMap","map__65200","seq65199","com.fulcrologic.fulcro.dom/unknown","map__65203","seq65202","com.fulcrologic.fulcro.dom/script","map__65206","seq65205","com.fulcrologic.fulcro.dom/feTurbulence","map__65209","seq65208","com.fulcrologic.fulcro.dom/big","map__65212","seq65211","com.fulcrologic.fulcro.dom/button","map__65215","seq65214","com.fulcrologic.fulcro.dom/font-face-uri","map__65218","seq65217","com.fulcrologic.fulcro.dom/wbr","map__65221","seq65220","com.fulcrologic.fulcro.dom/symbol","map__65224","seq65223","com.fulcrologic.fulcro.dom/strong","map__65227","seq65226","com.fulcrologic.fulcro.dom/use","map__65230","seq65229","com.fulcrologic.fulcro.dom/solidcolor","map__65233","seq65232","com.fulcrologic.fulcro.dom/fePointLight","map__65236","seq65235","com.fulcrologic.fulcro.dom/li","map__65239","seq65238","com.fulcrologic.fulcro.dom/dt","map__65242","seq65241","com.fulcrologic.fulcro.dom/feFuncB","map__65245","seq65244","com.fulcrologic.fulcro.dom/marker","map__65248","seq65247","com.fulcrologic.fulcro.dom/feComponentTransfer","map__65251","seq65250","com.fulcrologic.fulcro.dom/td","map__65254","seq65253","com.fulcrologic.fulcro.dom/tr","map__65257","seq65256","com.fulcrologic.fulcro.dom/circle","map__65260","seq65259","com.fulcrologic.fulcro.dom/section","map__65263","seq65262","com.fulcrologic.fulcro.dom/feDropShadow","map__65266","seq65265","com.fulcrologic.fulcro.dom/th","map__65269","seq65268","com.fulcrologic.fulcro.dom/time","map__65272","seq65271","com.fulcrologic.fulcro.dom/optgroup","map__65275","seq65274","com.fulcrologic.fulcro.dom/iframe","map__65278","seq65277","com.fulcrologic.fulcro.dom/color-profile","map__65281","seq65280","com.fulcrologic.fulcro.dom/legend","map__65284","seq65283","com.fulcrologic.fulcro.dom/em","map__65287","seq65286","com.fulcrologic.fulcro.dom/kbd","map__65290","seq65289","com.fulcrologic.fulcro.dom/article","map__65293","seq65292","com.fulcrologic.fulcro.dom/animateColor","map__65296","seq65295","com.fulcrologic.fulcro.dom/clipPath","map__65299","seq65298","com.fulcrologic.fulcro.dom/abbr","map__65302","seq65301","com.fulcrologic.fulcro.dom/altGlyphDef","map__65305","seq65304","com.fulcrologic.fulcro.dom/meshrow","map__65308","seq65307","com.fulcrologic.fulcro.dom/cursor","map__65311","seq65310","com.fulcrologic.fulcro.dom/animate","map__65314","seq65313","com.fulcrologic.fulcro.dom/source","map__65317","seq65316","com.fulcrologic.fulcro.dom/output","map__65320","seq65319","com.fulcrologic.fulcro.dom/font-face","map__65323","seq65322","com.fulcrologic.fulcro.dom/feMergeNode","map__65326","seq65325","com.fulcrologic.fulcro.dom/feSpotLight","map__65329","seq65328","com.fulcrologic.fulcro.dom/header","map__65332","seq65331","com.fulcrologic.fulcro.dom/datalist","map__65335","seq65334","com.fulcrologic.fulcro.dom/tfoot","map__65338","seq65337","com.fulcrologic.fulcro.dom/s","map__65341","seq65340","com.fulcrologic.fulcro.dom/hatch","map__65344","seq65343","com.fulcrologic.fulcro.dom/ins","map__65347","seq65346","com.fulcrologic.fulcro.dom/footer","map__65350","seq65349","com.fulcrologic.fulcro.dom/mpath","map__65353","seq65352","com.fulcrologic.fulcro.dom/title","map__65356","seq65355","com.fulcrologic.fulcro.dom/h5","map__65359","seq65358","com.fulcrologic.fulcro.dom/meshgradient","map__65362","seq65361","com.fulcrologic.fulcro.dom/canvas","map__65365","seq65364","com.fulcrologic.fulcro.dom/param","map__65368","seq65367","com.fulcrologic.fulcro.dom/font","map__65371","seq65370","com.fulcrologic.fulcro.dom/div","map__65374","seq65373","com.fulcrologic.fulcro.dom/option","map__65377","seq65376","com.fulcrologic.fulcro.dom/feFlood","map__65380","seq65379","com.fulcrologic.fulcro.dom/summary","map__65383","seq65382","com.fulcrologic.fulcro.dom/feMorphology","map__65386","seq65385","com.fulcrologic.fulcro.dom/samp","map__65389","seq65388","com.fulcrologic.fulcro.dom/glyphRef","map__65392","seq65391","com.fulcrologic.fulcro.dom/small","map__65395","seq65394","com.fulcrologic.fulcro.dom/style","map__65398","seq65397","com.fulcrologic.fulcro.dom/textarea","map__65401","seq65400","com.fulcrologic.fulcro.dom/feGaussianBlur","map__65404","seq65403","com.fulcrologic.fulcro.dom/h4","map__65407","seq65406","com.fulcrologic.fulcro.dom/head","map__65410","seq65409","com.fulcrologic.fulcro.dom/g","map__65413","seq65412","com.fulcrologic.fulcro.dom/missing-glyph","map__65416","seq65415","com.fulcrologic.fulcro.dom/stop","map__65419","seq65418","com.fulcrologic.fulcro.dom/feDiffuseLighting","map__65422","seq65421","com.fulcrologic.fulcro.dom/filter","map__65425","seq65424","com.fulcrologic.fulcro.dom/feComposite","map__65428","seq65427","com.fulcrologic.fulcro.dom/mesh","map__65431","seq65430","com.fulcrologic.fulcro.dom/var","map__65434","seq65433","com.fulcrologic.fulcro.dom/tspan","map__65437","seq65436","com.fulcrologic.fulcro.dom/ol","map__65440","seq65439","com.fulcrologic.fulcro.dom/details","map__65443","seq65442","com.fulcrologic.fulcro.dom/line","map__65446","seq65445","com.fulcrologic.fulcro.dom/col","map__65449","seq65448","com.fulcrologic.fulcro.dom/label","map__65452","seq65451","com.fulcrologic.fulcro.dom/picture","map__65455","seq65454","com.fulcrologic.fulcro.dom/rt","map__65458","seq65457","com.fulcrologic.fulcro.dom/h6","map__65461","seq65460","com.fulcrologic.fulcro.dom/vkern","map__65464","seq65463","com.fulcrologic.fulcro.dom/link","map__65467","seq65466","com.fulcrologic.fulcro.dom/defs","map__65470","seq65469","com.fulcrologic.fulcro.dom/glyph","map__65473","seq65472","com.fulcrologic.fulcro.dom/colgroup","map__65476","seq65475","com.fulcrologic.fulcro.dom/meter","map__65479","seq65478","com.fulcrologic.fulcro.dom/bdo","map__65482","seq65481","com.fulcrologic.fulcro.dom/feImage","map__65485","seq65484","com.fulcrologic.fulcro.dom/b","map__65488","seq65487","com.fulcrologic.fulcro.dom/svg","map__65491","seq65490","com.fulcrologic.fulcro.dom/feTile","map__65494","seq65493","com.fulcrologic.fulcro.dom/ellipse","map__65497","seq65496","com.fulcrologic.fulcro.dom/code","map__65500","seq65499","com.fulcrologic.fulcro.dom/dialog","map__65503","seq65502","com.fulcrologic.fulcro.dom/linearGradient","map__65506","seq65505","com.fulcrologic.fulcro.dom/discard","map__65509","seq65508","com.fulcrologic.fulcro.dom/font-face-src","map__65512","seq65511","com.fulcrologic.fulcro.dom/noscript","map__65515","seq65514","com.fulcrologic.fulcro.dom/animateTransform","map__65518","seq65517","com.fulcrologic.fulcro.dom/feColorMatrix","map__65521","seq65520","com.fulcrologic.fulcro.dom/h2","map__65524","seq65523","com.fulcrologic.fulcro.dom/area","map__65527","seq65526","com.fulcrologic.fulcro.dom/br","map__65530","seq65529","com.fulcrologic.fulcro.dom/image","map__65533","seq65532"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1705355194000,1705355194000,1705351598402,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^O",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^:I","goog/dom/tagname.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.dom.HtmlElement"]]],["^:I","goog/async/freelist.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/labs/useragent/platform.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.labs.userAgent.util","~$goog.string"]]],["^:I","goog/timer/timer.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.Promise","~$goog.events.EventTarget"]]],["^:I","com/fulcrologic/fulcro/algorithms/lookup.cljc"],[1705354814234,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^9["]]],["^:I","cljs/spec/gen/alpha.cljs"],[1705351486739,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$goog.Uri"]]],["^:I","cljs/tools/reader/impl/utils.cljs"],[1684871064013,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:;","^;4"]]],["^:I","goog/math/math.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.array","~$goog.asserts"]]],["^:I","goog/string/stringformat.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;4"]]],["^:I","goog/events/eventtype.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^:I","goog/labs/useragent/browser.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;3","^:3","~$goog.string.internal"]]],["^:I","goog/html/safeurl.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^;<"]]],["^:I","goog/array/array.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9"]]],["^:I","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],[1705354814234,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^9[","~$edn-query-language.core","^:3","^@"]]],["^:I","goog/useragent/useragent.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^;3","~$goog.reflect","^;4"]]],["^:I","goog/structs/prioritypool.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^:I","clojure/test/check/properties.cljc"],[1705354814754,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$clojure.test.check.generators","~$clojure.test.check.results"]]],["^:I","goog/async/run.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^:I","clojure/test/check/generators.cljc"],[1705354814754,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:;","~$clojure.test.check.random","~$clojure.test.check.rose-tree","^;4"]]],["^:I","taoensso/encore.cljs"],[1705354814215,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:;","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","^:3","^;4","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^:I","goog/debug/error.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/async/workqueue.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.async.FreeList"]]],["^:I","goog/events/events.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^;:","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^:I","goog/promise/resolver.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/events/browserfeature.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;;"]]],["^:I","cljs/tools/reader/edn.cljs"],[1684871064013,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^;4","^;U"]]],["^:I","clojure/test/check/random/doubles.cljs"],[1705354814754,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$clojure.test.check.random.longs"]]],["^:I","goog/structs/priorityqueue.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.structs.Heap"]]],["^:I","goog/net/xhrio.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.Timer","^;8","^;9","^<3","^;6","~$goog.json.hybrid","~$goog.log","^<0","^;[","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^:3","^;4","^;Z","~$goog.structs.Map","~$goog.uri.utils","^;;"]]],["^:I","goog/promise/thenable.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/dom/nodetype.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","cljs/tools/reader/impl/inspect.cljs"],[1684871064013,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:I","cljs/tools/reader.cljs"],[1684871064013,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^<8","^<9","^<:","^<7","^;8","^;4","^;U"]]],["^:V","node_modules/scheduler/cjs/scheduler.development.js"],[1705355194000,1705355194000,1705351598404,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","clojure/test/check/rose_tree.cljc"],[1705354814754,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:I","clojure/test/check/impl.cljc"],[1705354814754,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:I","goog/net/wrapperxmlhttpfactory.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^:V","node_modules/scheduler/cjs/scheduler.production.min.js"],[1705355194000,1705355194000,1705351598405,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","goog/events/eventtarget.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.Disposable","^;9","^;V","~$goog.events.Event","^<5","^<6","^:3"]]],["^:I","clojure/test/check/random.cljs"],[1705354814754,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$clojure.test.check.random.doubles","^<<"]]],["^:I","goog/disposable/disposable.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.disposable.IDisposable"]]],["^:I","goog/string/typedstring.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:V","node_modules/react/index.js"],[1705355194000,1705355194000,1705351579473,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:[","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^:I","shadow/js.js"],[1705355194459,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/object/object.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/dom/asserts.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9"]]],["^:V","node_modules/react-dom/cjs/react-dom.production.min.js"],[1705355194000,1705355194000,1705351598414,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:[","~$module$node_modules$react$index","~$module$node_modules$scheduler$index"]]],["^:I","goog/structs/set.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;Z","~$goog.structs.Collection","^<C"]]],"~:SHADOW-TIMESTAMP",[1705355194000,1705351486000],["^:V","node_modules/react/cjs/react.development.js"],[1705355194000,1705355194000,1705351579479,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","goog/math/long.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^;G"]]],["^:I","goog/events/listener.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.events.ListenableKey"]]],["^:I","goog/html/trustedresourceurl.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^;?","^;@","^;A","^;B"]]],["^:I","goog/events/listenermap.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","~$goog.events.Listener","^:3"]]],["^:I","goog/events/eventid.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","taoensso/truss.cljs"],[1684871063313,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$taoensso.truss.impl"]]],["^:I","goog/string/internal.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","clojure/test/check.cljc"],[1705354814754,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^;J","^;O","^;K","^;P","~$clojure.test.check.impl"]]],["^:I","edn_query_language/core.cljc"],[1705354813723,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^@","~$clojure.test.check","^;J","~$clojure.test.check.properties"]]],["^:I","goog/functions/functions.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/html/safestyle.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","~$goog.html.SafeUrl","^;A","^;B","^;<"]]],["^:I","goog/dom/safe.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^<W","^;>","^;A","^;<"]]],["^:I","taoensso/truss/impl.cljs"],[1684871063313,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^;Q"]]],["^:I","clojure/walk.cljs"],[1705351486739,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:I","goog/net/eventtype.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/structs/map.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^:I","goog/net/xhriopool.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;W","~$goog.structs.PriorityPool"]]],["^:I","goog/html/safehtml.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","~$goog.dom.TagName","~$goog.dom.tags","^<[","^=0","~$goog.html.SafeStyleSheet","^<W","^;>","^;?","^;@","^;D","^:3","^;A","^;B","^;<"]]],["^:I","goog/dom/tags.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^:3"]]],["^:I","goog/math/size.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:V","node_modules/scheduler/index.js"],[1705355194000,1705355194000,1705351598401,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:[","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^:I","goog/structs/queue.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8"]]],["^:I","goog/labs/useragent/engine.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;3","^;4"]]],["^:I","taoensso/timbre/appenders/core.cljs"],[1684871063768,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:;","~$taoensso.encore"]]],["^:I","cljs/reader.cljs"],[1705351486739,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:3","^<;","^;S","^;U"]]],["^:I","goog/dom/dom.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^=4","~$goog.dom.safe","^<Z","~$goog.html.uncheckedconversions","~$goog.math.Coordinate","~$goog.math.Size","^:3","^;4","~$goog.string.Unicode","^;;"]]],["^:I","com/fulcrologic/fulcro/components.cljc"],[1705354814234,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:3","^:6","^;C","^@","^9[","~$clojure.walk","^:;","~$com.fulcrologic.fulcro.algorithms.do-not-use","~$com.fulcrologic.fulcro.algorithms.denormalize","~$com.fulcrologic.fulcro.algorithms.lookup","^;Q"]]],["^:I","goog/asserts/asserts.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.debug.Error","^=;"]]],["^:I","goog/debug/logbuffer.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.debug.LogRecord"]]],["^:I","goog/uri/uri.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","^;4","^;Z","^<C","^<D","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^:I","goog/net/errorcode.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/i18n/bidi.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/disposable/idisposable.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/promise/promise.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.Thenable","^;9","^<2","~$goog.async.run","^;N","^=E","~$goog.promise.Resolver"]]],["^:I","cljs/spec/alpha.cljs"],[1705351486739,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:3","^=A","^H","^:;"]]],["^:I","goog/fs/url.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/debug/logrecord.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/base.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",[]]],["^:I","goog/json/hybrid.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.json"]]],["^:I","goog/structs/structs.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^:3"]]],["^:I","cljs/tools/reader/impl/errors.cljs"],[1684871064013,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^<8","^:;","~$cljs.tools.reader.impl.inspect"]]],["^:I","cljsjs/react.cljs"],[1705355193610,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^<M"]]],["^:I","clojure/string.cljs"],[1705351486739,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^;4","^;U"]]],["^:I","goog/structs/pool.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^<G","~$goog.structs.Queue","~$goog.structs.Set"]]],["^:I","clojure/test/check/random/longs/bit_count_impl.cljs"],[1705354814754,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:V","node_modules/react/cjs/react.production.min.js"],[1705355194000,1705355194000,1705351579479,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","goog/net/httpstatus.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","com/fulcrologic/fulcro/dom_common.cljc"],[1705354814234,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:;","^:3"]]],["^:I","goog/structs/heap.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^:3","~$goog.structs.Node"]]],["^:I","goog/debug/entrypointregistry.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9"]]],["^:I","goog/string/string.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;<"]]],["^:I","goog/reflect/reflect.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/labs/useragent/util.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;<"]]],["^:I","com/fulcrologic/fulcro/dom.cljs"],[1705354814234,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^@","^:;","^:1","^:6","^:7","^:3","^9Y","^:5","^9["]]],["^:I","goog/debug/debug.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","~$goog.debug.errorcontext","^;;"]]],["^:I","goog/string/stringbuffer.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/math/coordinate.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.math"]]],["^:I","goog/debug/errorcontext.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","cljs/tools/reader/reader_types.cljs"],[1684871064013,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^<9","^;4","^;U"]]],["^:I","goog/iter/iter.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","^<Y","^=R"]]],["^:I","goog/async/nexttick.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^<3","^=4","^<Y","^;D","^;E"]]],["^:I","goog/html/uncheckedconversions.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^<Z","^<[","^=0","^=6","^<W","^;>","^;A","^;<"]]],["^:I","goog/debug/logger.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","~$goog.debug","~$goog.debug.LogBuffer","^=F"]]],["^:I","goog/events/event.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^<G","~$goog.events.EventId"]]],["^:I","cljs/tools/reader/impl/commons.cljs"],[1684871064013,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^<7","^<8","^<9"]]],["^:I","goog/dom/htmlelement.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","cljs/core.cljs"],[1705351486739,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["~$goog.math.Long","~$goog.math.Integer","^;4","^:3","^;8","^;7","^;U"]]],["^:I","goog/html/safescript.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^;A","^;B"]]],["^:I","clojure/test/check/random/longs.cljs"],[1705354814754,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$clojure.test.check.random.longs.bit-count-impl","^=V","^B"]]],["^:I","goog/log/log.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^=S","~$goog.debug.LogManager","^=F","~$goog.debug.Logger"]]],["^:I","goog/html/safestylesheet.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","^=0","^:3","^;A","^;B","^;<"]]],["^:I","goog/structs/collection.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","cljsjs/react/dom.cljs"],[1705355193610,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^<M","~$module$node_modules$react_dom$index"]]],["^:I","goog/events/browserevent.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^=S","^;:","^<H","~$goog.events.EventType","^;G","^;;"]]],["^:I","goog/math/integer.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/structs/node.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/dom/browserfeature.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;;"]]],["^:V","node_modules/react-dom/cjs/react-dom.development.js"],[1705355194000,1705355194000,1705351598411,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:[","^<M","^<N"]]],["^:I","clojure/set.cljs"],[1705351486739,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:I","goog/uri/utils.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","^;4"]]],["^:I","goog/string/const.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^;B"]]],["^:I","taoensso/timbre.cljs"],[1684871063768,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:;","^=9","~$taoensso.timbre.appenders.core"]]],["^:I","goog/json/json.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/events/listenable.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^=U"]]],["^:I","goog/net/xmlhttpfactory.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^<E"]]],["^:I","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],[1705354814234,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^;C"]]],["^:I","goog/net/xmlhttp.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.net.WrapperXmlHttpFactory","^<F"]]],["^:I","clojure/test/check/results.cljc"],[1705354814754,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:I","goog/net/xhrlike.js"],[1705355193711,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]]]],"~:clj-info",["^ ","jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/rose_tree.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/generators.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/gen/alpha.clj",1680040089000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1684871063000,"jar:file:/Users/dataico.macbook.one/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1684871062000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1684871062000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/dom.clj",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/taoensso/encore/2.94.0/encore-2.94.0.jar!/taoensso/encore.clj",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/properties.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1684518327000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/edn-query-language/eql/0.0.7/eql-0.0.7.jar!/edn_query_language/core.cljc",1705354813000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1705355194000,"jar:file:/Users/dataico.macbook.one/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1684871062000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/alpha.clj",1680040089000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1684871063000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1684871062000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/components.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/results.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/random.clj",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1684871063000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1684871063000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/dom_common.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1705354814000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1705351486000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Client-side DOM macros and functions. For isomorphic (server) support, see also com.fulcrologic.fulcro.dom-server","^7","com/fulcrologic/fulcro/dom.cljs","^8",1,"^9",5,"^:",1,"^;",31],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",null,"^N",["^O",["^P","^Q","^R","^S","^T","^U","^V","^W","^X"]],"^Y",["^ ","^Z",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(form \"hello\")\n(form nil \"hello\")\n\nThese two are made equivalent at compile time\n(form {:onClick f} \"hello\")\n(form #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(form :#the-id.klass.other-klass \"hello\")\n(form :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^13","^14","^15","^16",true],"^17",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(audio \"hello\")\n(audio nil \"hello\")\n\nThese two are made equivalent at compile time\n(audio {:onClick f} \"hello\")\n(audio #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(audio :#the-id.klass.other-klass \"hello\")\n(audio :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^18","^14","^15","^16",true],"^19",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(input \"hello\")\n(input nil \"hello\")\n\nThese two are made equivalent at compile time\n(input {:onClick f} \"hello\")\n(input #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(input :#the-id.klass.other-klass \"hello\")\n(input :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1:","^14","^15","^16",true],"^1;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menuitem \"hello\")\n(menuitem nil \"hello\")\n\nThese two are made equivalent at compile time\n(menuitem {:onClick f} \"hello\")\n(menuitem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menuitem :#the-id.klass.other-klass \"hello\")\n(menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1<","^14","^15","^16",true],"^1=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(radialGradient \"hello\")\n(radialGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(radialGradient {:onClick f} \"hello\")\n(radialGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(radialGradient :#the-id.klass.other-klass \"hello\")\n(radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1>","^14","^15","^16",true],"^1?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMerge \"hello\")\n(feMerge nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMerge {:onClick f} \"hello\")\n(feMerge #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMerge :#the-id.klass.other-klass \"hello\")\n(feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1@","^14","^15","^16",true],"^P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(set \"hello\")\n(set nil \"hello\")\n\nThese two are made equivalent at compile time\n(set {:onClick f} \"hello\")\n(set #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(set :#the-id.klass.other-klass \"hello\")\n(set :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1A","^14","^15","^16",true],"^1B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpecularLighting \"hello\")\n(feSpecularLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpecularLighting {:onClick f} \"hello\")\n(feSpecularLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpecularLighting :#the-id.klass.other-klass \"hello\")\n(feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1C","^14","^15","^16",true],"^1D",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(base \"hello\")\n(base nil \"hello\")\n\nThese two are made equivalent at compile time\n(base {:onClick f} \"hello\")\n(base #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(base :#the-id.klass.other-klass \"hello\")\n(base :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1E","^14","^15","^16",true],"^1F",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h1 \"hello\")\n(h1 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h1 {:onClick f} \"hello\")\n(h1 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h1 :#the-id.klass.other-klass \"hello\")\n(h1 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1G","^14","^15","^16",true],"^1H",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feOffset \"hello\")\n(feOffset nil \"hello\")\n\nThese two are made equivalent at compile time\n(feOffset {:onClick f} \"hello\")\n(feOffset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feOffset :#the-id.klass.other-klass \"hello\")\n(feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1I","^14","^15","^16",true],"^1J",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(embed \"hello\")\n(embed nil \"hello\")\n\nThese two are made equivalent at compile time\n(embed {:onClick f} \"hello\")\n(embed #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(embed :#the-id.klass.other-klass \"hello\")\n(embed :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1K","^14","^15","^16",true],"^1L",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateMotion \"hello\")\n(animateMotion nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateMotion {:onClick f} \"hello\")\n(animateMotion #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateMotion :#the-id.klass.other-klass \"hello\")\n(animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1M","^14","^15","^16",true],"^1N",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h3 \"hello\")\n(h3 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h3 {:onClick f} \"hello\")\n(h3 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h3 :#the-id.klass.other-klass \"hello\")\n(h3 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1O","^14","^15","^16",true],"^1P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(body \"hello\")\n(body nil \"hello\")\n\nThese two are made equivalent at compile time\n(body {:onClick f} \"hello\")\n(body #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(body :#the-id.klass.other-klass \"hello\")\n(body :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1Q","^14","^15","^16",true],"^1R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hkern \"hello\")\n(hkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(hkern {:onClick f} \"hello\")\n(hkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hkern :#the-id.klass.other-klass \"hello\")\n(hkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1S","^14","^15","^16",true],"^1T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(keygen \"hello\")\n(keygen nil \"hello\")\n\nThese two are made equivalent at compile time\n(keygen {:onClick f} \"hello\")\n(keygen #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(keygen :#the-id.klass.other-klass \"hello\")\n(keygen :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1U","^14","^15","^16",true],"^1V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-format \"hello\")\n(font-face-format nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-format {:onClick f} \"hello\")\n(font-face-format #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-format :#the-id.klass.other-klass \"hello\")\n(font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1W","^14","^15","^16",true],"^1X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncA \"hello\")\n(feFuncA nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncA {:onClick f} \"hello\")\n(feFuncA #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncA :#the-id.klass.other-klass \"hello\")\n(feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1Y","^14","^15","^16",true],"^1Z",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(progress \"hello\")\n(progress nil \"hello\")\n\nThese two are made equivalent at compile time\n(progress {:onClick f} \"hello\")\n(progress #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(progress :#the-id.klass.other-klass \"hello\")\n(progress :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1[","^14","^15","^16",true],"^20",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(main \"hello\")\n(main nil \"hello\")\n\nThese two are made equivalent at compile time\n(main {:onClick f} \"hello\")\n(main #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(main :#the-id.klass.other-klass \"hello\")\n(main :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^21","^14","^15","^16",true],"^22",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cite \"hello\")\n(cite nil \"hello\")\n\nThese two are made equivalent at compile time\n(cite {:onClick f} \"hello\")\n(cite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cite :#the-id.klass.other-klass \"hello\")\n(cite :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^23","^14","^15","^16",true],"^24",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rect \"hello\")\n(rect nil \"hello\")\n\nThese two are made equivalent at compile time\n(rect {:onClick f} \"hello\")\n(rect #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rect :#the-id.klass.other-klass \"hello\")\n(rect :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^25","^14","^15","^16",true],"^26",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tref \"hello\")\n(tref nil \"hello\")\n\nThese two are made equivalent at compile time\n(tref {:onClick f} \"hello\")\n(tref #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tref :#the-id.klass.other-klass \"hello\")\n(tref :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^27","^14","^15","^16",true],"^28",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshpatch \"hello\")\n(meshpatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshpatch {:onClick f} \"hello\")\n(meshpatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshpatch :#the-id.klass.other-klass \"hello\")\n(meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^29","^14","^15","^16",true],"^2:",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polyline \"hello\")\n(polyline nil \"hello\")\n\nThese two are made equivalent at compile time\n(polyline {:onClick f} \"hello\")\n(polyline #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polyline :#the-id.klass.other-klass \"hello\")\n(polyline :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2;","^14","^15","^16",true],"^2<",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(metadata \"hello\")\n(metadata nil \"hello\")\n\nThese two are made equivalent at compile time\n(metadata {:onClick f} \"hello\")\n(metadata #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(metadata :#the-id.klass.other-klass \"hello\")\n(metadata :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2=","^14","^15","^16",true],"^Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(map \"hello\")\n(map nil \"hello\")\n\nThese two are made equivalent at compile time\n(map {:onClick f} \"hello\")\n(map #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(map :#the-id.klass.other-klass \"hello\")\n(map :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2>","^14","^15","^16",true],"^2?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(object \"hello\")\n(object nil \"hello\")\n\nThese two are made equivalent at compile time\n(object {:onClick f} \"hello\")\n(object #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(object :#the-id.klass.other-klass \"hello\")\n(object :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2@","^14","^15","^16",true],"~$i",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(i \"hello\")\n(i nil \"hello\")\n\nThese two are made equivalent at compile time\n(i {:onClick f} \"hello\")\n(i #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(i :#the-id.klass.other-klass \"hello\")\n(i :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2A","^14","^15","^16",true],"^2B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-name \"hello\")\n(font-face-name nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-name {:onClick f} \"hello\")\n(font-face-name #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-name :#the-id.klass.other-klass \"hello\")\n(font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2C","^14","^15","^16",true],"~$p",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(p \"hello\")\n(p nil \"hello\")\n\nThese two are made equivalent at compile time\n(p {:onClick f} \"hello\")\n(p #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(p :#the-id.klass.other-klass \"hello\")\n(p :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2D","^14","^15","^16",true],"^2E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncR \"hello\")\n(feFuncR nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncR {:onClick f} \"hello\")\n(feFuncR #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncR :#the-id.klass.other-klass \"hello\")\n(feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2F","^14","^15","^16",true],"^2G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatchpath \"hello\")\n(hatchpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatchpath {:onClick f} \"hello\")\n(hatchpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatchpath :#the-id.klass.other-klass \"hello\")\n(hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2H","^14","^15","^16",true],"^2I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphItem \"hello\")\n(altGlyphItem nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphItem {:onClick f} \"hello\")\n(altGlyphItem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphItem :#the-id.klass.other-klass \"hello\")\n(altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2J","^14","^15","^16",true],"^2K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(nav \"hello\")\n(nav nil \"hello\")\n\nThese two are made equivalent at compile time\n(nav {:onClick f} \"hello\")\n(nav #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(nav :#the-id.klass.other-klass \"hello\")\n(nav :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2L","^14","^15","^16",true],"^2M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ruby \"hello\")\n(ruby nil \"hello\")\n\nThese two are made equivalent at compile time\n(ruby {:onClick f} \"hello\")\n(ruby #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ruby :#the-id.klass.other-klass \"hello\")\n(ruby :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2N","^14","^15","^16",true],"^2O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(switch \"hello\")\n(switch nil \"hello\")\n\nThese two are made equivalent at compile time\n(switch {:onClick f} \"hello\")\n(switch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(switch :#the-id.klass.other-klass \"hello\")\n(switch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2P","^14","^15","^16",true],"~$a",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(a \"hello\")\n(a nil \"hello\")\n\nThese two are made equivalent at compile time\n(a {:onClick f} \"hello\")\n(a #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(a :#the-id.klass.other-klass \"hello\")\n(a :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2Q","^14","^15","^16",true],"^2R",["^ ","^[",["^10",[["^2S"]]],"^8",121,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2T","^14","^15","^16",true],"^2U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(view \"hello\")\n(view nil \"hello\")\n\nThese two are made equivalent at compile time\n(view {:onClick f} \"hello\")\n(view #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(view :#the-id.klass.other-klass \"hello\")\n(view :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2V","^14","^15","^16",true],"^2W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menu \"hello\")\n(menu nil \"hello\")\n\nThese two are made equivalent at compile time\n(menu {:onClick f} \"hello\")\n(menu #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menu :#the-id.klass.other-klass \"hello\")\n(menu :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2X","^14","^15","^16",true],"^2Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(blockquote \"hello\")\n(blockquote nil \"hello\")\n\nThese two are made equivalent at compile time\n(blockquote {:onClick f} \"hello\")\n(blockquote #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(blockquote :#the-id.klass.other-klass \"hello\")\n(blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2Z","^14","^15","^16",true],"^2[",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(img \"hello\")\n(img nil \"hello\")\n\nThese two are made equivalent at compile time\n(img {:onClick f} \"hello\")\n(img #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(img :#the-id.klass.other-klass \"hello\")\n(img :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^30","^14","^15","^16",true],"^31",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncG \"hello\")\n(feFuncG nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncG {:onClick f} \"hello\")\n(feFuncG #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncG :#the-id.klass.other-klass \"hello\")\n(feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^32","^14","^15","^16",true],"^33",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(text \"hello\")\n(text nil \"hello\")\n\nThese two are made equivalent at compile time\n(text {:onClick f} \"hello\")\n(text #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(text :#the-id.klass.other-klass \"hello\")\n(text :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^34","^14","^15","^16",true],"^35",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(span \"hello\")\n(span nil \"hello\")\n\nThese two are made equivalent at compile time\n(span {:onClick f} \"hello\")\n(span #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(span :#the-id.klass.other-klass \"hello\")\n(span :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^36","^14","^15","^16",true],"^37",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(track \"hello\")\n(track nil \"hello\")\n\nThese two are made equivalent at compile time\n(track {:onClick f} \"hello\")\n(track #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(track :#the-id.klass.other-klass \"hello\")\n(track :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^38","^14","^15","^16",true],"^39",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(data \"hello\")\n(data nil \"hello\")\n\nThese two are made equivalent at compile time\n(data {:onClick f} \"hello\")\n(data #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(data :#the-id.klass.other-klass \"hello\")\n(data :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3:","^14","^15","^16",true],"~$u",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(u \"hello\")\n(u nil \"hello\")\n\nThese two are made equivalent at compile time\n(u {:onClick f} \"hello\")\n(u #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(u :#the-id.klass.other-klass \"hello\")\n(u :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3;","^14","^15","^16",true],"^3<",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dl \"hello\")\n(dl nil \"hello\")\n\nThese two are made equivalent at compile time\n(dl {:onClick f} \"hello\")\n(dl #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dl :#the-id.klass.other-klass \"hello\")\n(dl :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3=","^14","^15","^16",true],"^R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(select \"hello\")\n(select nil \"hello\")\n\nThese two are made equivalent at compile time\n(select {:onClick f} \"hello\")\n(select #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(select :#the-id.klass.other-klass \"hello\")\n(select :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3>","^14","^15","^16",true],"^3?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polygon \"hello\")\n(polygon nil \"hello\")\n\nThese two are made equivalent at compile time\n(polygon {:onClick f} \"hello\")\n(polygon #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polygon :#the-id.klass.other-klass \"hello\")\n(polygon :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3@","^14","^15","^16",true],"^3A",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pattern \"hello\")\n(pattern nil \"hello\")\n\nThese two are made equivalent at compile time\n(pattern {:onClick f} \"hello\")\n(pattern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pattern :#the-id.klass.other-klass \"hello\")\n(pattern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3B","^14","^15","^16",true],"^3C",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(html \"hello\")\n(html nil \"hello\")\n\nThese two are made equivalent at compile time\n(html {:onClick f} \"hello\")\n(html #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(html :#the-id.klass.other-klass \"hello\")\n(html :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3D","^14","^15","^16",true],"^3E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(foreignObject \"hello\")\n(foreignObject nil \"hello\")\n\nThese two are made equivalent at compile time\n(foreignObject {:onClick f} \"hello\")\n(foreignObject #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(foreignObject :#the-id.klass.other-klass \"hello\")\n(foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3F","^14","^15","^16",true],"^3G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(thead \"hello\")\n(thead nil \"hello\")\n\nThese two are made equivalent at compile time\n(thead {:onClick f} \"hello\")\n(thead #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(thead :#the-id.klass.other-klass \"hello\")\n(thead :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3H","^14","^15","^16",true],"^3I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(path \"hello\")\n(path nil \"hello\")\n\nThese two are made equivalent at compile time\n(path {:onClick f} \"hello\")\n(path #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(path :#the-id.klass.other-klass \"hello\")\n(path :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3J","^14","^15","^16",true],"^3K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(del \"hello\")\n(del nil \"hello\")\n\nThese two are made equivalent at compile time\n(del {:onClick f} \"hello\")\n(del #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(del :#the-id.klass.other-klass \"hello\")\n(del :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3L","^14","^15","^16",true],"^3M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyph \"hello\")\n(altGlyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyph {:onClick f} \"hello\")\n(altGlyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyph :#the-id.klass.other-klass \"hello\")\n(altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3N","^14","^15","^16",true],"^3O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fieldset \"hello\")\n(fieldset nil \"hello\")\n\nThese two are made equivalent at compile time\n(fieldset {:onClick f} \"hello\")\n(fieldset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fieldset :#the-id.klass.other-klass \"hello\")\n(fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3P","^14","^15","^16",true],"^3Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(aside \"hello\")\n(aside nil \"hello\")\n\nThese two are made equivalent at compile time\n(aside {:onClick f} \"hello\")\n(aside #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(aside :#the-id.klass.other-klass \"hello\")\n(aside :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3R","^14","^15","^16",true],"^3S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feBlend \"hello\")\n(feBlend nil \"hello\")\n\nThese two are made equivalent at compile time\n(feBlend {:onClick f} \"hello\")\n(feBlend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feBlend :#the-id.klass.other-klass \"hello\")\n(feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3T","^14","^15","^16",true],"^3U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figure \"hello\")\n(figure nil \"hello\")\n\nThese two are made equivalent at compile time\n(figure {:onClick f} \"hello\")\n(figure #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figure :#the-id.klass.other-klass \"hello\")\n(figure :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3V","^14","^15","^16",true],"^3W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textPath \"hello\")\n(textPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(textPath {:onClick f} \"hello\")\n(textPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textPath :#the-id.klass.other-klass \"hello\")\n(textPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3X","^14","^15","^16",true],"^3Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figcaption \"hello\")\n(figcaption nil \"hello\")\n\nThese two are made equivalent at compile time\n(figcaption {:onClick f} \"hello\")\n(figcaption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figcaption :#the-id.klass.other-klass \"hello\")\n(figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3Z","^14","^15","^16",true],"^S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mask \"hello\")\n(mask nil \"hello\")\n\nThese two are made equivalent at compile time\n(mask {:onClick f} \"hello\")\n(mask #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mask :#the-id.klass.other-klass \"hello\")\n(mask :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3[","^14","^15","^16",true],"~$q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(q \"hello\")\n(q nil \"hello\")\n\nThese two are made equivalent at compile time\n(q {:onClick f} \"hello\")\n(q #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(q :#the-id.klass.other-klass \"hello\")\n(q :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^40","^14","^15","^16",true],"^41",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdi \"hello\")\n(bdi nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdi {:onClick f} \"hello\")\n(bdi #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdi :#the-id.klass.other-klass \"hello\")\n(bdi :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^42","^14","^15","^16",true],"^43",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDistantLight \"hello\")\n(feDistantLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDistantLight {:onClick f} \"hello\")\n(feDistantLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDistantLight :#the-id.klass.other-klass \"hello\")\n(feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^44","^14","^15","^16",true],"^45",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(video \"hello\")\n(video nil \"hello\")\n\nThese two are made equivalent at compile time\n(video {:onClick f} \"hello\")\n(video #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(video :#the-id.klass.other-klass \"hello\")\n(video :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^46","^14","^15","^16",true],"^47",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(address \"hello\")\n(address nil \"hello\")\n\nThese two are made equivalent at compile time\n(address {:onClick f} \"hello\")\n(address #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(address :#the-id.klass.other-klass \"hello\")\n(address :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^48","^14","^15","^16",true],"^49",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(caption \"hello\")\n(caption nil \"hello\")\n\nThese two are made equivalent at compile time\n(caption {:onClick f} \"hello\")\n(caption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(caption :#the-id.klass.other-klass \"hello\")\n(caption :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4:","^14","^15","^16",true],"^4;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dd \"hello\")\n(dd nil \"hello\")\n\nThese two are made equivalent at compile time\n(dd {:onClick f} \"hello\")\n(dd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dd :#the-id.klass.other-klass \"hello\")\n(dd :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4<","^14","^15","^16",true],"^4=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rp \"hello\")\n(rp nil \"hello\")\n\nThese two are made equivalent at compile time\n(rp {:onClick f} \"hello\")\n(rp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rp :#the-id.klass.other-klass \"hello\")\n(rp :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4>","^14","^15","^16",true],"^4?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hr \"hello\")\n(hr nil \"hello\")\n\nThese two are made equivalent at compile time\n(hr {:onClick f} \"hello\")\n(hr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hr :#the-id.klass.other-klass \"hello\")\n(hr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4@","^14","^15","^16",true],"^T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meta \"hello\")\n(meta nil \"hello\")\n\nThese two are made equivalent at compile time\n(meta {:onClick f} \"hello\")\n(meta #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meta :#the-id.klass.other-klass \"hello\")\n(meta :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4A","^14","^15","^16",true],"^4B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tbody \"hello\")\n(tbody nil \"hello\")\n\nThese two are made equivalent at compile time\n(tbody {:onClick f} \"hello\")\n(tbody #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tbody :#the-id.klass.other-klass \"hello\")\n(tbody :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4C","^14","^15","^16",true],"^4D",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(desc \"hello\")\n(desc nil \"hello\")\n\nThese two are made equivalent at compile time\n(desc {:onClick f} \"hello\")\n(desc #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(desc :#the-id.klass.other-klass \"hello\")\n(desc :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4E","^14","^15","^16",true],"^4F",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(table \"hello\")\n(table nil \"hello\")\n\nThese two are made equivalent at compile time\n(table {:onClick f} \"hello\")\n(table #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(table :#the-id.klass.other-klass \"hello\")\n(table :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4G","^14","^15","^16",true],"^4H",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pre \"hello\")\n(pre nil \"hello\")\n\nThese two are made equivalent at compile time\n(pre {:onClick f} \"hello\")\n(pre #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pre :#the-id.klass.other-klass \"hello\")\n(pre :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4I","^14","^15","^16",true],"^4J",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ul \"hello\")\n(ul nil \"hello\")\n\nThese two are made equivalent at compile time\n(ul {:onClick f} \"hello\")\n(ul #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ul :#the-id.klass.other-klass \"hello\")\n(ul :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4K","^14","^15","^16",true],"^4L",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feConvolveMatrix \"hello\")\n(feConvolveMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feConvolveMatrix {:onClick f} \"hello\")\n(feConvolveMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n(feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4M","^14","^15","^16",true],"^4N",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sup \"hello\")\n(sup nil \"hello\")\n\nThese two are made equivalent at compile time\n(sup {:onClick f} \"hello\")\n(sup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sup :#the-id.klass.other-klass \"hello\")\n(sup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4O","^14","^15","^16",true],"^4P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dfn \"hello\")\n(dfn nil \"hello\")\n\nThese two are made equivalent at compile time\n(dfn {:onClick f} \"hello\")\n(dfn #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dfn :#the-id.klass.other-klass \"hello\")\n(dfn :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4Q","^14","^15","^16",true],"^4R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sub \"hello\")\n(sub nil \"hello\")\n\nThese two are made equivalent at compile time\n(sub {:onClick f} \"hello\")\n(sub #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sub :#the-id.klass.other-klass \"hello\")\n(sub :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4S","^14","^15","^16",true],"^4T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mark \"hello\")\n(mark nil \"hello\")\n\nThese two are made equivalent at compile time\n(mark {:onClick f} \"hello\")\n(mark #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mark :#the-id.klass.other-klass \"hello\")\n(mark :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4U","^14","^15","^16",true],"^4V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDisplacementMap \"hello\")\n(feDisplacementMap nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDisplacementMap {:onClick f} \"hello\")\n(feDisplacementMap #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDisplacementMap :#the-id.klass.other-klass \"hello\")\n(feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4W","^14","^15","^16",true],"^4X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(unknown \"hello\")\n(unknown nil \"hello\")\n\nThese two are made equivalent at compile time\n(unknown {:onClick f} \"hello\")\n(unknown #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(unknown :#the-id.klass.other-klass \"hello\")\n(unknown :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4Y","^14","^15","^16",true],"^4Z",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(script \"hello\")\n(script nil \"hello\")\n\nThese two are made equivalent at compile time\n(script {:onClick f} \"hello\")\n(script #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(script :#the-id.klass.other-klass \"hello\")\n(script :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4[","^14","^15","^16",true],"^50",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTurbulence \"hello\")\n(feTurbulence nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTurbulence {:onClick f} \"hello\")\n(feTurbulence #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTurbulence :#the-id.klass.other-klass \"hello\")\n(feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^51","^14","^15","^16",true],"^52",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(big \"hello\")\n(big nil \"hello\")\n\nThese two are made equivalent at compile time\n(big {:onClick f} \"hello\")\n(big #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(big :#the-id.klass.other-klass \"hello\")\n(big :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^53","^14","^15","^16",true],"^54",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(button \"hello\")\n(button nil \"hello\")\n\nThese two are made equivalent at compile time\n(button {:onClick f} \"hello\")\n(button #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(button :#the-id.klass.other-klass \"hello\")\n(button :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^55","^14","^15","^16",true],"^56",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-uri \"hello\")\n(font-face-uri nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-uri {:onClick f} \"hello\")\n(font-face-uri #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-uri :#the-id.klass.other-klass \"hello\")\n(font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^57","^14","^15","^16",true],"^58",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(wbr \"hello\")\n(wbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(wbr {:onClick f} \"hello\")\n(wbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(wbr :#the-id.klass.other-klass \"hello\")\n(wbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^59","^14","^15","^16",true],"^U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(symbol \"hello\")\n(symbol nil \"hello\")\n\nThese two are made equivalent at compile time\n(symbol {:onClick f} \"hello\")\n(symbol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(symbol :#the-id.klass.other-klass \"hello\")\n(symbol :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5:","^14","^15","^16",true],"^5;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(strong \"hello\")\n(strong nil \"hello\")\n\nThese two are made equivalent at compile time\n(strong {:onClick f} \"hello\")\n(strong #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(strong :#the-id.klass.other-klass \"hello\")\n(strong :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5<","^14","^15","^16",true],"^V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(use \"hello\")\n(use nil \"hello\")\n\nThese two are made equivalent at compile time\n(use {:onClick f} \"hello\")\n(use #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(use :#the-id.klass.other-klass \"hello\")\n(use :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5=","^14","^15","^16",true],"^5>",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(solidcolor \"hello\")\n(solidcolor nil \"hello\")\n\nThese two are made equivalent at compile time\n(solidcolor {:onClick f} \"hello\")\n(solidcolor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(solidcolor :#the-id.klass.other-klass \"hello\")\n(solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5?","^14","^15","^16",true],"^5@",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fePointLight \"hello\")\n(fePointLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(fePointLight {:onClick f} \"hello\")\n(fePointLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fePointLight :#the-id.klass.other-klass \"hello\")\n(fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5A","^14","^15","^16",true],"^5B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(li \"hello\")\n(li nil \"hello\")\n\nThese two are made equivalent at compile time\n(li {:onClick f} \"hello\")\n(li #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(li :#the-id.klass.other-klass \"hello\")\n(li :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5C","^14","^15","^16",true],"^5D",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dt \"hello\")\n(dt nil \"hello\")\n\nThese two are made equivalent at compile time\n(dt {:onClick f} \"hello\")\n(dt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dt :#the-id.klass.other-klass \"hello\")\n(dt :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5E","^14","^15","^16",true],"^5F",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncB \"hello\")\n(feFuncB nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncB {:onClick f} \"hello\")\n(feFuncB #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncB :#the-id.klass.other-klass \"hello\")\n(feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5G","^14","^15","^16",true],"^5H",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(marker \"hello\")\n(marker nil \"hello\")\n\nThese two are made equivalent at compile time\n(marker {:onClick f} \"hello\")\n(marker #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(marker :#the-id.klass.other-klass \"hello\")\n(marker :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5I","^14","^15","^16",true],"^5J",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComponentTransfer \"hello\")\n(feComponentTransfer nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComponentTransfer {:onClick f} \"hello\")\n(feComponentTransfer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComponentTransfer :#the-id.klass.other-klass \"hello\")\n(feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5K","^14","^15","^16",true],"^5L",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(td \"hello\")\n(td nil \"hello\")\n\nThese two are made equivalent at compile time\n(td {:onClick f} \"hello\")\n(td #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(td :#the-id.klass.other-klass \"hello\")\n(td :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5M","^14","^15","^16",true],"^5N",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tr \"hello\")\n(tr nil \"hello\")\n\nThese two are made equivalent at compile time\n(tr {:onClick f} \"hello\")\n(tr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tr :#the-id.klass.other-klass \"hello\")\n(tr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5O","^14","^15","^16",true],"^5P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(circle \"hello\")\n(circle nil \"hello\")\n\nThese two are made equivalent at compile time\n(circle {:onClick f} \"hello\")\n(circle #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(circle :#the-id.klass.other-klass \"hello\")\n(circle :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5Q","^14","^15","^16",true],"^5R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(section \"hello\")\n(section nil \"hello\")\n\nThese two are made equivalent at compile time\n(section {:onClick f} \"hello\")\n(section #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(section :#the-id.klass.other-klass \"hello\")\n(section :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5S","^14","^15","^16",true],"^5T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDropShadow \"hello\")\n(feDropShadow nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDropShadow {:onClick f} \"hello\")\n(feDropShadow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDropShadow :#the-id.klass.other-klass \"hello\")\n(feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5U","^14","^15","^16",true],"^5V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(th \"hello\")\n(th nil \"hello\")\n\nThese two are made equivalent at compile time\n(th {:onClick f} \"hello\")\n(th #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(th :#the-id.klass.other-klass \"hello\")\n(th :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5W","^14","^15","^16",true],"^W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(time \"hello\")\n(time nil \"hello\")\n\nThese two are made equivalent at compile time\n(time {:onClick f} \"hello\")\n(time #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(time :#the-id.klass.other-klass \"hello\")\n(time :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5X","^14","^15","^16",true],"^5Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(optgroup \"hello\")\n(optgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(optgroup {:onClick f} \"hello\")\n(optgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(optgroup :#the-id.klass.other-klass \"hello\")\n(optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5Z","^14","^15","^16",true],"^5[",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(iframe \"hello\")\n(iframe nil \"hello\")\n\nThese two are made equivalent at compile time\n(iframe {:onClick f} \"hello\")\n(iframe #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(iframe :#the-id.klass.other-klass \"hello\")\n(iframe :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^60","^14","^15","^16",true],"^61",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(color-profile \"hello\")\n(color-profile nil \"hello\")\n\nThese two are made equivalent at compile time\n(color-profile {:onClick f} \"hello\")\n(color-profile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(color-profile :#the-id.klass.other-klass \"hello\")\n(color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^62","^14","^15","^16",true],"^63",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(legend \"hello\")\n(legend nil \"hello\")\n\nThese two are made equivalent at compile time\n(legend {:onClick f} \"hello\")\n(legend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(legend :#the-id.klass.other-klass \"hello\")\n(legend :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^64","^14","^15","^16",true],"^65",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(em \"hello\")\n(em nil \"hello\")\n\nThese two are made equivalent at compile time\n(em {:onClick f} \"hello\")\n(em #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(em :#the-id.klass.other-klass \"hello\")\n(em :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^66","^14","^15","^16",true],"^67",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(kbd \"hello\")\n(kbd nil \"hello\")\n\nThese two are made equivalent at compile time\n(kbd {:onClick f} \"hello\")\n(kbd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(kbd :#the-id.klass.other-klass \"hello\")\n(kbd :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^68","^14","^15","^16",true],"^69",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(article \"hello\")\n(article nil \"hello\")\n\nThese two are made equivalent at compile time\n(article {:onClick f} \"hello\")\n(article #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(article :#the-id.klass.other-klass \"hello\")\n(article :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6:","^14","^15","^16",true],"^6;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateColor \"hello\")\n(animateColor nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateColor {:onClick f} \"hello\")\n(animateColor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateColor :#the-id.klass.other-klass \"hello\")\n(animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6<","^14","^15","^16",true],"^6=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(clipPath \"hello\")\n(clipPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(clipPath {:onClick f} \"hello\")\n(clipPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(clipPath :#the-id.klass.other-klass \"hello\")\n(clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6>","^14","^15","^16",true],"^6?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(abbr \"hello\")\n(abbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(abbr {:onClick f} \"hello\")\n(abbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(abbr :#the-id.klass.other-klass \"hello\")\n(abbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6@","^14","^15","^16",true],"^6A",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphDef \"hello\")\n(altGlyphDef nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphDef {:onClick f} \"hello\")\n(altGlyphDef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphDef :#the-id.klass.other-klass \"hello\")\n(altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6B","^14","^15","^16",true],"^6C",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshrow \"hello\")\n(meshrow nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshrow {:onClick f} \"hello\")\n(meshrow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshrow :#the-id.klass.other-klass \"hello\")\n(meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6D","^14","^15","^16",true],"^6E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cursor \"hello\")\n(cursor nil \"hello\")\n\nThese two are made equivalent at compile time\n(cursor {:onClick f} \"hello\")\n(cursor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cursor :#the-id.klass.other-klass \"hello\")\n(cursor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6F","^14","^15","^16",true],"^6G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animate \"hello\")\n(animate nil \"hello\")\n\nThese two are made equivalent at compile time\n(animate {:onClick f} \"hello\")\n(animate #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animate :#the-id.klass.other-klass \"hello\")\n(animate :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6H","^14","^15","^16",true],"^6I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(source \"hello\")\n(source nil \"hello\")\n\nThese two are made equivalent at compile time\n(source {:onClick f} \"hello\")\n(source #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(source :#the-id.klass.other-klass \"hello\")\n(source :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6J","^14","^15","^16",true],"^6K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(output \"hello\")\n(output nil \"hello\")\n\nThese two are made equivalent at compile time\n(output {:onClick f} \"hello\")\n(output #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(output :#the-id.klass.other-klass \"hello\")\n(output :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6L","^14","^15","^16",true],"^6M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face \"hello\")\n(font-face nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face {:onClick f} \"hello\")\n(font-face #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face :#the-id.klass.other-klass \"hello\")\n(font-face :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6N","^14","^15","^16",true],"^6O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMergeNode \"hello\")\n(feMergeNode nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMergeNode {:onClick f} \"hello\")\n(feMergeNode #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMergeNode :#the-id.klass.other-klass \"hello\")\n(feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6P","^14","^15","^16",true],"^6Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpotLight \"hello\")\n(feSpotLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpotLight {:onClick f} \"hello\")\n(feSpotLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpotLight :#the-id.klass.other-klass \"hello\")\n(feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6R","^14","^15","^16",true],"^6S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(header \"hello\")\n(header nil \"hello\")\n\nThese two are made equivalent at compile time\n(header {:onClick f} \"hello\")\n(header #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(header :#the-id.klass.other-klass \"hello\")\n(header :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6T","^14","^15","^16",true],"^6U",["^ ","^[",["^10",[["^6V"]]],"^8",135,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6W","^14","^15","^16",true],"^6X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(datalist \"hello\")\n(datalist nil \"hello\")\n\nThese two are made equivalent at compile time\n(datalist {:onClick f} \"hello\")\n(datalist #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(datalist :#the-id.klass.other-klass \"hello\")\n(datalist :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6Y","^14","^15","^16",true],"^6Z",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tfoot \"hello\")\n(tfoot nil \"hello\")\n\nThese two are made equivalent at compile time\n(tfoot {:onClick f} \"hello\")\n(tfoot #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tfoot :#the-id.klass.other-klass \"hello\")\n(tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6[","^14","^15","^16",true],"~$s",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(s \"hello\")\n(s nil \"hello\")\n\nThese two are made equivalent at compile time\n(s {:onClick f} \"hello\")\n(s #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(s :#the-id.klass.other-klass \"hello\")\n(s :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^70","^14","^15","^16",true],"^71",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatch \"hello\")\n(hatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatch {:onClick f} \"hello\")\n(hatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatch :#the-id.klass.other-klass \"hello\")\n(hatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^72","^14","^15","^16",true],"^73",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ins \"hello\")\n(ins nil \"hello\")\n\nThese two are made equivalent at compile time\n(ins {:onClick f} \"hello\")\n(ins #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ins :#the-id.klass.other-klass \"hello\")\n(ins :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^74","^14","^15","^16",true],"^75",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(footer \"hello\")\n(footer nil \"hello\")\n\nThese two are made equivalent at compile time\n(footer {:onClick f} \"hello\")\n(footer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(footer :#the-id.klass.other-klass \"hello\")\n(footer :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^76","^14","^15","^16",true],"^77",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mpath \"hello\")\n(mpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(mpath {:onClick f} \"hello\")\n(mpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mpath :#the-id.klass.other-klass \"hello\")\n(mpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^78","^14","^15","^16",true],"^79",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(title \"hello\")\n(title nil \"hello\")\n\nThese two are made equivalent at compile time\n(title {:onClick f} \"hello\")\n(title #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(title :#the-id.klass.other-klass \"hello\")\n(title :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7:","^14","^15","^16",true],"^7;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h5 \"hello\")\n(h5 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h5 {:onClick f} \"hello\")\n(h5 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h5 :#the-id.klass.other-klass \"hello\")\n(h5 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7<","^14","^15","^16",true],"^7=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshgradient \"hello\")\n(meshgradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshgradient {:onClick f} \"hello\")\n(meshgradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshgradient :#the-id.klass.other-klass \"hello\")\n(meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7>","^14","^15","^16",true],"^7?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(canvas \"hello\")\n(canvas nil \"hello\")\n\nThese two are made equivalent at compile time\n(canvas {:onClick f} \"hello\")\n(canvas #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(canvas :#the-id.klass.other-klass \"hello\")\n(canvas :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7@","^14","^15","^16",true],"^7A",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(param \"hello\")\n(param nil \"hello\")\n\nThese two are made equivalent at compile time\n(param {:onClick f} \"hello\")\n(param #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(param :#the-id.klass.other-klass \"hello\")\n(param :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7B","^14","^15","^16",true],"^7C",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font \"hello\")\n(font nil \"hello\")\n\nThese two are made equivalent at compile time\n(font {:onClick f} \"hello\")\n(font #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font :#the-id.klass.other-klass \"hello\")\n(font :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7D","^14","^15","^16",true],"^7E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(div \"hello\")\n(div nil \"hello\")\n\nThese two are made equivalent at compile time\n(div {:onClick f} \"hello\")\n(div #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(div :#the-id.klass.other-klass \"hello\")\n(div :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7F","^14","^15","^16",true],"^7G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(option \"hello\")\n(option nil \"hello\")\n\nThese two are made equivalent at compile time\n(option {:onClick f} \"hello\")\n(option #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(option :#the-id.klass.other-klass \"hello\")\n(option :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7H","^14","^15","^16",true],"^7I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFlood \"hello\")\n(feFlood nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFlood {:onClick f} \"hello\")\n(feFlood #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFlood :#the-id.klass.other-klass \"hello\")\n(feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7J","^14","^15","^16",true],"^7K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(summary \"hello\")\n(summary nil \"hello\")\n\nThese two are made equivalent at compile time\n(summary {:onClick f} \"hello\")\n(summary #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(summary :#the-id.klass.other-klass \"hello\")\n(summary :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7L","^14","^15","^16",true],"^7M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMorphology \"hello\")\n(feMorphology nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMorphology {:onClick f} \"hello\")\n(feMorphology #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMorphology :#the-id.klass.other-klass \"hello\")\n(feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7N","^14","^15","^16",true],"^7O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(samp \"hello\")\n(samp nil \"hello\")\n\nThese two are made equivalent at compile time\n(samp {:onClick f} \"hello\")\n(samp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(samp :#the-id.klass.other-klass \"hello\")\n(samp :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7P","^14","^15","^16",true],"^7Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyphRef \"hello\")\n(glyphRef nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyphRef {:onClick f} \"hello\")\n(glyphRef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyphRef :#the-id.klass.other-klass \"hello\")\n(glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7R","^14","^15","^16",true],"^7S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(small \"hello\")\n(small nil \"hello\")\n\nThese two are made equivalent at compile time\n(small {:onClick f} \"hello\")\n(small #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(small :#the-id.klass.other-klass \"hello\")\n(small :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7T","^14","^15","^16",true],"^7U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(style \"hello\")\n(style nil \"hello\")\n\nThese two are made equivalent at compile time\n(style {:onClick f} \"hello\")\n(style #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(style :#the-id.klass.other-klass \"hello\")\n(style :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7V","^14","^15","^16",true],"^7W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textarea \"hello\")\n(textarea nil \"hello\")\n\nThese two are made equivalent at compile time\n(textarea {:onClick f} \"hello\")\n(textarea #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textarea :#the-id.klass.other-klass \"hello\")\n(textarea :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7X","^14","^15","^16",true],"^7Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feGaussianBlur \"hello\")\n(feGaussianBlur nil \"hello\")\n\nThese two are made equivalent at compile time\n(feGaussianBlur {:onClick f} \"hello\")\n(feGaussianBlur #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feGaussianBlur :#the-id.klass.other-klass \"hello\")\n(feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7Z","^14","^15","^16",true],"^7[",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h4 \"hello\")\n(h4 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h4 {:onClick f} \"hello\")\n(h4 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h4 :#the-id.klass.other-klass \"hello\")\n(h4 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^80","^14","^15","^16",true],"^81",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(head \"hello\")\n(head nil \"hello\")\n\nThese two are made equivalent at compile time\n(head {:onClick f} \"hello\")\n(head #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(head :#the-id.klass.other-klass \"hello\")\n(head :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^82","^14","^15","^16",true],"~$g",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(g \"hello\")\n(g nil \"hello\")\n\nThese two are made equivalent at compile time\n(g {:onClick f} \"hello\")\n(g #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(g :#the-id.klass.other-klass \"hello\")\n(g :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^83","^14","^15","^16",true],"^84",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(missing-glyph \"hello\")\n(missing-glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(missing-glyph {:onClick f} \"hello\")\n(missing-glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(missing-glyph :#the-id.klass.other-klass \"hello\")\n(missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^85","^14","^15","^16",true],"^86",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(stop \"hello\")\n(stop nil \"hello\")\n\nThese two are made equivalent at compile time\n(stop {:onClick f} \"hello\")\n(stop #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(stop :#the-id.klass.other-klass \"hello\")\n(stop :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^87","^14","^15","^16",true],"^88",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDiffuseLighting \"hello\")\n(feDiffuseLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDiffuseLighting {:onClick f} \"hello\")\n(feDiffuseLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n(feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^89","^14","^15","^16",true],"^X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(filter \"hello\")\n(filter nil \"hello\")\n\nThese two are made equivalent at compile time\n(filter {:onClick f} \"hello\")\n(filter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(filter :#the-id.klass.other-klass \"hello\")\n(filter :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8:","^14","^15","^16",true],"^8;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComposite \"hello\")\n(feComposite nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComposite {:onClick f} \"hello\")\n(feComposite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComposite :#the-id.klass.other-klass \"hello\")\n(feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8<","^14","^15","^16",true],"^8=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mesh \"hello\")\n(mesh nil \"hello\")\n\nThese two are made equivalent at compile time\n(mesh {:onClick f} \"hello\")\n(mesh #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mesh :#the-id.klass.other-klass \"hello\")\n(mesh :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8>","^14","^15","^16",true],"^8?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(var \"hello\")\n(var nil \"hello\")\n\nThese two are made equivalent at compile time\n(var {:onClick f} \"hello\")\n(var #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(var :#the-id.klass.other-klass \"hello\")\n(var :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8@","^14","^15","^16",true],"^8A",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tspan \"hello\")\n(tspan nil \"hello\")\n\nThese two are made equivalent at compile time\n(tspan {:onClick f} \"hello\")\n(tspan #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tspan :#the-id.klass.other-klass \"hello\")\n(tspan :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8B","^14","^15","^16",true],"^8C",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ol \"hello\")\n(ol nil \"hello\")\n\nThese two are made equivalent at compile time\n(ol {:onClick f} \"hello\")\n(ol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ol :#the-id.klass.other-klass \"hello\")\n(ol :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8D","^14","^15","^16",true],"^8E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(details \"hello\")\n(details nil \"hello\")\n\nThese two are made equivalent at compile time\n(details {:onClick f} \"hello\")\n(details #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(details :#the-id.klass.other-klass \"hello\")\n(details :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8F","^14","^15","^16",true],"^8G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(line \"hello\")\n(line nil \"hello\")\n\nThese two are made equivalent at compile time\n(line {:onClick f} \"hello\")\n(line #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(line :#the-id.klass.other-klass \"hello\")\n(line :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8H","^14","^15","^16",true],"^8I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(col \"hello\")\n(col nil \"hello\")\n\nThese two are made equivalent at compile time\n(col {:onClick f} \"hello\")\n(col #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(col :#the-id.klass.other-klass \"hello\")\n(col :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8J","^14","^15","^16",true],"^8K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(label \"hello\")\n(label nil \"hello\")\n\nThese two are made equivalent at compile time\n(label {:onClick f} \"hello\")\n(label #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(label :#the-id.klass.other-klass \"hello\")\n(label :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8L","^14","^15","^16",true],"^8M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(picture \"hello\")\n(picture nil \"hello\")\n\nThese two are made equivalent at compile time\n(picture {:onClick f} \"hello\")\n(picture #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(picture :#the-id.klass.other-klass \"hello\")\n(picture :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8N","^14","^15","^16",true],"^8O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rt \"hello\")\n(rt nil \"hello\")\n\nThese two are made equivalent at compile time\n(rt {:onClick f} \"hello\")\n(rt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rt :#the-id.klass.other-klass \"hello\")\n(rt :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8P","^14","^15","^16",true],"^8Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h6 \"hello\")\n(h6 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h6 {:onClick f} \"hello\")\n(h6 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h6 :#the-id.klass.other-klass \"hello\")\n(h6 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8R","^14","^15","^16",true],"^8S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(vkern \"hello\")\n(vkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(vkern {:onClick f} \"hello\")\n(vkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(vkern :#the-id.klass.other-klass \"hello\")\n(vkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8T","^14","^15","^16",true],"^8U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(link \"hello\")\n(link nil \"hello\")\n\nThese two are made equivalent at compile time\n(link {:onClick f} \"hello\")\n(link #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(link :#the-id.klass.other-klass \"hello\")\n(link :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8V","^14","^15","^16",true],"^8W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(defs \"hello\")\n(defs nil \"hello\")\n\nThese two are made equivalent at compile time\n(defs {:onClick f} \"hello\")\n(defs #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(defs :#the-id.klass.other-klass \"hello\")\n(defs :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8X","^14","^15","^16",true],"^8Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyph \"hello\")\n(glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyph {:onClick f} \"hello\")\n(glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyph :#the-id.klass.other-klass \"hello\")\n(glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8Z","^14","^15","^16",true],"^8[",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(colgroup \"hello\")\n(colgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(colgroup {:onClick f} \"hello\")\n(colgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(colgroup :#the-id.klass.other-klass \"hello\")\n(colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^90","^14","^15","^16",true],"^91",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meter \"hello\")\n(meter nil \"hello\")\n\nThese two are made equivalent at compile time\n(meter {:onClick f} \"hello\")\n(meter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meter :#the-id.klass.other-klass \"hello\")\n(meter :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^92","^14","^15","^16",true],"^93",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdo \"hello\")\n(bdo nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdo {:onClick f} \"hello\")\n(bdo #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdo :#the-id.klass.other-klass \"hello\")\n(bdo :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^94","^14","^15","^16",true],"^95",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feImage \"hello\")\n(feImage nil \"hello\")\n\nThese two are made equivalent at compile time\n(feImage {:onClick f} \"hello\")\n(feImage #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feImage :#the-id.klass.other-klass \"hello\")\n(feImage :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^96","^14","^15","^16",true],"~$b",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(b \"hello\")\n(b nil \"hello\")\n\nThese two are made equivalent at compile time\n(b {:onClick f} \"hello\")\n(b #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(b :#the-id.klass.other-klass \"hello\")\n(b :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^97","^14","^15","^16",true],"^98",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(svg \"hello\")\n(svg nil \"hello\")\n\nThese two are made equivalent at compile time\n(svg {:onClick f} \"hello\")\n(svg #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(svg :#the-id.klass.other-klass \"hello\")\n(svg :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^99","^14","^15","^16",true],"^9:",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTile \"hello\")\n(feTile nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTile {:onClick f} \"hello\")\n(feTile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTile :#the-id.klass.other-klass \"hello\")\n(feTile :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9;","^14","^15","^16",true],"^9<",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ellipse \"hello\")\n(ellipse nil \"hello\")\n\nThese two are made equivalent at compile time\n(ellipse {:onClick f} \"hello\")\n(ellipse #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ellipse :#the-id.klass.other-klass \"hello\")\n(ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9=","^14","^15","^16",true],"^9>",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(code \"hello\")\n(code nil \"hello\")\n\nThese two are made equivalent at compile time\n(code {:onClick f} \"hello\")\n(code #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(code :#the-id.klass.other-klass \"hello\")\n(code :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9?","^14","^15","^16",true],"^9@",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dialog \"hello\")\n(dialog nil \"hello\")\n\nThese two are made equivalent at compile time\n(dialog {:onClick f} \"hello\")\n(dialog #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dialog :#the-id.klass.other-klass \"hello\")\n(dialog :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9A","^14","^15","^16",true],"^9B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(linearGradient \"hello\")\n(linearGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(linearGradient {:onClick f} \"hello\")\n(linearGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(linearGradient :#the-id.klass.other-klass \"hello\")\n(linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9C","^14","^15","^16",true],"^9D",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(discard \"hello\")\n(discard nil \"hello\")\n\nThese two are made equivalent at compile time\n(discard {:onClick f} \"hello\")\n(discard #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(discard :#the-id.klass.other-klass \"hello\")\n(discard :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9E","^14","^15","^16",true],"^9F",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-src \"hello\")\n(font-face-src nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-src {:onClick f} \"hello\")\n(font-face-src #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-src :#the-id.klass.other-klass \"hello\")\n(font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9G","^14","^15","^16",true],"^9H",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(noscript \"hello\")\n(noscript nil \"hello\")\n\nThese two are made equivalent at compile time\n(noscript {:onClick f} \"hello\")\n(noscript #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(noscript :#the-id.klass.other-klass \"hello\")\n(noscript :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9I","^14","^15","^16",true],"^9J",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateTransform \"hello\")\n(animateTransform nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateTransform {:onClick f} \"hello\")\n(animateTransform #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateTransform :#the-id.klass.other-klass \"hello\")\n(animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9K","^14","^15","^16",true],"^9L",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feColorMatrix \"hello\")\n(feColorMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feColorMatrix {:onClick f} \"hello\")\n(feColorMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feColorMatrix :#the-id.klass.other-klass \"hello\")\n(feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9M","^14","^15","^16",true],"^9N",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h2 \"hello\")\n(h2 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h2 {:onClick f} \"hello\")\n(h2 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h2 :#the-id.klass.other-klass \"hello\")\n(h2 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9O","^14","^15","^16",true],"^9P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(area \"hello\")\n(area nil \"hello\")\n\nThese two are made equivalent at compile time\n(area {:onClick f} \"hello\")\n(area #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(area :#the-id.klass.other-klass \"hello\")\n(area :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9Q","^14","^15","^16",true],"^9R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(br \"hello\")\n(br nil \"hello\")\n\nThese two are made equivalent at compile time\n(br {:onClick f} \"hello\")\n(br #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(br :#the-id.klass.other-klass \"hello\")\n(br :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9S","^14","^15","^16",true],"^9T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(image \"hello\")\n(image nil \"hello\")\n\nThese two are made equivalent at compile time\n(image {:onClick f} \"hello\")\n(image #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(image :#the-id.klass.other-klass \"hello\")\n(image :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9U","^14","^15","^16",true]],"~:shadow/js-access-properties",["^O",["onChange","createElement","createFactory","findDOMNode","render","Component","componentWillReceiveProps","renderToString"]],"^12","^15","^9W",null,"^9X",["^ ","^?","^@","^9Y","^9Y","^9Z","^9[","^:0","^:1","^B","^B","^:2","^:3","^:4","^:4","^:3","^:3","^:5","^:5","^:6","^:6","^:7","^:7","^:8","^:5","^:9","^9Y","~$s","^@","^:1","^:1","^9[","^9[","^::","^:;","^:;","^:;","^@","^@"],"^:<",["^O",["^:=","^:>"]],"~:shadow/js-access-global",["^O",["ReactDOMServer","React","ReactDOM","Error"]],"^:?",null,"~:defs",["^ ","^Z",["^ ","~:protocol-inline",null,"^5",["^ ","^[",["^10",["~$quote",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(form \"hello\")\n(form nil \"hello\")\n\nThese two are made equivalent at compile time\n(form {:onClick f} \"hello\")\n(form #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(form :#the-id.klass.other-klass \"hello\")\n(form :#the-id.klass.other-klass {:onClick f} \"hello\")","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",0,"~:max-fixed-arity",0,"~:method-params",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"~:arglists-meta",["^10",[null]]],"^7",null],"^12","^13","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"~:protocol-impl",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"~:methods",[["^ ","^?F",0,"^?E",true,"~:tag","~$any"]],"^8",226,"~:ret-tag","^?M","^?G",0,"~:fn-var",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(form \"hello\")\n(form nil \"hello\")\n\nThese two are made equivalent at compile time\n(form {:onClick f} \"hello\")\n(form #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(form :#the-id.klass.other-klass \"hello\")\n(form :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^17",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(audio \"hello\")\n(audio nil \"hello\")\n\nThese two are made equivalent at compile time\n(audio {:onClick f} \"hello\")\n(audio #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(audio :#the-id.klass.other-klass \"hello\")\n(audio :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^18","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(audio \"hello\")\n(audio nil \"hello\")\n\nThese two are made equivalent at compile time\n(audio {:onClick f} \"hello\")\n(audio #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(audio :#the-id.klass.other-klass \"hello\")\n(audio :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^19",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(input \"hello\")\n(input nil \"hello\")\n\nThese two are made equivalent at compile time\n(input {:onClick f} \"hello\")\n(input #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(input :#the-id.klass.other-klass \"hello\")\n(input :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1:","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(input \"hello\")\n(input nil \"hello\")\n\nThese two are made equivalent at compile time\n(input {:onClick f} \"hello\")\n(input #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(input :#the-id.klass.other-klass \"hello\")\n(input :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1;",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menuitem \"hello\")\n(menuitem nil \"hello\")\n\nThese two are made equivalent at compile time\n(menuitem {:onClick f} \"hello\")\n(menuitem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menuitem :#the-id.klass.other-klass \"hello\")\n(menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1<","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menuitem \"hello\")\n(menuitem nil \"hello\")\n\nThese two are made equivalent at compile time\n(menuitem {:onClick f} \"hello\")\n(menuitem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menuitem :#the-id.klass.other-klass \"hello\")\n(menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1=",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(radialGradient \"hello\")\n(radialGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(radialGradient {:onClick f} \"hello\")\n(radialGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(radialGradient :#the-id.klass.other-klass \"hello\")\n(radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1>","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(radialGradient \"hello\")\n(radialGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(radialGradient {:onClick f} \"hello\")\n(radialGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(radialGradient :#the-id.klass.other-klass \"hello\")\n(radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1?",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMerge \"hello\")\n(feMerge nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMerge {:onClick f} \"hello\")\n(feMerge #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMerge :#the-id.klass.other-klass \"hello\")\n(feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1@","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMerge \"hello\")\n(feMerge nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMerge {:onClick f} \"hello\")\n(feMerge #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMerge :#the-id.klass.other-klass \"hello\")\n(feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^P",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(set \"hello\")\n(set nil \"hello\")\n\nThese two are made equivalent at compile time\n(set {:onClick f} \"hello\")\n(set #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(set :#the-id.klass.other-klass \"hello\")\n(set :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1A","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(set \"hello\")\n(set nil \"hello\")\n\nThese two are made equivalent at compile time\n(set {:onClick f} \"hello\")\n(set #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(set :#the-id.klass.other-klass \"hello\")\n(set :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1B",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpecularLighting \"hello\")\n(feSpecularLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpecularLighting {:onClick f} \"hello\")\n(feSpecularLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpecularLighting :#the-id.klass.other-klass \"hello\")\n(feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1C","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpecularLighting \"hello\")\n(feSpecularLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpecularLighting {:onClick f} \"hello\")\n(feSpecularLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpecularLighting :#the-id.klass.other-klass \"hello\")\n(feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1D",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(base \"hello\")\n(base nil \"hello\")\n\nThese two are made equivalent at compile time\n(base {:onClick f} \"hello\")\n(base #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(base :#the-id.klass.other-klass \"hello\")\n(base :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1E","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(base \"hello\")\n(base nil \"hello\")\n\nThese two are made equivalent at compile time\n(base {:onClick f} \"hello\")\n(base #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(base :#the-id.klass.other-klass \"hello\")\n(base :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1F",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h1 \"hello\")\n(h1 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h1 {:onClick f} \"hello\")\n(h1 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h1 :#the-id.klass.other-klass \"hello\")\n(h1 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1G","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h1 \"hello\")\n(h1 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h1 {:onClick f} \"hello\")\n(h1 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h1 :#the-id.klass.other-klass \"hello\")\n(h1 :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$macro-create-element*",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",94,"^9",7,"^:",94,"^;",28,"^[",["^10",["^?C",["^10",[["~$arr"]]]]],"^6","Used internally by the DOM element generation."],"^12","~$com.fulcrologic.fulcro.dom/macro-create-element*","^7","com/fulcrologic/fulcro/dom.cljs","^;",28,"^?H",["^10",[["^?Q"]]],"^?J",null,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^8",94,"^?N","~$js","^:",94,"^?G",1,"^?O",true,"^[",["^10",["^?C",["^10",[["^?Q"]]]]],"^6","Used internally by the DOM element generation."],"^1H",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feOffset \"hello\")\n(feOffset nil \"hello\")\n\nThese two are made equivalent at compile time\n(feOffset {:onClick f} \"hello\")\n(feOffset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feOffset :#the-id.klass.other-klass \"hello\")\n(feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1I","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feOffset \"hello\")\n(feOffset nil \"hello\")\n\nThese two are made equivalent at compile time\n(feOffset {:onClick f} \"hello\")\n(feOffset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feOffset :#the-id.klass.other-klass \"hello\")\n(feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1J",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(embed \"hello\")\n(embed nil \"hello\")\n\nThese two are made equivalent at compile time\n(embed {:onClick f} \"hello\")\n(embed #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(embed :#the-id.klass.other-klass \"hello\")\n(embed :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1K","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(embed \"hello\")\n(embed nil \"hello\")\n\nThese two are made equivalent at compile time\n(embed {:onClick f} \"hello\")\n(embed #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(embed :#the-id.klass.other-klass \"hello\")\n(embed :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1L",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateMotion \"hello\")\n(animateMotion nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateMotion {:onClick f} \"hello\")\n(animateMotion #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateMotion :#the-id.klass.other-klass \"hello\")\n(animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1M","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateMotion \"hello\")\n(animateMotion nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateMotion {:onClick f} \"hello\")\n(animateMotion #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateMotion :#the-id.klass.other-klass \"hello\")\n(animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1N",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h3 \"hello\")\n(h3 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h3 {:onClick f} \"hello\")\n(h3 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h3 :#the-id.klass.other-klass \"hello\")\n(h3 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1O","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h3 \"hello\")\n(h3 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h3 {:onClick f} \"hello\")\n(h3 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h3 :#the-id.klass.other-klass \"hello\")\n(h3 :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1P",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(body \"hello\")\n(body nil \"hello\")\n\nThese two are made equivalent at compile time\n(body {:onClick f} \"hello\")\n(body #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(body :#the-id.klass.other-klass \"hello\")\n(body :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1Q","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(body \"hello\")\n(body nil \"hello\")\n\nThese two are made equivalent at compile time\n(body {:onClick f} \"hello\")\n(body #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(body :#the-id.klass.other-klass \"hello\")\n(body :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1R",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hkern \"hello\")\n(hkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(hkern {:onClick f} \"hello\")\n(hkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hkern :#the-id.klass.other-klass \"hello\")\n(hkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1S","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hkern \"hello\")\n(hkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(hkern {:onClick f} \"hello\")\n(hkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hkern :#the-id.klass.other-klass \"hello\")\n(hkern :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1T",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(keygen \"hello\")\n(keygen nil \"hello\")\n\nThese two are made equivalent at compile time\n(keygen {:onClick f} \"hello\")\n(keygen #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(keygen :#the-id.klass.other-klass \"hello\")\n(keygen :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1U","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(keygen \"hello\")\n(keygen nil \"hello\")\n\nThese two are made equivalent at compile time\n(keygen {:onClick f} \"hello\")\n(keygen #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(keygen :#the-id.klass.other-klass \"hello\")\n(keygen :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1V",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-format \"hello\")\n(font-face-format nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-format {:onClick f} \"hello\")\n(font-face-format #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-format :#the-id.klass.other-klass \"hello\")\n(font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1W","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-format \"hello\")\n(font-face-format nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-format {:onClick f} \"hello\")\n(font-face-format #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-format :#the-id.klass.other-klass \"hello\")\n(font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$wrapped-textarea",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",172,"^9",6,"^:",172,"^;",22],"^12","~$com.fulcrologic.fulcro.dom/wrapped-textarea","^7","com/fulcrologic/fulcro/dom.cljs","^;",22,"^9",1,"^8",172,"^:",172,"^?L","~$function","^6","Low-level form input, with no syntactic sugar. Used internally by DOM macros"],"^1X",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncA \"hello\")\n(feFuncA nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncA {:onClick f} \"hello\")\n(feFuncA #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncA :#the-id.klass.other-klass \"hello\")\n(feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1Y","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncA \"hello\")\n(feFuncA nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncA {:onClick f} \"hello\")\n(feFuncA #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncA :#the-id.klass.other-klass \"hello\")\n(feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1Z",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(progress \"hello\")\n(progress nil \"hello\")\n\nThese two are made equivalent at compile time\n(progress {:onClick f} \"hello\")\n(progress #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(progress :#the-id.klass.other-klass \"hello\")\n(progress :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^1[","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(progress \"hello\")\n(progress nil \"hello\")\n\nThese two are made equivalent at compile time\n(progress {:onClick f} \"hello\")\n(progress #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(progress :#the-id.klass.other-klass \"hello\")\n(progress :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^20",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(main \"hello\")\n(main nil \"hello\")\n\nThese two are made equivalent at compile time\n(main {:onClick f} \"hello\")\n(main #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(main :#the-id.klass.other-klass \"hello\")\n(main :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^21","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(main \"hello\")\n(main nil \"hello\")\n\nThese two are made equivalent at compile time\n(main {:onClick f} \"hello\")\n(main #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(main :#the-id.klass.other-klass \"hello\")\n(main :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^22",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cite \"hello\")\n(cite nil \"hello\")\n\nThese two are made equivalent at compile time\n(cite {:onClick f} \"hello\")\n(cite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cite :#the-id.klass.other-klass \"hello\")\n(cite :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^23","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cite \"hello\")\n(cite nil \"hello\")\n\nThese two are made equivalent at compile time\n(cite {:onClick f} \"hello\")\n(cite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cite :#the-id.klass.other-klass \"hello\")\n(cite :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^24",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rect \"hello\")\n(rect nil \"hello\")\n\nThese two are made equivalent at compile time\n(rect {:onClick f} \"hello\")\n(rect #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rect :#the-id.klass.other-klass \"hello\")\n(rect :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^25","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rect \"hello\")\n(rect nil \"hello\")\n\nThese two are made equivalent at compile time\n(rect {:onClick f} \"hello\")\n(rect #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rect :#the-id.klass.other-klass \"hello\")\n(rect :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^26",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tref \"hello\")\n(tref nil \"hello\")\n\nThese two are made equivalent at compile time\n(tref {:onClick f} \"hello\")\n(tref #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tref :#the-id.klass.other-klass \"hello\")\n(tref :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^27","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tref \"hello\")\n(tref nil \"hello\")\n\nThese two are made equivalent at compile time\n(tref {:onClick f} \"hello\")\n(tref #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tref :#the-id.klass.other-klass \"hello\")\n(tref :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^28",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshpatch \"hello\")\n(meshpatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshpatch {:onClick f} \"hello\")\n(meshpatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshpatch :#the-id.klass.other-klass \"hello\")\n(meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^29","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshpatch \"hello\")\n(meshpatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshpatch {:onClick f} \"hello\")\n(meshpatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshpatch :#the-id.klass.other-klass \"hello\")\n(meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2:",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polyline \"hello\")\n(polyline nil \"hello\")\n\nThese two are made equivalent at compile time\n(polyline {:onClick f} \"hello\")\n(polyline #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polyline :#the-id.klass.other-klass \"hello\")\n(polyline :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2;","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polyline \"hello\")\n(polyline nil \"hello\")\n\nThese two are made equivalent at compile time\n(polyline {:onClick f} \"hello\")\n(polyline #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polyline :#the-id.klass.other-klass \"hello\")\n(polyline :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2<",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(metadata \"hello\")\n(metadata nil \"hello\")\n\nThese two are made equivalent at compile time\n(metadata {:onClick f} \"hello\")\n(metadata #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(metadata :#the-id.klass.other-klass \"hello\")\n(metadata :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2=","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(metadata \"hello\")\n(metadata nil \"hello\")\n\nThese two are made equivalent at compile time\n(metadata {:onClick f} \"hello\")\n(metadata #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(metadata :#the-id.klass.other-klass \"hello\")\n(metadata :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^Q",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(map \"hello\")\n(map nil \"hello\")\n\nThese two are made equivalent at compile time\n(map {:onClick f} \"hello\")\n(map #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(map :#the-id.klass.other-klass \"hello\")\n(map :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2>","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(map \"hello\")\n(map nil \"hello\")\n\nThese two are made equivalent at compile time\n(map {:onClick f} \"hello\")\n(map #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(map :#the-id.klass.other-klass \"hello\")\n(map :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$arr-append",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",180,"^9",8,"^:",180,"^;",18,"~:private",true,"^[",["^10",["^?C",["^10",[["^?Q","~$tail"]]]]]],"^?X",true,"^12","~$com.fulcrologic.fulcro.dom/arr-append","^7","com/fulcrologic/fulcro/dom.cljs","^;",18,"^?H",["^10",[["^?Q","^?Y"]]],"^?J",null,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^8",180,"^?N",["^O",[null,"^?M"]],"^:",180,"^?G",2,"^?O",true,"^[",["^10",["^?C",["^10",[["^?Q","^?Y"]]]]]],"^2?",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(object \"hello\")\n(object nil \"hello\")\n\nThese two are made equivalent at compile time\n(object {:onClick f} \"hello\")\n(object #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(object :#the-id.klass.other-klass \"hello\")\n(object :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2@","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(object \"hello\")\n(object nil \"hello\")\n\nThese two are made equivalent at compile time\n(object {:onClick f} \"hello\")\n(object #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(object :#the-id.klass.other-klass \"hello\")\n(object :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$update-state",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",100,"^9",8,"^:",100,"^;",20,"^?X",true,"^[",["^10",["^?C",["^10",[["~$component","~$next-props","~$value"]]]]],"^6","Updates the state of the wrapped input element."],"^?X",true,"^12","~$com.fulcrologic.fulcro.dom/update-state","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^?H",["^10",[["^@0","^@1","^@2"]]],"^?J",null,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^8",100,"^?N","^?M","^:",100,"^?G",3,"^?O",true,"^[",["^10",["^?C",["^10",[["^@0","^@1","^@2"]]]]],"^6","Updates the state of the wrapped input element."],"~$i",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(i \"hello\")\n(i nil \"hello\")\n\nThese two are made equivalent at compile time\n(i {:onClick f} \"hello\")\n(i #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(i :#the-id.klass.other-klass \"hello\")\n(i :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2A","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(i \"hello\")\n(i nil \"hello\")\n\nThese two are made equivalent at compile time\n(i {:onClick f} \"hello\")\n(i #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(i :#the-id.klass.other-klass \"hello\")\n(i :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2B",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-name \"hello\")\n(font-face-name nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-name {:onClick f} \"hello\")\n(font-face-name #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-name :#the-id.klass.other-klass \"hello\")\n(font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2C","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-name \"hello\")\n(font-face-name nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-name {:onClick f} \"hello\")\n(font-face-name #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-name :#the-id.klass.other-klass \"hello\")\n(font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$p",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(p \"hello\")\n(p nil \"hello\")\n\nThese two are made equivalent at compile time\n(p {:onClick f} \"hello\")\n(p #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(p :#the-id.klass.other-klass \"hello\")\n(p :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2D","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(p \"hello\")\n(p nil \"hello\")\n\nThese two are made equivalent at compile time\n(p {:onClick f} \"hello\")\n(p #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(p :#the-id.klass.other-klass \"hello\")\n(p :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2E",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncR \"hello\")\n(feFuncR nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncR {:onClick f} \"hello\")\n(feFuncR #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncR :#the-id.klass.other-klass \"hello\")\n(feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2F","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncR \"hello\")\n(feFuncR nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncR {:onClick f} \"hello\")\n(feFuncR #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncR :#the-id.klass.other-klass \"hello\")\n(feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2G",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatchpath \"hello\")\n(hatchpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatchpath {:onClick f} \"hello\")\n(hatchpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatchpath :#the-id.klass.other-klass \"hello\")\n(hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2H","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatchpath \"hello\")\n(hatchpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatchpath {:onClick f} \"hello\")\n(hatchpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatchpath :#the-id.klass.other-klass \"hello\")\n(hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2I",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphItem \"hello\")\n(altGlyphItem nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphItem {:onClick f} \"hello\")\n(altGlyphItem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphItem :#the-id.klass.other-klass \"hello\")\n(altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2J","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphItem \"hello\")\n(altGlyphItem nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphItem {:onClick f} \"hello\")\n(altGlyphItem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphItem :#the-id.klass.other-klass \"hello\")\n(altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2K",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(nav \"hello\")\n(nav nil \"hello\")\n\nThese two are made equivalent at compile time\n(nav {:onClick f} \"hello\")\n(nav #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(nav :#the-id.klass.other-klass \"hello\")\n(nav :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2L","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(nav \"hello\")\n(nav nil \"hello\")\n\nThese two are made equivalent at compile time\n(nav {:onClick f} \"hello\")\n(nav #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(nav :#the-id.klass.other-klass \"hello\")\n(nav :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2M",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ruby \"hello\")\n(ruby nil \"hello\")\n\nThese two are made equivalent at compile time\n(ruby {:onClick f} \"hello\")\n(ruby #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ruby :#the-id.klass.other-klass \"hello\")\n(ruby :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2N","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ruby \"hello\")\n(ruby nil \"hello\")\n\nThese two are made equivalent at compile time\n(ruby {:onClick f} \"hello\")\n(ruby #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ruby :#the-id.klass.other-klass \"hello\")\n(ruby :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2O",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(switch \"hello\")\n(switch nil \"hello\")\n\nThese two are made equivalent at compile time\n(switch {:onClick f} \"hello\")\n(switch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(switch :#the-id.klass.other-klass \"hello\")\n(switch :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2P","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(switch \"hello\")\n(switch nil \"hello\")\n\nThese two are made equivalent at compile time\n(switch {:onClick f} \"hello\")\n(switch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(switch :#the-id.klass.other-klass \"hello\")\n(switch :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$a",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(a \"hello\")\n(a nil \"hello\")\n\nThese two are made equivalent at compile time\n(a {:onClick f} \"hello\")\n(a #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(a :#the-id.klass.other-klass \"hello\")\n(a :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2Q","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(a \"hello\")\n(a nil \"hello\")\n\nThese two are made equivalent at compile time\n(a {:onClick f} \"hello\")\n(a #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(a :#the-id.klass.other-klass \"hello\")\n(a :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2U",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(view \"hello\")\n(view nil \"hello\")\n\nThese two are made equivalent at compile time\n(view {:onClick f} \"hello\")\n(view #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(view :#the-id.klass.other-klass \"hello\")\n(view :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2V","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(view \"hello\")\n(view nil \"hello\")\n\nThese two are made equivalent at compile time\n(view {:onClick f} \"hello\")\n(view #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(view :#the-id.klass.other-klass \"hello\")\n(view :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2W",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menu \"hello\")\n(menu nil \"hello\")\n\nThese two are made equivalent at compile time\n(menu {:onClick f} \"hello\")\n(menu #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menu :#the-id.klass.other-klass \"hello\")\n(menu :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2X","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menu \"hello\")\n(menu nil \"hello\")\n\nThese two are made equivalent at compile time\n(menu {:onClick f} \"hello\")\n(menu #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menu :#the-id.klass.other-klass \"hello\")\n(menu :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2Y",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(blockquote \"hello\")\n(blockquote nil \"hello\")\n\nThese two are made equivalent at compile time\n(blockquote {:onClick f} \"hello\")\n(blockquote #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(blockquote :#the-id.klass.other-klass \"hello\")\n(blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^2Z","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(blockquote \"hello\")\n(blockquote nil \"hello\")\n\nThese two are made equivalent at compile time\n(blockquote {:onClick f} \"hello\")\n(blockquote #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(blockquote :#the-id.klass.other-klass \"hello\")\n(blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2[",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(img \"hello\")\n(img nil \"hello\")\n\nThese two are made equivalent at compile time\n(img {:onClick f} \"hello\")\n(img #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(img :#the-id.klass.other-klass \"hello\")\n(img :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^30","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(img \"hello\")\n(img nil \"hello\")\n\nThese two are made equivalent at compile time\n(img {:onClick f} \"hello\")\n(img #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(img :#the-id.klass.other-klass \"hello\")\n(img :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^31",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncG \"hello\")\n(feFuncG nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncG {:onClick f} \"hello\")\n(feFuncG #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncG :#the-id.klass.other-klass \"hello\")\n(feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^32","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncG \"hello\")\n(feFuncG nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncG {:onClick f} \"hello\")\n(feFuncG #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncG :#the-id.klass.other-klass \"hello\")\n(feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^33",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(text \"hello\")\n(text nil \"hello\")\n\nThese two are made equivalent at compile time\n(text {:onClick f} \"hello\")\n(text #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(text :#the-id.klass.other-klass \"hello\")\n(text :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^34","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(text \"hello\")\n(text nil \"hello\")\n\nThese two are made equivalent at compile time\n(text {:onClick f} \"hello\")\n(text #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(text :#the-id.klass.other-klass \"hello\")\n(text :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^35",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(span \"hello\")\n(span nil \"hello\")\n\nThese two are made equivalent at compile time\n(span {:onClick f} \"hello\")\n(span #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(span :#the-id.klass.other-klass \"hello\")\n(span :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^36","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(span \"hello\")\n(span nil \"hello\")\n\nThese two are made equivalent at compile time\n(span {:onClick f} \"hello\")\n(span #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(span :#the-id.klass.other-klass \"hello\")\n(span :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^37",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(track \"hello\")\n(track nil \"hello\")\n\nThese two are made equivalent at compile time\n(track {:onClick f} \"hello\")\n(track #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(track :#the-id.klass.other-klass \"hello\")\n(track :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^38","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(track \"hello\")\n(track nil \"hello\")\n\nThese two are made equivalent at compile time\n(track {:onClick f} \"hello\")\n(track #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(track :#the-id.klass.other-klass \"hello\")\n(track :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^39",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(data \"hello\")\n(data nil \"hello\")\n\nThese two are made equivalent at compile time\n(data {:onClick f} \"hello\")\n(data #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(data :#the-id.klass.other-klass \"hello\")\n(data :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3:","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(data \"hello\")\n(data nil \"hello\")\n\nThese two are made equivalent at compile time\n(data {:onClick f} \"hello\")\n(data #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(data :#the-id.klass.other-klass \"hello\")\n(data :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$u",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(u \"hello\")\n(u nil \"hello\")\n\nThese two are made equivalent at compile time\n(u {:onClick f} \"hello\")\n(u #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(u :#the-id.klass.other-klass \"hello\")\n(u :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3;","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(u \"hello\")\n(u nil \"hello\")\n\nThese two are made equivalent at compile time\n(u {:onClick f} \"hello\")\n(u #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(u :#the-id.klass.other-klass \"hello\")\n(u :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3<",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dl \"hello\")\n(dl nil \"hello\")\n\nThese two are made equivalent at compile time\n(dl {:onClick f} \"hello\")\n(dl #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dl :#the-id.klass.other-klass \"hello\")\n(dl :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3=","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dl \"hello\")\n(dl nil \"hello\")\n\nThese two are made equivalent at compile time\n(dl {:onClick f} \"hello\")\n(dl #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dl :#the-id.klass.other-klass \"hello\")\n(dl :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^R",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(select \"hello\")\n(select nil \"hello\")\n\nThese two are made equivalent at compile time\n(select {:onClick f} \"hello\")\n(select #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(select :#the-id.klass.other-klass \"hello\")\n(select :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3>","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(select \"hello\")\n(select nil \"hello\")\n\nThese two are made equivalent at compile time\n(select {:onClick f} \"hello\")\n(select #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(select :#the-id.klass.other-klass \"hello\")\n(select :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3?",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polygon \"hello\")\n(polygon nil \"hello\")\n\nThese two are made equivalent at compile time\n(polygon {:onClick f} \"hello\")\n(polygon #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polygon :#the-id.klass.other-klass \"hello\")\n(polygon :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3@","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polygon \"hello\")\n(polygon nil \"hello\")\n\nThese two are made equivalent at compile time\n(polygon {:onClick f} \"hello\")\n(polygon #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polygon :#the-id.klass.other-klass \"hello\")\n(polygon :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3A",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pattern \"hello\")\n(pattern nil \"hello\")\n\nThese two are made equivalent at compile time\n(pattern {:onClick f} \"hello\")\n(pattern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pattern :#the-id.klass.other-klass \"hello\")\n(pattern :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3B","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pattern \"hello\")\n(pattern nil \"hello\")\n\nThese two are made equivalent at compile time\n(pattern {:onClick f} \"hello\")\n(pattern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pattern :#the-id.klass.other-klass \"hello\")\n(pattern :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3C",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(html \"hello\")\n(html nil \"hello\")\n\nThese two are made equivalent at compile time\n(html {:onClick f} \"hello\")\n(html #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(html :#the-id.klass.other-klass \"hello\")\n(html :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3D","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(html \"hello\")\n(html nil \"hello\")\n\nThese two are made equivalent at compile time\n(html {:onClick f} \"hello\")\n(html #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(html :#the-id.klass.other-klass \"hello\")\n(html :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3E",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(foreignObject \"hello\")\n(foreignObject nil \"hello\")\n\nThese two are made equivalent at compile time\n(foreignObject {:onClick f} \"hello\")\n(foreignObject #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(foreignObject :#the-id.klass.other-klass \"hello\")\n(foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3F","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(foreignObject \"hello\")\n(foreignObject nil \"hello\")\n\nThese two are made equivalent at compile time\n(foreignObject {:onClick f} \"hello\")\n(foreignObject #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(foreignObject :#the-id.klass.other-klass \"hello\")\n(foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3G",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(thead \"hello\")\n(thead nil \"hello\")\n\nThese two are made equivalent at compile time\n(thead {:onClick f} \"hello\")\n(thead #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(thead :#the-id.klass.other-klass \"hello\")\n(thead :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3H","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(thead \"hello\")\n(thead nil \"hello\")\n\nThese two are made equivalent at compile time\n(thead {:onClick f} \"hello\")\n(thead #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(thead :#the-id.klass.other-klass \"hello\")\n(thead :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3I",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(path \"hello\")\n(path nil \"hello\")\n\nThese two are made equivalent at compile time\n(path {:onClick f} \"hello\")\n(path #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(path :#the-id.klass.other-klass \"hello\")\n(path :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3J","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(path \"hello\")\n(path nil \"hello\")\n\nThese two are made equivalent at compile time\n(path {:onClick f} \"hello\")\n(path #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(path :#the-id.klass.other-klass \"hello\")\n(path :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3K",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(del \"hello\")\n(del nil \"hello\")\n\nThese two are made equivalent at compile time\n(del {:onClick f} \"hello\")\n(del #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(del :#the-id.klass.other-klass \"hello\")\n(del :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3L","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(del \"hello\")\n(del nil \"hello\")\n\nThese two are made equivalent at compile time\n(del {:onClick f} \"hello\")\n(del #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(del :#the-id.klass.other-klass \"hello\")\n(del :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3M",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyph \"hello\")\n(altGlyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyph {:onClick f} \"hello\")\n(altGlyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyph :#the-id.klass.other-klass \"hello\")\n(altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3N","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyph \"hello\")\n(altGlyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyph {:onClick f} \"hello\")\n(altGlyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyph :#the-id.klass.other-klass \"hello\")\n(altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3O",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fieldset \"hello\")\n(fieldset nil \"hello\")\n\nThese two are made equivalent at compile time\n(fieldset {:onClick f} \"hello\")\n(fieldset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fieldset :#the-id.klass.other-klass \"hello\")\n(fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3P","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fieldset \"hello\")\n(fieldset nil \"hello\")\n\nThese two are made equivalent at compile time\n(fieldset {:onClick f} \"hello\")\n(fieldset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fieldset :#the-id.klass.other-klass \"hello\")\n(fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$wrapped-input",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",171,"^9",6,"^:",171,"^;",19],"^12","~$com.fulcrologic.fulcro.dom/wrapped-input","^7","com/fulcrologic/fulcro/dom.cljs","^;",19,"^9",1,"^8",171,"^:",171,"^?L","^?V","^6","Low-level form input, with no syntactic sugar. Used internally by DOM macros"],"^3Q",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(aside \"hello\")\n(aside nil \"hello\")\n\nThese two are made equivalent at compile time\n(aside {:onClick f} \"hello\")\n(aside #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(aside :#the-id.klass.other-klass \"hello\")\n(aside :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3R","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(aside \"hello\")\n(aside nil \"hello\")\n\nThese two are made equivalent at compile time\n(aside {:onClick f} \"hello\")\n(aside #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(aside :#the-id.klass.other-klass \"hello\")\n(aside :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3S",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feBlend \"hello\")\n(feBlend nil \"hello\")\n\nThese two are made equivalent at compile time\n(feBlend {:onClick f} \"hello\")\n(feBlend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feBlend :#the-id.klass.other-klass \"hello\")\n(feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3T","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feBlend \"hello\")\n(feBlend nil \"hello\")\n\nThese two are made equivalent at compile time\n(feBlend {:onClick f} \"hello\")\n(feBlend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feBlend :#the-id.klass.other-klass \"hello\")\n(feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3U",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figure \"hello\")\n(figure nil \"hello\")\n\nThese two are made equivalent at compile time\n(figure {:onClick f} \"hello\")\n(figure #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figure :#the-id.klass.other-klass \"hello\")\n(figure :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3V","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figure \"hello\")\n(figure nil \"hello\")\n\nThese two are made equivalent at compile time\n(figure {:onClick f} \"hello\")\n(figure #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figure :#the-id.klass.other-klass \"hello\")\n(figure :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3W",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textPath \"hello\")\n(textPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(textPath {:onClick f} \"hello\")\n(textPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textPath :#the-id.klass.other-klass \"hello\")\n(textPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3X","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textPath \"hello\")\n(textPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(textPath {:onClick f} \"hello\")\n(textPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textPath :#the-id.klass.other-klass \"hello\")\n(textPath :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3Y",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figcaption \"hello\")\n(figcaption nil \"hello\")\n\nThese two are made equivalent at compile time\n(figcaption {:onClick f} \"hello\")\n(figcaption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figcaption :#the-id.klass.other-klass \"hello\")\n(figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3Z","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figcaption \"hello\")\n(figcaption nil \"hello\")\n\nThese two are made equivalent at compile time\n(figcaption {:onClick f} \"hello\")\n(figcaption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figcaption :#the-id.klass.other-klass \"hello\")\n(figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^S",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mask \"hello\")\n(mask nil \"hello\")\n\nThese two are made equivalent at compile time\n(mask {:onClick f} \"hello\")\n(mask #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mask :#the-id.klass.other-klass \"hello\")\n(mask :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^3[","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mask \"hello\")\n(mask nil \"hello\")\n\nThese two are made equivalent at compile time\n(mask {:onClick f} \"hello\")\n(mask #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mask :#the-id.klass.other-klass \"hello\")\n(mask :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$q",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(q \"hello\")\n(q nil \"hello\")\n\nThese two are made equivalent at compile time\n(q {:onClick f} \"hello\")\n(q #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(q :#the-id.klass.other-klass \"hello\")\n(q :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^40","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(q \"hello\")\n(q nil \"hello\")\n\nThese two are made equivalent at compile time\n(q {:onClick f} \"hello\")\n(q #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(q :#the-id.klass.other-klass \"hello\")\n(q :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^41",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdi \"hello\")\n(bdi nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdi {:onClick f} \"hello\")\n(bdi #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdi :#the-id.klass.other-klass \"hello\")\n(bdi :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^42","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdi \"hello\")\n(bdi nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdi {:onClick f} \"hello\")\n(bdi #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdi :#the-id.klass.other-klass \"hello\")\n(bdi :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$macro-create-wrapped-form-element",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",183,"^9",7,"^:",183,"^;",40,"^[",["^10",["^?C",["^10",[["~$opts"]]]]],"^6","Used internally by element generation."],"^12","~$com.fulcrologic.fulcro.dom/macro-create-wrapped-form-element","^7","com/fulcrologic/fulcro/dom.cljs","^;",40,"^?H",["^10",[["^@7"]]],"^?J",null,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^8",183,"^:",183,"^?G",1,"^?O",true,"^[",["^10",["^?C",["^10",[["^@7"]]]]],"^6","Used internally by element generation."],"^43",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDistantLight \"hello\")\n(feDistantLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDistantLight {:onClick f} \"hello\")\n(feDistantLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDistantLight :#the-id.klass.other-klass \"hello\")\n(feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^44","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDistantLight \"hello\")\n(feDistantLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDistantLight {:onClick f} \"hello\")\n(feDistantLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDistantLight :#the-id.klass.other-klass \"hello\")\n(feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^45",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(video \"hello\")\n(video nil \"hello\")\n\nThese two are made equivalent at compile time\n(video {:onClick f} \"hello\")\n(video #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(video :#the-id.klass.other-klass \"hello\")\n(video :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^46","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(video \"hello\")\n(video nil \"hello\")\n\nThese two are made equivalent at compile time\n(video {:onClick f} \"hello\")\n(video #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(video :#the-id.klass.other-klass \"hello\")\n(video :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^47",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(address \"hello\")\n(address nil \"hello\")\n\nThese two are made equivalent at compile time\n(address {:onClick f} \"hello\")\n(address #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(address :#the-id.klass.other-klass \"hello\")\n(address :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^48","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(address \"hello\")\n(address nil \"hello\")\n\nThese two are made equivalent at compile time\n(address {:onClick f} \"hello\")\n(address #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(address :#the-id.klass.other-klass \"hello\")\n(address :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^49",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(caption \"hello\")\n(caption nil \"hello\")\n\nThese two are made equivalent at compile time\n(caption {:onClick f} \"hello\")\n(caption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(caption :#the-id.klass.other-klass \"hello\")\n(caption :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4:","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(caption \"hello\")\n(caption nil \"hello\")\n\nThese two are made equivalent at compile time\n(caption {:onClick f} \"hello\")\n(caption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(caption :#the-id.klass.other-klass \"hello\")\n(caption :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$wrap-form-element",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",119,"^9",7,"^:",119,"^;",24,"^[",["^10",["^?C",["^10",[["~$element"]]]]]],"^12","~$com.fulcrologic.fulcro.dom/wrap-form-element","^7","com/fulcrologic/fulcro/dom.cljs","^;",24,"^?H",["^10",[["^@:"]]],"^?J",null,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^8",119,"^?N","^?V","^:",119,"^?G",1,"^?O",true,"^[",["^10",["^?C",["^10",[["^@:"]]]]]],"^4;",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dd \"hello\")\n(dd nil \"hello\")\n\nThese two are made equivalent at compile time\n(dd {:onClick f} \"hello\")\n(dd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dd :#the-id.klass.other-klass \"hello\")\n(dd :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4<","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dd \"hello\")\n(dd nil \"hello\")\n\nThese two are made equivalent at compile time\n(dd {:onClick f} \"hello\")\n(dd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dd :#the-id.klass.other-klass \"hello\")\n(dd :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4=",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rp \"hello\")\n(rp nil \"hello\")\n\nThese two are made equivalent at compile time\n(rp {:onClick f} \"hello\")\n(rp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rp :#the-id.klass.other-klass \"hello\")\n(rp :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4>","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rp \"hello\")\n(rp nil \"hello\")\n\nThese two are made equivalent at compile time\n(rp {:onClick f} \"hello\")\n(rp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rp :#the-id.klass.other-klass \"hello\")\n(rp :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4?",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hr \"hello\")\n(hr nil \"hello\")\n\nThese two are made equivalent at compile time\n(hr {:onClick f} \"hello\")\n(hr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hr :#the-id.klass.other-klass \"hello\")\n(hr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4@","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hr \"hello\")\n(hr nil \"hello\")\n\nThese two are made equivalent at compile time\n(hr {:onClick f} \"hello\")\n(hr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hr :#the-id.klass.other-klass \"hello\")\n(hr :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^T",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meta \"hello\")\n(meta nil \"hello\")\n\nThese two are made equivalent at compile time\n(meta {:onClick f} \"hello\")\n(meta #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meta :#the-id.klass.other-klass \"hello\")\n(meta :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4A","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meta \"hello\")\n(meta nil \"hello\")\n\nThese two are made equivalent at compile time\n(meta {:onClick f} \"hello\")\n(meta #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meta :#the-id.klass.other-klass \"hello\")\n(meta :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4B",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tbody \"hello\")\n(tbody nil \"hello\")\n\nThese two are made equivalent at compile time\n(tbody {:onClick f} \"hello\")\n(tbody #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tbody :#the-id.klass.other-klass \"hello\")\n(tbody :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4C","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tbody \"hello\")\n(tbody nil \"hello\")\n\nThese two are made equivalent at compile time\n(tbody {:onClick f} \"hello\")\n(tbody #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tbody :#the-id.klass.other-klass \"hello\")\n(tbody :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4D",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(desc \"hello\")\n(desc nil \"hello\")\n\nThese two are made equivalent at compile time\n(desc {:onClick f} \"hello\")\n(desc #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(desc :#the-id.klass.other-klass \"hello\")\n(desc :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4E","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(desc \"hello\")\n(desc nil \"hello\")\n\nThese two are made equivalent at compile time\n(desc {:onClick f} \"hello\")\n(desc #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(desc :#the-id.klass.other-klass \"hello\")\n(desc :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4F",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(table \"hello\")\n(table nil \"hello\")\n\nThese two are made equivalent at compile time\n(table {:onClick f} \"hello\")\n(table #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(table :#the-id.klass.other-klass \"hello\")\n(table :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4G","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(table \"hello\")\n(table nil \"hello\")\n\nThese two are made equivalent at compile time\n(table {:onClick f} \"hello\")\n(table #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(table :#the-id.klass.other-klass \"hello\")\n(table :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4H",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pre \"hello\")\n(pre nil \"hello\")\n\nThese two are made equivalent at compile time\n(pre {:onClick f} \"hello\")\n(pre #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pre :#the-id.klass.other-klass \"hello\")\n(pre :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4I","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pre \"hello\")\n(pre nil \"hello\")\n\nThese two are made equivalent at compile time\n(pre {:onClick f} \"hello\")\n(pre #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pre :#the-id.klass.other-klass \"hello\")\n(pre :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4J",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ul \"hello\")\n(ul nil \"hello\")\n\nThese two are made equivalent at compile time\n(ul {:onClick f} \"hello\")\n(ul #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ul :#the-id.klass.other-klass \"hello\")\n(ul :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4K","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ul \"hello\")\n(ul nil \"hello\")\n\nThese two are made equivalent at compile time\n(ul {:onClick f} \"hello\")\n(ul #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ul :#the-id.klass.other-klass \"hello\")\n(ul :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$arr-append*",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",176,"^9",8,"^:",176,"^;",19,"^?X",true,"^[",["^10",["^?C",["^10",[["^?Q","~$x"]]]]]],"^?X",true,"^12","~$com.fulcrologic.fulcro.dom/arr-append*","^7","com/fulcrologic/fulcro/dom.cljs","^;",19,"^?H",["^10",[["^?Q","~$x"]]],"^?J",null,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^8",176,"^:",176,"^?G",2,"^?O",true,"^[",["^10",["^?C",["^10",[["^?Q","~$x"]]]]]],"^4L",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feConvolveMatrix \"hello\")\n(feConvolveMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feConvolveMatrix {:onClick f} \"hello\")\n(feConvolveMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n(feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4M","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feConvolveMatrix \"hello\")\n(feConvolveMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feConvolveMatrix {:onClick f} \"hello\")\n(feConvolveMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n(feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4N",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sup \"hello\")\n(sup nil \"hello\")\n\nThese two are made equivalent at compile time\n(sup {:onClick f} \"hello\")\n(sup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sup :#the-id.klass.other-klass \"hello\")\n(sup :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4O","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sup \"hello\")\n(sup nil \"hello\")\n\nThese two are made equivalent at compile time\n(sup {:onClick f} \"hello\")\n(sup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sup :#the-id.klass.other-klass \"hello\")\n(sup :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$element?",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",35,"^9",7,"^:",35,"^;",15,"^[",["^10",["^?C",["^10",[["~$x"]]]]],"^6","Returns true if the given arg is a react element."],"^12","~$com.fulcrologic.fulcro.dom/element?","^7","com/fulcrologic/fulcro/dom.cljs","^;",15,"^?H",["^10",[["~$x"]]],"^?J",null,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^8",35,"^?N","~$boolean","^:",35,"^?G",1,"^?O",true,"^[",["^10",["^?C",["^10",[["~$x"]]]]],"^6","Returns true if the given arg is a react element."],"^4P",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dfn \"hello\")\n(dfn nil \"hello\")\n\nThese two are made equivalent at compile time\n(dfn {:onClick f} \"hello\")\n(dfn #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dfn :#the-id.klass.other-klass \"hello\")\n(dfn :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4Q","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dfn \"hello\")\n(dfn nil \"hello\")\n\nThese two are made equivalent at compile time\n(dfn {:onClick f} \"hello\")\n(dfn #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dfn :#the-id.klass.other-klass \"hello\")\n(dfn :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4R",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sub \"hello\")\n(sub nil \"hello\")\n\nThese two are made equivalent at compile time\n(sub {:onClick f} \"hello\")\n(sub #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sub :#the-id.klass.other-klass \"hello\")\n(sub :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4S","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sub \"hello\")\n(sub nil \"hello\")\n\nThese two are made equivalent at compile time\n(sub {:onClick f} \"hello\")\n(sub #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sub :#the-id.klass.other-klass \"hello\")\n(sub :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4T",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mark \"hello\")\n(mark nil \"hello\")\n\nThese two are made equivalent at compile time\n(mark {:onClick f} \"hello\")\n(mark #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mark :#the-id.klass.other-klass \"hello\")\n(mark :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4U","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mark \"hello\")\n(mark nil \"hello\")\n\nThese two are made equivalent at compile time\n(mark {:onClick f} \"hello\")\n(mark #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mark :#the-id.klass.other-klass \"hello\")\n(mark :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4V",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDisplacementMap \"hello\")\n(feDisplacementMap nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDisplacementMap {:onClick f} \"hello\")\n(feDisplacementMap #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDisplacementMap :#the-id.klass.other-klass \"hello\")\n(feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4W","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDisplacementMap \"hello\")\n(feDisplacementMap nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDisplacementMap {:onClick f} \"hello\")\n(feDisplacementMap #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDisplacementMap :#the-id.klass.other-klass \"hello\")\n(feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$convert-props",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",81,"^9",7,"^:",81,"^;",20,"^[",["^10",["^?C",["^10",[["~$props"]]]]],"^6","Given props, which can be nil, a js-obj or a clj map: returns a js object."],"^12","~$com.fulcrologic.fulcro.dom/convert-props","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^?H",["^10",[["^@B"]]],"^?J",null,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^8",81,"^?N",["^O",[null,"^2?","^?M"]],"^:",81,"^?G",1,"^?O",true,"^[",["^10",["^?C",["^10",[["^@B"]]]]],"^6","Given props, which can be nil, a js-obj or a clj map: returns a js object."],"^4X",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(unknown \"hello\")\n(unknown nil \"hello\")\n\nThese two are made equivalent at compile time\n(unknown {:onClick f} \"hello\")\n(unknown #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(unknown :#the-id.klass.other-klass \"hello\")\n(unknown :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4Y","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(unknown \"hello\")\n(unknown nil \"hello\")\n\nThese two are made equivalent at compile time\n(unknown {:onClick f} \"hello\")\n(unknown #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(unknown :#the-id.klass.other-klass \"hello\")\n(unknown :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4Z",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(script \"hello\")\n(script nil \"hello\")\n\nThese two are made equivalent at compile time\n(script {:onClick f} \"hello\")\n(script #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(script :#the-id.klass.other-klass \"hello\")\n(script :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^4[","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(script \"hello\")\n(script nil \"hello\")\n\nThese two are made equivalent at compile time\n(script {:onClick f} \"hello\")\n(script #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(script :#the-id.klass.other-klass \"hello\")\n(script :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^50",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTurbulence \"hello\")\n(feTurbulence nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTurbulence {:onClick f} \"hello\")\n(feTurbulence #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTurbulence :#the-id.klass.other-klass \"hello\")\n(feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^51","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTurbulence \"hello\")\n(feTurbulence nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTurbulence {:onClick f} \"hello\")\n(feTurbulence #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTurbulence :#the-id.klass.other-klass \"hello\")\n(feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^52",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(big \"hello\")\n(big nil \"hello\")\n\nThese two are made equivalent at compile time\n(big {:onClick f} \"hello\")\n(big #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(big :#the-id.klass.other-klass \"hello\")\n(big :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^53","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(big \"hello\")\n(big nil \"hello\")\n\nThese two are made equivalent at compile time\n(big {:onClick f} \"hello\")\n(big #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(big :#the-id.klass.other-klass \"hello\")\n(big :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^54",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(button \"hello\")\n(button nil \"hello\")\n\nThese two are made equivalent at compile time\n(button {:onClick f} \"hello\")\n(button #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(button :#the-id.klass.other-klass \"hello\")\n(button :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^55","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(button \"hello\")\n(button nil \"hello\")\n\nThese two are made equivalent at compile time\n(button {:onClick f} \"hello\")\n(button #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(button :#the-id.klass.other-klass \"hello\")\n(button :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^56",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-uri \"hello\")\n(font-face-uri nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-uri {:onClick f} \"hello\")\n(font-face-uri #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-uri :#the-id.klass.other-klass \"hello\")\n(font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^57","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-uri \"hello\")\n(font-face-uri nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-uri {:onClick f} \"hello\")\n(font-face-uri #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-uri :#the-id.klass.other-klass \"hello\")\n(font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^58",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(wbr \"hello\")\n(wbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(wbr {:onClick f} \"hello\")\n(wbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(wbr :#the-id.klass.other-klass \"hello\")\n(wbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^59","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(wbr \"hello\")\n(wbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(wbr {:onClick f} \"hello\")\n(wbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(wbr :#the-id.klass.other-klass \"hello\")\n(wbr :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^U",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(symbol \"hello\")\n(symbol nil \"hello\")\n\nThese two are made equivalent at compile time\n(symbol {:onClick f} \"hello\")\n(symbol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(symbol :#the-id.klass.other-klass \"hello\")\n(symbol :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5:","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(symbol \"hello\")\n(symbol nil \"hello\")\n\nThese two are made equivalent at compile time\n(symbol {:onClick f} \"hello\")\n(symbol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(symbol :#the-id.klass.other-klass \"hello\")\n(symbol :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5;",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(strong \"hello\")\n(strong nil \"hello\")\n\nThese two are made equivalent at compile time\n(strong {:onClick f} \"hello\")\n(strong #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(strong :#the-id.klass.other-klass \"hello\")\n(strong :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5<","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(strong \"hello\")\n(strong nil \"hello\")\n\nThese two are made equivalent at compile time\n(strong {:onClick f} \"hello\")\n(strong #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(strong :#the-id.klass.other-klass \"hello\")\n(strong :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^V",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(use \"hello\")\n(use nil \"hello\")\n\nThese two are made equivalent at compile time\n(use {:onClick f} \"hello\")\n(use #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(use :#the-id.klass.other-klass \"hello\")\n(use :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5=","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(use \"hello\")\n(use nil \"hello\")\n\nThese two are made equivalent at compile time\n(use {:onClick f} \"hello\")\n(use #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(use :#the-id.klass.other-klass \"hello\")\n(use :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5>",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(solidcolor \"hello\")\n(solidcolor nil \"hello\")\n\nThese two are made equivalent at compile time\n(solidcolor {:onClick f} \"hello\")\n(solidcolor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(solidcolor :#the-id.klass.other-klass \"hello\")\n(solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5?","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(solidcolor \"hello\")\n(solidcolor nil \"hello\")\n\nThese two are made equivalent at compile time\n(solidcolor {:onClick f} \"hello\")\n(solidcolor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(solidcolor :#the-id.klass.other-klass \"hello\")\n(solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5@",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fePointLight \"hello\")\n(fePointLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(fePointLight {:onClick f} \"hello\")\n(fePointLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fePointLight :#the-id.klass.other-klass \"hello\")\n(fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5A","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fePointLight \"hello\")\n(fePointLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(fePointLight {:onClick f} \"hello\")\n(fePointLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fePointLight :#the-id.klass.other-klass \"hello\")\n(fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5B",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(li \"hello\")\n(li nil \"hello\")\n\nThese two are made equivalent at compile time\n(li {:onClick f} \"hello\")\n(li #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(li :#the-id.klass.other-klass \"hello\")\n(li :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5C","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(li \"hello\")\n(li nil \"hello\")\n\nThese two are made equivalent at compile time\n(li {:onClick f} \"hello\")\n(li #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(li :#the-id.klass.other-klass \"hello\")\n(li :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5D",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dt \"hello\")\n(dt nil \"hello\")\n\nThese two are made equivalent at compile time\n(dt {:onClick f} \"hello\")\n(dt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dt :#the-id.klass.other-klass \"hello\")\n(dt :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5E","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dt \"hello\")\n(dt nil \"hello\")\n\nThese two are made equivalent at compile time\n(dt {:onClick f} \"hello\")\n(dt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dt :#the-id.klass.other-klass \"hello\")\n(dt :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5F",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncB \"hello\")\n(feFuncB nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncB {:onClick f} \"hello\")\n(feFuncB #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncB :#the-id.klass.other-klass \"hello\")\n(feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5G","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncB \"hello\")\n(feFuncB nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncB {:onClick f} \"hello\")\n(feFuncB #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncB :#the-id.klass.other-klass \"hello\")\n(feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5H",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(marker \"hello\")\n(marker nil \"hello\")\n\nThese two are made equivalent at compile time\n(marker {:onClick f} \"hello\")\n(marker #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(marker :#the-id.klass.other-klass \"hello\")\n(marker :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5I","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(marker \"hello\")\n(marker nil \"hello\")\n\nThese two are made equivalent at compile time\n(marker {:onClick f} \"hello\")\n(marker #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(marker :#the-id.klass.other-klass \"hello\")\n(marker :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5J",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComponentTransfer \"hello\")\n(feComponentTransfer nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComponentTransfer {:onClick f} \"hello\")\n(feComponentTransfer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComponentTransfer :#the-id.klass.other-klass \"hello\")\n(feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5K","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComponentTransfer \"hello\")\n(feComponentTransfer nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComponentTransfer {:onClick f} \"hello\")\n(feComponentTransfer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComponentTransfer :#the-id.klass.other-klass \"hello\")\n(feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5L",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(td \"hello\")\n(td nil \"hello\")\n\nThese two are made equivalent at compile time\n(td {:onClick f} \"hello\")\n(td #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(td :#the-id.klass.other-klass \"hello\")\n(td :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5M","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(td \"hello\")\n(td nil \"hello\")\n\nThese two are made equivalent at compile time\n(td {:onClick f} \"hello\")\n(td #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(td :#the-id.klass.other-klass \"hello\")\n(td :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5N",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tr \"hello\")\n(tr nil \"hello\")\n\nThese two are made equivalent at compile time\n(tr {:onClick f} \"hello\")\n(tr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tr :#the-id.klass.other-klass \"hello\")\n(tr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5O","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tr \"hello\")\n(tr nil \"hello\")\n\nThese two are made equivalent at compile time\n(tr {:onClick f} \"hello\")\n(tr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tr :#the-id.klass.other-klass \"hello\")\n(tr :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5P",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(circle \"hello\")\n(circle nil \"hello\")\n\nThese two are made equivalent at compile time\n(circle {:onClick f} \"hello\")\n(circle #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(circle :#the-id.klass.other-klass \"hello\")\n(circle :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5Q","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(circle \"hello\")\n(circle nil \"hello\")\n\nThese two are made equivalent at compile time\n(circle {:onClick f} \"hello\")\n(circle #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(circle :#the-id.klass.other-klass \"hello\")\n(circle :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5R",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(section \"hello\")\n(section nil \"hello\")\n\nThese two are made equivalent at compile time\n(section {:onClick f} \"hello\")\n(section #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(section :#the-id.klass.other-klass \"hello\")\n(section :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5S","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(section \"hello\")\n(section nil \"hello\")\n\nThese two are made equivalent at compile time\n(section {:onClick f} \"hello\")\n(section #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(section :#the-id.klass.other-klass \"hello\")\n(section :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5T",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDropShadow \"hello\")\n(feDropShadow nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDropShadow {:onClick f} \"hello\")\n(feDropShadow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDropShadow :#the-id.klass.other-klass \"hello\")\n(feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5U","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDropShadow \"hello\")\n(feDropShadow nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDropShadow {:onClick f} \"hello\")\n(feDropShadow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDropShadow :#the-id.klass.other-klass \"hello\")\n(feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5V",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(th \"hello\")\n(th nil \"hello\")\n\nThese two are made equivalent at compile time\n(th {:onClick f} \"hello\")\n(th #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(th :#the-id.klass.other-klass \"hello\")\n(th :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5W","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(th \"hello\")\n(th nil \"hello\")\n\nThese two are made equivalent at compile time\n(th {:onClick f} \"hello\")\n(th #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(th :#the-id.klass.other-klass \"hello\")\n(th :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^W",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(time \"hello\")\n(time nil \"hello\")\n\nThese two are made equivalent at compile time\n(time {:onClick f} \"hello\")\n(time #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(time :#the-id.klass.other-klass \"hello\")\n(time :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5X","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(time \"hello\")\n(time nil \"hello\")\n\nThese two are made equivalent at compile time\n(time {:onClick f} \"hello\")\n(time #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(time :#the-id.klass.other-klass \"hello\")\n(time :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5Y",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(optgroup \"hello\")\n(optgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(optgroup {:onClick f} \"hello\")\n(optgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(optgroup :#the-id.klass.other-klass \"hello\")\n(optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^5Z","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(optgroup \"hello\")\n(optgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(optgroup {:onClick f} \"hello\")\n(optgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(optgroup :#the-id.klass.other-klass \"hello\")\n(optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5[",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(iframe \"hello\")\n(iframe nil \"hello\")\n\nThese two are made equivalent at compile time\n(iframe {:onClick f} \"hello\")\n(iframe #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(iframe :#the-id.klass.other-klass \"hello\")\n(iframe :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^60","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(iframe \"hello\")\n(iframe nil \"hello\")\n\nThese two are made equivalent at compile time\n(iframe {:onClick f} \"hello\")\n(iframe #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(iframe :#the-id.klass.other-klass \"hello\")\n(iframe :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^61",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(color-profile \"hello\")\n(color-profile nil \"hello\")\n\nThese two are made equivalent at compile time\n(color-profile {:onClick f} \"hello\")\n(color-profile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(color-profile :#the-id.klass.other-klass \"hello\")\n(color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^62","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(color-profile \"hello\")\n(color-profile nil \"hello\")\n\nThese two are made equivalent at compile time\n(color-profile {:onClick f} \"hello\")\n(color-profile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(color-profile :#the-id.klass.other-klass \"hello\")\n(color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^63",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(legend \"hello\")\n(legend nil \"hello\")\n\nThese two are made equivalent at compile time\n(legend {:onClick f} \"hello\")\n(legend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(legend :#the-id.klass.other-klass \"hello\")\n(legend :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^64","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(legend \"hello\")\n(legend nil \"hello\")\n\nThese two are made equivalent at compile time\n(legend {:onClick f} \"hello\")\n(legend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(legend :#the-id.klass.other-klass \"hello\")\n(legend :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^65",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(em \"hello\")\n(em nil \"hello\")\n\nThese two are made equivalent at compile time\n(em {:onClick f} \"hello\")\n(em #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(em :#the-id.klass.other-klass \"hello\")\n(em :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^66","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(em \"hello\")\n(em nil \"hello\")\n\nThese two are made equivalent at compile time\n(em {:onClick f} \"hello\")\n(em #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(em :#the-id.klass.other-klass \"hello\")\n(em :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^67",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(kbd \"hello\")\n(kbd nil \"hello\")\n\nThese two are made equivalent at compile time\n(kbd {:onClick f} \"hello\")\n(kbd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(kbd :#the-id.klass.other-klass \"hello\")\n(kbd :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^68","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(kbd \"hello\")\n(kbd nil \"hello\")\n\nThese two are made equivalent at compile time\n(kbd {:onClick f} \"hello\")\n(kbd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(kbd :#the-id.klass.other-klass \"hello\")\n(kbd :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^69",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(article \"hello\")\n(article nil \"hello\")\n\nThese two are made equivalent at compile time\n(article {:onClick f} \"hello\")\n(article #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(article :#the-id.klass.other-klass \"hello\")\n(article :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6:","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(article \"hello\")\n(article nil \"hello\")\n\nThese two are made equivalent at compile time\n(article {:onClick f} \"hello\")\n(article #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(article :#the-id.klass.other-klass \"hello\")\n(article :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6;",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateColor \"hello\")\n(animateColor nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateColor {:onClick f} \"hello\")\n(animateColor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateColor :#the-id.klass.other-klass \"hello\")\n(animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6<","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateColor \"hello\")\n(animateColor nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateColor {:onClick f} \"hello\")\n(animateColor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateColor :#the-id.klass.other-klass \"hello\")\n(animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6=",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(clipPath \"hello\")\n(clipPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(clipPath {:onClick f} \"hello\")\n(clipPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(clipPath :#the-id.klass.other-klass \"hello\")\n(clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6>","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(clipPath \"hello\")\n(clipPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(clipPath {:onClick f} \"hello\")\n(clipPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(clipPath :#the-id.klass.other-klass \"hello\")\n(clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6?",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(abbr \"hello\")\n(abbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(abbr {:onClick f} \"hello\")\n(abbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(abbr :#the-id.klass.other-klass \"hello\")\n(abbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6@","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(abbr \"hello\")\n(abbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(abbr {:onClick f} \"hello\")\n(abbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(abbr :#the-id.klass.other-klass \"hello\")\n(abbr :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6A",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphDef \"hello\")\n(altGlyphDef nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphDef {:onClick f} \"hello\")\n(altGlyphDef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphDef :#the-id.klass.other-klass \"hello\")\n(altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6B","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphDef \"hello\")\n(altGlyphDef nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphDef {:onClick f} \"hello\")\n(altGlyphDef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphDef :#the-id.klass.other-klass \"hello\")\n(altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6C",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshrow \"hello\")\n(meshrow nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshrow {:onClick f} \"hello\")\n(meshrow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshrow :#the-id.klass.other-klass \"hello\")\n(meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6D","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshrow \"hello\")\n(meshrow nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshrow {:onClick f} \"hello\")\n(meshrow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshrow :#the-id.klass.other-klass \"hello\")\n(meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6E",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cursor \"hello\")\n(cursor nil \"hello\")\n\nThese two are made equivalent at compile time\n(cursor {:onClick f} \"hello\")\n(cursor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cursor :#the-id.klass.other-klass \"hello\")\n(cursor :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6F","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cursor \"hello\")\n(cursor nil \"hello\")\n\nThese two are made equivalent at compile time\n(cursor {:onClick f} \"hello\")\n(cursor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cursor :#the-id.klass.other-klass \"hello\")\n(cursor :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$form-elements?",["^ ","^12","~$com.fulcrologic.fulcro.dom/form-elements?","^7","com/fulcrologic/fulcro/dom.cljs","^8",113,"^9",1,"^:",113,"^;",24,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",113,"^9",10,"^:",113,"^;",24],"^?L","~$cljs.core/ISet"],"^6G",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animate \"hello\")\n(animate nil \"hello\")\n\nThese two are made equivalent at compile time\n(animate {:onClick f} \"hello\")\n(animate #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animate :#the-id.klass.other-klass \"hello\")\n(animate :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6H","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animate \"hello\")\n(animate nil \"hello\")\n\nThese two are made equivalent at compile time\n(animate {:onClick f} \"hello\")\n(animate #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animate :#the-id.klass.other-klass \"hello\")\n(animate :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6I",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(source \"hello\")\n(source nil \"hello\")\n\nThese two are made equivalent at compile time\n(source {:onClick f} \"hello\")\n(source #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(source :#the-id.klass.other-klass \"hello\")\n(source :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6J","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(source \"hello\")\n(source nil \"hello\")\n\nThese two are made equivalent at compile time\n(source {:onClick f} \"hello\")\n(source #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(source :#the-id.klass.other-klass \"hello\")\n(source :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6K",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(output \"hello\")\n(output nil \"hello\")\n\nThese two are made equivalent at compile time\n(output {:onClick f} \"hello\")\n(output #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(output :#the-id.klass.other-klass \"hello\")\n(output :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6L","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(output \"hello\")\n(output nil \"hello\")\n\nThese two are made equivalent at compile time\n(output {:onClick f} \"hello\")\n(output #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(output :#the-id.klass.other-klass \"hello\")\n(output :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6M",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face \"hello\")\n(font-face nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face {:onClick f} \"hello\")\n(font-face #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face :#the-id.klass.other-klass \"hello\")\n(font-face :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6N","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face \"hello\")\n(font-face nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face {:onClick f} \"hello\")\n(font-face #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face :#the-id.klass.other-klass \"hello\")\n(font-face :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6O",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMergeNode \"hello\")\n(feMergeNode nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMergeNode {:onClick f} \"hello\")\n(feMergeNode #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMergeNode :#the-id.klass.other-klass \"hello\")\n(feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6P","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMergeNode \"hello\")\n(feMergeNode nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMergeNode {:onClick f} \"hello\")\n(feMergeNode #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMergeNode :#the-id.klass.other-klass \"hello\")\n(feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6Q",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpotLight \"hello\")\n(feSpotLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpotLight {:onClick f} \"hello\")\n(feSpotLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpotLight :#the-id.klass.other-klass \"hello\")\n(feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6R","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpotLight \"hello\")\n(feSpotLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpotLight {:onClick f} \"hello\")\n(feSpotLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpotLight :#the-id.klass.other-klass \"hello\")\n(feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6S",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(header \"hello\")\n(header nil \"hello\")\n\nThese two are made equivalent at compile time\n(header {:onClick f} \"hello\")\n(header #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(header :#the-id.klass.other-klass \"hello\")\n(header :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6T","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(header \"hello\")\n(header nil \"hello\")\n\nThese two are made equivalent at compile time\n(header {:onClick f} \"hello\")\n(header #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(header :#the-id.klass.other-klass \"hello\")\n(header :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6X",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(datalist \"hello\")\n(datalist nil \"hello\")\n\nThese two are made equivalent at compile time\n(datalist {:onClick f} \"hello\")\n(datalist #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(datalist :#the-id.klass.other-klass \"hello\")\n(datalist :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6Y","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(datalist \"hello\")\n(datalist nil \"hello\")\n\nThese two are made equivalent at compile time\n(datalist {:onClick f} \"hello\")\n(datalist #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(datalist :#the-id.klass.other-klass \"hello\")\n(datalist :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6Z",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tfoot \"hello\")\n(tfoot nil \"hello\")\n\nThese two are made equivalent at compile time\n(tfoot {:onClick f} \"hello\")\n(tfoot #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tfoot :#the-id.klass.other-klass \"hello\")\n(tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^6[","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tfoot \"hello\")\n(tfoot nil \"hello\")\n\nThese two are made equivalent at compile time\n(tfoot {:onClick f} \"hello\")\n(tfoot #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tfoot :#the-id.klass.other-klass \"hello\")\n(tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$s",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(s \"hello\")\n(s nil \"hello\")\n\nThese two are made equivalent at compile time\n(s {:onClick f} \"hello\")\n(s #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(s :#the-id.klass.other-klass \"hello\")\n(s :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^70","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(s \"hello\")\n(s nil \"hello\")\n\nThese two are made equivalent at compile time\n(s {:onClick f} \"hello\")\n(s #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(s :#the-id.klass.other-klass \"hello\")\n(s :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^71",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatch \"hello\")\n(hatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatch {:onClick f} \"hello\")\n(hatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatch :#the-id.klass.other-klass \"hello\")\n(hatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^72","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatch \"hello\")\n(hatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatch {:onClick f} \"hello\")\n(hatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatch :#the-id.klass.other-klass \"hello\")\n(hatch :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^73",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ins \"hello\")\n(ins nil \"hello\")\n\nThese two are made equivalent at compile time\n(ins {:onClick f} \"hello\")\n(ins #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ins :#the-id.klass.other-klass \"hello\")\n(ins :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^74","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ins \"hello\")\n(ins nil \"hello\")\n\nThese two are made equivalent at compile time\n(ins {:onClick f} \"hello\")\n(ins #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ins :#the-id.klass.other-klass \"hello\")\n(ins :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$node",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",63,"^9",7,"^:",63,"^;",11,"^[",["^10",["^?C",["^10",[["^@0"],["^@0","~$name"]]]]],"^6","Returns the dom node associated with a component's React ref.","^?D",["^ ","^?E",false,"^?F",2,"^?G",2,"^?H",["^10",[["^@0"],["^@0","^@H"]]],"^[",["^10",[["^@0"],["^@0","^@H"]]],"^?I",["^10",[null,null]]]],"^12","~$com.fulcrologic.fulcro.dom/node","^7","com/fulcrologic/fulcro/dom.cljs","^;",11,"^?D",["^ ","^?E",false,"^?F",2,"^?G",2,"^?H",["^10",[["^@0"],["^@0","^@H"]]],"^[",["^10",[["^@0"],["^@0","^@H"]]],"^?I",["^10",[null,null]]],"^?H",["^10",[["^@0"],["^@0","^@H"]]],"^?J",null,"^?F",2,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^?K",[["^ ","^?F",1,"^?E",false,"^?L","^?S"],["^ ","^?F",2,"^?E",false,"^?L",["^O",["^?S","~$clj-nil"]]]],"^8",63,"^:",63,"^?G",2,"^?O",true,"^[",["^10",[["^@0"],["^@0","^@H"]]],"^6","Returns the dom node associated with a component's React ref."],"^75",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(footer \"hello\")\n(footer nil \"hello\")\n\nThese two are made equivalent at compile time\n(footer {:onClick f} \"hello\")\n(footer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(footer :#the-id.klass.other-klass \"hello\")\n(footer :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^76","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(footer \"hello\")\n(footer nil \"hello\")\n\nThese two are made equivalent at compile time\n(footer {:onClick f} \"hello\")\n(footer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(footer :#the-id.klass.other-klass \"hello\")\n(footer :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^77",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mpath \"hello\")\n(mpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(mpath {:onClick f} \"hello\")\n(mpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mpath :#the-id.klass.other-klass \"hello\")\n(mpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^78","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mpath \"hello\")\n(mpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(mpath {:onClick f} \"hello\")\n(mpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mpath :#the-id.klass.other-klass \"hello\")\n(mpath :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^79",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(title \"hello\")\n(title nil \"hello\")\n\nThese two are made equivalent at compile time\n(title {:onClick f} \"hello\")\n(title #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(title :#the-id.klass.other-klass \"hello\")\n(title :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7:","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(title \"hello\")\n(title nil \"hello\")\n\nThese two are made equivalent at compile time\n(title {:onClick f} \"hello\")\n(title #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(title :#the-id.klass.other-klass \"hello\")\n(title :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7;",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h5 \"hello\")\n(h5 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h5 {:onClick f} \"hello\")\n(h5 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h5 :#the-id.klass.other-klass \"hello\")\n(h5 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7<","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h5 \"hello\")\n(h5 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h5 {:onClick f} \"hello\")\n(h5 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h5 :#the-id.klass.other-klass \"hello\")\n(h5 :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7=",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshgradient \"hello\")\n(meshgradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshgradient {:onClick f} \"hello\")\n(meshgradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshgradient :#the-id.klass.other-klass \"hello\")\n(meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7>","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshgradient \"hello\")\n(meshgradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshgradient {:onClick f} \"hello\")\n(meshgradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshgradient :#the-id.klass.other-klass \"hello\")\n(meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7?",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(canvas \"hello\")\n(canvas nil \"hello\")\n\nThese two are made equivalent at compile time\n(canvas {:onClick f} \"hello\")\n(canvas #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(canvas :#the-id.klass.other-klass \"hello\")\n(canvas :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7@","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(canvas \"hello\")\n(canvas nil \"hello\")\n\nThese two are made equivalent at compile time\n(canvas {:onClick f} \"hello\")\n(canvas #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(canvas :#the-id.klass.other-klass \"hello\")\n(canvas :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7A",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(param \"hello\")\n(param nil \"hello\")\n\nThese two are made equivalent at compile time\n(param {:onClick f} \"hello\")\n(param #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(param :#the-id.klass.other-klass \"hello\")\n(param :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7B","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(param \"hello\")\n(param nil \"hello\")\n\nThese two are made equivalent at compile time\n(param {:onClick f} \"hello\")\n(param #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(param :#the-id.klass.other-klass \"hello\")\n(param :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7C",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font \"hello\")\n(font nil \"hello\")\n\nThese two are made equivalent at compile time\n(font {:onClick f} \"hello\")\n(font #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font :#the-id.klass.other-klass \"hello\")\n(font :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7D","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font \"hello\")\n(font nil \"hello\")\n\nThese two are made equivalent at compile time\n(font {:onClick f} \"hello\")\n(font #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font :#the-id.klass.other-klass \"hello\")\n(font :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$is-form-element?",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",115,"^9",7,"^:",115,"^;",23,"^[",["^10",["^?C",["^10",[["^@:"]]]]]],"^12","~$com.fulcrologic.fulcro.dom/is-form-element?","^7","com/fulcrologic/fulcro/dom.cljs","^;",23,"^?H",["^10",[["^@:"]]],"^?J",null,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^8",115,"^?N","^?M","^:",115,"^?G",1,"^?O",true,"^[",["^10",["^?C",["^10",[["^@:"]]]]]],"~$render-to-str",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",58,"^9",7,"^:",58,"^;",20,"^[",["^10",["^?C",["^10",[["~$c"]]]]],"^6","Equivalent to React.renderToString. NOTE: You must require cljsjs.react.dom.server to use this function."],"^12","~$com.fulcrologic.fulcro.dom/render-to-str","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^?H",["^10",[["~$c"]]],"^?J",null,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^8",58,"^?N","^?S","^:",58,"^?G",1,"^?O",true,"^[",["^10",["^?C",["^10",[["~$c"]]]]],"^6","Equivalent to React.renderToString. NOTE: You must require cljsjs.react.dom.server to use this function."],"^7E",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(div \"hello\")\n(div nil \"hello\")\n\nThese two are made equivalent at compile time\n(div {:onClick f} \"hello\")\n(div #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(div :#the-id.klass.other-klass \"hello\")\n(div :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7F","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(div \"hello\")\n(div nil \"hello\")\n\nThese two are made equivalent at compile time\n(div {:onClick f} \"hello\")\n(div #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(div :#the-id.klass.other-klass \"hello\")\n(div :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7G",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(option \"hello\")\n(option nil \"hello\")\n\nThese two are made equivalent at compile time\n(option {:onClick f} \"hello\")\n(option #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(option :#the-id.klass.other-klass \"hello\")\n(option :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7H","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(option \"hello\")\n(option nil \"hello\")\n\nThese two are made equivalent at compile time\n(option {:onClick f} \"hello\")\n(option #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(option :#the-id.klass.other-klass \"hello\")\n(option :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7I",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFlood \"hello\")\n(feFlood nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFlood {:onClick f} \"hello\")\n(feFlood #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFlood :#the-id.klass.other-klass \"hello\")\n(feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7J","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFlood \"hello\")\n(feFlood nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFlood {:onClick f} \"hello\")\n(feFlood #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFlood :#the-id.klass.other-klass \"hello\")\n(feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7K",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(summary \"hello\")\n(summary nil \"hello\")\n\nThese two are made equivalent at compile time\n(summary {:onClick f} \"hello\")\n(summary #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(summary :#the-id.klass.other-klass \"hello\")\n(summary :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7L","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(summary \"hello\")\n(summary nil \"hello\")\n\nThese two are made equivalent at compile time\n(summary {:onClick f} \"hello\")\n(summary #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(summary :#the-id.klass.other-klass \"hello\")\n(summary :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7M",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMorphology \"hello\")\n(feMorphology nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMorphology {:onClick f} \"hello\")\n(feMorphology #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMorphology :#the-id.klass.other-klass \"hello\")\n(feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7N","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMorphology \"hello\")\n(feMorphology nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMorphology {:onClick f} \"hello\")\n(feMorphology #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMorphology :#the-id.klass.other-klass \"hello\")\n(feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7O",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(samp \"hello\")\n(samp nil \"hello\")\n\nThese two are made equivalent at compile time\n(samp {:onClick f} \"hello\")\n(samp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(samp :#the-id.klass.other-klass \"hello\")\n(samp :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7P","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(samp \"hello\")\n(samp nil \"hello\")\n\nThese two are made equivalent at compile time\n(samp {:onClick f} \"hello\")\n(samp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(samp :#the-id.klass.other-klass \"hello\")\n(samp :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7Q",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyphRef \"hello\")\n(glyphRef nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyphRef {:onClick f} \"hello\")\n(glyphRef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyphRef :#the-id.klass.other-klass \"hello\")\n(glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7R","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyphRef \"hello\")\n(glyphRef nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyphRef {:onClick f} \"hello\")\n(glyphRef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyphRef :#the-id.klass.other-klass \"hello\")\n(glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7S",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(small \"hello\")\n(small nil \"hello\")\n\nThese two are made equivalent at compile time\n(small {:onClick f} \"hello\")\n(small #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(small :#the-id.klass.other-klass \"hello\")\n(small :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7T","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(small \"hello\")\n(small nil \"hello\")\n\nThese two are made equivalent at compile time\n(small {:onClick f} \"hello\")\n(small #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(small :#the-id.klass.other-klass \"hello\")\n(small :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7U",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(style \"hello\")\n(style nil \"hello\")\n\nThese two are made equivalent at compile time\n(style {:onClick f} \"hello\")\n(style #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(style :#the-id.klass.other-klass \"hello\")\n(style :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7V","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(style \"hello\")\n(style nil \"hello\")\n\nThese two are made equivalent at compile time\n(style {:onClick f} \"hello\")\n(style #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(style :#the-id.klass.other-klass \"hello\")\n(style :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7W",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textarea \"hello\")\n(textarea nil \"hello\")\n\nThese two are made equivalent at compile time\n(textarea {:onClick f} \"hello\")\n(textarea #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textarea :#the-id.klass.other-klass \"hello\")\n(textarea :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7X","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textarea \"hello\")\n(textarea nil \"hello\")\n\nThese two are made equivalent at compile time\n(textarea {:onClick f} \"hello\")\n(textarea #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textarea :#the-id.klass.other-klass \"hello\")\n(textarea :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7Y",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feGaussianBlur \"hello\")\n(feGaussianBlur nil \"hello\")\n\nThese two are made equivalent at compile time\n(feGaussianBlur {:onClick f} \"hello\")\n(feGaussianBlur #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feGaussianBlur :#the-id.klass.other-klass \"hello\")\n(feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^7Z","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feGaussianBlur \"hello\")\n(feGaussianBlur nil \"hello\")\n\nThese two are made equivalent at compile time\n(feGaussianBlur {:onClick f} \"hello\")\n(feGaussianBlur #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feGaussianBlur :#the-id.klass.other-klass \"hello\")\n(feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$wrapped-option",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",173,"^9",6,"^:",173,"^;",20],"^12","~$com.fulcrologic.fulcro.dom/wrapped-option","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^9",1,"^8",173,"^:",173,"^?L","^?V","^6","Low-level form input, with no syntactic sugar. Used internally by DOM macros"],"~$element-marker",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",31,"^9",23,"^:",31,"^;",37,"^?X",true],"^?X",true,"^12","~$com.fulcrologic.fulcro.dom/element-marker","^7","com/fulcrologic/fulcro/dom.cljs","^;",37,"^9",1,"^8",31,"^:",31,"^?L","^?M"],"^7[",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h4 \"hello\")\n(h4 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h4 {:onClick f} \"hello\")\n(h4 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h4 :#the-id.klass.other-klass \"hello\")\n(h4 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^80","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h4 \"hello\")\n(h4 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h4 {:onClick f} \"hello\")\n(h4 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h4 :#the-id.klass.other-klass \"hello\")\n(h4 :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^81",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(head \"hello\")\n(head nil \"hello\")\n\nThese two are made equivalent at compile time\n(head {:onClick f} \"hello\")\n(head #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(head :#the-id.klass.other-klass \"hello\")\n(head :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^82","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(head \"hello\")\n(head nil \"hello\")\n\nThese two are made equivalent at compile time\n(head {:onClick f} \"hello\")\n(head #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(head :#the-id.klass.other-klass \"hello\")\n(head :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$g",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(g \"hello\")\n(g nil \"hello\")\n\nThese two are made equivalent at compile time\n(g {:onClick f} \"hello\")\n(g #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(g :#the-id.klass.other-klass \"hello\")\n(g :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^83","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(g \"hello\")\n(g nil \"hello\")\n\nThese two are made equivalent at compile time\n(g {:onClick f} \"hello\")\n(g #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(g :#the-id.klass.other-klass \"hello\")\n(g :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^84",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(missing-glyph \"hello\")\n(missing-glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(missing-glyph {:onClick f} \"hello\")\n(missing-glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(missing-glyph :#the-id.klass.other-klass \"hello\")\n(missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^85","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(missing-glyph \"hello\")\n(missing-glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(missing-glyph {:onClick f} \"hello\")\n(missing-glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(missing-glyph :#the-id.klass.other-klass \"hello\")\n(missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$wrapped-select",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",174,"^9",6,"^:",174,"^;",20],"^12","~$com.fulcrologic.fulcro.dom/wrapped-select","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^9",1,"^8",174,"^:",174,"^?L","^?V","^6","Low-level form input, with no syntactic sugar. Used internally by DOM macros"],"^86",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(stop \"hello\")\n(stop nil \"hello\")\n\nThese two are made equivalent at compile time\n(stop {:onClick f} \"hello\")\n(stop #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(stop :#the-id.klass.other-klass \"hello\")\n(stop :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^87","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(stop \"hello\")\n(stop nil \"hello\")\n\nThese two are made equivalent at compile time\n(stop {:onClick f} \"hello\")\n(stop #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(stop :#the-id.klass.other-klass \"hello\")\n(stop :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$render",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",53,"^9",7,"^:",53,"^;",13,"^[",["^10",["^?C",["^10",[["^@0","~$el"]]]]],"^6","Equivalent to React.render"],"^12","~$com.fulcrologic.fulcro.dom/render","^7","com/fulcrologic/fulcro/dom.cljs","^;",13,"^?H",["^10",[["^@0","^@V"]]],"^?J",null,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^8",53,"^?N","^?S","^:",53,"^?G",2,"^?O",true,"^[",["^10",["^?C",["^10",[["^@0","^@V"]]]]],"^6","Equivalent to React.render"],"^88",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDiffuseLighting \"hello\")\n(feDiffuseLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDiffuseLighting {:onClick f} \"hello\")\n(feDiffuseLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n(feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^89","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDiffuseLighting \"hello\")\n(feDiffuseLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDiffuseLighting {:onClick f} \"hello\")\n(feDiffuseLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n(feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^X",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(filter \"hello\")\n(filter nil \"hello\")\n\nThese two are made equivalent at compile time\n(filter {:onClick f} \"hello\")\n(filter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(filter :#the-id.klass.other-klass \"hello\")\n(filter :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8:","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(filter \"hello\")\n(filter nil \"hello\")\n\nThese two are made equivalent at compile time\n(filter {:onClick f} \"hello\")\n(filter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(filter :#the-id.klass.other-klass \"hello\")\n(filter :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8;",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComposite \"hello\")\n(feComposite nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComposite {:onClick f} \"hello\")\n(feComposite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComposite :#the-id.klass.other-klass \"hello\")\n(feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8<","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComposite \"hello\")\n(feComposite nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComposite {:onClick f} \"hello\")\n(feComposite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComposite :#the-id.klass.other-klass \"hello\")\n(feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8=",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mesh \"hello\")\n(mesh nil \"hello\")\n\nThese two are made equivalent at compile time\n(mesh {:onClick f} \"hello\")\n(mesh #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mesh :#the-id.klass.other-klass \"hello\")\n(mesh :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8>","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mesh \"hello\")\n(mesh nil \"hello\")\n\nThese two are made equivalent at compile time\n(mesh {:onClick f} \"hello\")\n(mesh #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mesh :#the-id.klass.other-klass \"hello\")\n(mesh :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8?",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(var \"hello\")\n(var nil \"hello\")\n\nThese two are made equivalent at compile time\n(var {:onClick f} \"hello\")\n(var #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(var :#the-id.klass.other-klass \"hello\")\n(var :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8@","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(var \"hello\")\n(var nil \"hello\")\n\nThese two are made equivalent at compile time\n(var {:onClick f} \"hello\")\n(var #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(var :#the-id.klass.other-klass \"hello\")\n(var :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8A",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tspan \"hello\")\n(tspan nil \"hello\")\n\nThese two are made equivalent at compile time\n(tspan {:onClick f} \"hello\")\n(tspan #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tspan :#the-id.klass.other-klass \"hello\")\n(tspan :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8B","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tspan \"hello\")\n(tspan nil \"hello\")\n\nThese two are made equivalent at compile time\n(tspan {:onClick f} \"hello\")\n(tspan #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tspan :#the-id.klass.other-klass \"hello\")\n(tspan :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8C",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ol \"hello\")\n(ol nil \"hello\")\n\nThese two are made equivalent at compile time\n(ol {:onClick f} \"hello\")\n(ol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ol :#the-id.klass.other-klass \"hello\")\n(ol :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8D","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ol \"hello\")\n(ol nil \"hello\")\n\nThese two are made equivalent at compile time\n(ol {:onClick f} \"hello\")\n(ol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ol :#the-id.klass.other-klass \"hello\")\n(ol :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8E",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(details \"hello\")\n(details nil \"hello\")\n\nThese two are made equivalent at compile time\n(details {:onClick f} \"hello\")\n(details #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(details :#the-id.klass.other-klass \"hello\")\n(details :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8F","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(details \"hello\")\n(details nil \"hello\")\n\nThese two are made equivalent at compile time\n(details {:onClick f} \"hello\")\n(details #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(details :#the-id.klass.other-klass \"hello\")\n(details :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8G",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(line \"hello\")\n(line nil \"hello\")\n\nThese two are made equivalent at compile time\n(line {:onClick f} \"hello\")\n(line #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(line :#the-id.klass.other-klass \"hello\")\n(line :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8H","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(line \"hello\")\n(line nil \"hello\")\n\nThese two are made equivalent at compile time\n(line {:onClick f} \"hello\")\n(line #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(line :#the-id.klass.other-klass \"hello\")\n(line :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8I",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(col \"hello\")\n(col nil \"hello\")\n\nThese two are made equivalent at compile time\n(col {:onClick f} \"hello\")\n(col #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(col :#the-id.klass.other-klass \"hello\")\n(col :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8J","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(col \"hello\")\n(col nil \"hello\")\n\nThese two are made equivalent at compile time\n(col {:onClick f} \"hello\")\n(col #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(col :#the-id.klass.other-klass \"hello\")\n(col :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8K",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(label \"hello\")\n(label nil \"hello\")\n\nThese two are made equivalent at compile time\n(label {:onClick f} \"hello\")\n(label #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(label :#the-id.klass.other-klass \"hello\")\n(label :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8L","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(label \"hello\")\n(label nil \"hello\")\n\nThese two are made equivalent at compile time\n(label {:onClick f} \"hello\")\n(label #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(label :#the-id.klass.other-klass \"hello\")\n(label :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8M",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(picture \"hello\")\n(picture nil \"hello\")\n\nThese two are made equivalent at compile time\n(picture {:onClick f} \"hello\")\n(picture #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(picture :#the-id.klass.other-klass \"hello\")\n(picture :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8N","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(picture \"hello\")\n(picture nil \"hello\")\n\nThese two are made equivalent at compile time\n(picture {:onClick f} \"hello\")\n(picture #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(picture :#the-id.klass.other-klass \"hello\")\n(picture :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8O",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rt \"hello\")\n(rt nil \"hello\")\n\nThese two are made equivalent at compile time\n(rt {:onClick f} \"hello\")\n(rt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rt :#the-id.klass.other-klass \"hello\")\n(rt :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8P","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rt \"hello\")\n(rt nil \"hello\")\n\nThese two are made equivalent at compile time\n(rt {:onClick f} \"hello\")\n(rt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rt :#the-id.klass.other-klass \"hello\")\n(rt :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8Q",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h6 \"hello\")\n(h6 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h6 {:onClick f} \"hello\")\n(h6 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h6 :#the-id.klass.other-klass \"hello\")\n(h6 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8R","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h6 \"hello\")\n(h6 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h6 {:onClick f} \"hello\")\n(h6 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h6 :#the-id.klass.other-klass \"hello\")\n(h6 :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8S",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(vkern \"hello\")\n(vkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(vkern {:onClick f} \"hello\")\n(vkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(vkern :#the-id.klass.other-klass \"hello\")\n(vkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8T","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(vkern \"hello\")\n(vkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(vkern {:onClick f} \"hello\")\n(vkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(vkern :#the-id.klass.other-klass \"hello\")\n(vkern :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8U",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(link \"hello\")\n(link nil \"hello\")\n\nThese two are made equivalent at compile time\n(link {:onClick f} \"hello\")\n(link #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(link :#the-id.klass.other-klass \"hello\")\n(link :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8V","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(link \"hello\")\n(link nil \"hello\")\n\nThese two are made equivalent at compile time\n(link {:onClick f} \"hello\")\n(link #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(link :#the-id.klass.other-klass \"hello\")\n(link :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8W",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(defs \"hello\")\n(defs nil \"hello\")\n\nThese two are made equivalent at compile time\n(defs {:onClick f} \"hello\")\n(defs #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(defs :#the-id.klass.other-klass \"hello\")\n(defs :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8X","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(defs \"hello\")\n(defs nil \"hello\")\n\nThese two are made equivalent at compile time\n(defs {:onClick f} \"hello\")\n(defs #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(defs :#the-id.klass.other-klass \"hello\")\n(defs :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8Y",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyph \"hello\")\n(glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyph {:onClick f} \"hello\")\n(glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyph :#the-id.klass.other-klass \"hello\")\n(glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^8Z","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyph \"hello\")\n(glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyph {:onClick f} \"hello\")\n(glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyph :#the-id.klass.other-klass \"hello\")\n(glyph :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8[",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(colgroup \"hello\")\n(colgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(colgroup {:onClick f} \"hello\")\n(colgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(colgroup :#the-id.klass.other-klass \"hello\")\n(colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^90","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(colgroup \"hello\")\n(colgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(colgroup {:onClick f} \"hello\")\n(colgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(colgroup :#the-id.klass.other-klass \"hello\")\n(colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^91",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meter \"hello\")\n(meter nil \"hello\")\n\nThese two are made equivalent at compile time\n(meter {:onClick f} \"hello\")\n(meter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meter :#the-id.klass.other-klass \"hello\")\n(meter :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^92","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meter \"hello\")\n(meter nil \"hello\")\n\nThese two are made equivalent at compile time\n(meter {:onClick f} \"hello\")\n(meter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meter :#the-id.klass.other-klass \"hello\")\n(meter :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^93",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdo \"hello\")\n(bdo nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdo {:onClick f} \"hello\")\n(bdo #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdo :#the-id.klass.other-klass \"hello\")\n(bdo :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^94","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdo \"hello\")\n(bdo nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdo {:onClick f} \"hello\")\n(bdo #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdo :#the-id.klass.other-klass \"hello\")\n(bdo :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^95",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feImage \"hello\")\n(feImage nil \"hello\")\n\nThese two are made equivalent at compile time\n(feImage {:onClick f} \"hello\")\n(feImage #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feImage :#the-id.klass.other-klass \"hello\")\n(feImage :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^96","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feImage \"hello\")\n(feImage nil \"hello\")\n\nThese two are made equivalent at compile time\n(feImage {:onClick f} \"hello\")\n(feImage #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feImage :#the-id.klass.other-klass \"hello\")\n(feImage :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$b",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(b \"hello\")\n(b nil \"hello\")\n\nThese two are made equivalent at compile time\n(b {:onClick f} \"hello\")\n(b #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(b :#the-id.klass.other-klass \"hello\")\n(b :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^97","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(b \"hello\")\n(b nil \"hello\")\n\nThese two are made equivalent at compile time\n(b {:onClick f} \"hello\")\n(b #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(b :#the-id.klass.other-klass \"hello\")\n(b :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^98",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(svg \"hello\")\n(svg nil \"hello\")\n\nThese two are made equivalent at compile time\n(svg {:onClick f} \"hello\")\n(svg #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(svg :#the-id.klass.other-klass \"hello\")\n(svg :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^99","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(svg \"hello\")\n(svg nil \"hello\")\n\nThese two are made equivalent at compile time\n(svg {:onClick f} \"hello\")\n(svg #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(svg :#the-id.klass.other-klass \"hello\")\n(svg :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9:",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTile \"hello\")\n(feTile nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTile {:onClick f} \"hello\")\n(feTile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTile :#the-id.klass.other-klass \"hello\")\n(feTile :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9;","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTile \"hello\")\n(feTile nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTile {:onClick f} \"hello\")\n(feTile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTile :#the-id.klass.other-klass \"hello\")\n(feTile :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$macro-create-element",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",197,"^9",7,"^:",197,"^;",27,"^[",["^10",["^?C",["^10",[["~$type","^11"],["^@Y","^11","~$csskw"]]]]],"^6","Runtime interpretation of props. Used internally by element generation when the macro cannot expand the element at compile time.","^?D",["^ ","^?E",false,"^?F",3,"^?G",3,"^?H",["^10",[["^@Y","^11"],["^@Y","^11","^@Z"]]],"^[",["^10",[["^@Y","^11"],["^@Y","^11","^@Z"]]],"^?I",["^10",[null,null]]]],"^12","~$com.fulcrologic.fulcro.dom/macro-create-element","^7","com/fulcrologic/fulcro/dom.cljs","^;",27,"^?D",["^ ","^?E",false,"^?F",3,"^?G",3,"^?H",["^10",[["^@Y","^11"],["^@Y","^11","^@Z"]]],"^[",["^10",[["^@Y","^11"],["^@Y","^11","^@Z"]]],"^?I",["^10",[null,null]]],"^?H",["^10",[["^@Y","^11"],["^@Y","^11","^@Z"]]],"^?J",null,"^?F",3,"^?I",["^10",[null,null]],"^9",1,"^?E",false,"^?K",[["^ ","^?F",2,"^?E",false,"^?L","^?M"],["^ ","^?F",3,"^?E",false,"^?L","^?M"]],"^8",197,"^:",197,"^?G",3,"^?O",true,"^[",["^10",[["^@Y","^11"],["^@Y","^11","^@Z"]]],"^6","Runtime interpretation of props. Used internally by element generation when the macro cannot expand the element at compile time."],"^9<",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ellipse \"hello\")\n(ellipse nil \"hello\")\n\nThese two are made equivalent at compile time\n(ellipse {:onClick f} \"hello\")\n(ellipse #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ellipse :#the-id.klass.other-klass \"hello\")\n(ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9=","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ellipse \"hello\")\n(ellipse nil \"hello\")\n\nThese two are made equivalent at compile time\n(ellipse {:onClick f} \"hello\")\n(ellipse #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ellipse :#the-id.klass.other-klass \"hello\")\n(ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9>",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(code \"hello\")\n(code nil \"hello\")\n\nThese two are made equivalent at compile time\n(code {:onClick f} \"hello\")\n(code #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(code :#the-id.klass.other-klass \"hello\")\n(code :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9?","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(code \"hello\")\n(code nil \"hello\")\n\nThese two are made equivalent at compile time\n(code {:onClick f} \"hello\")\n(code #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(code :#the-id.klass.other-klass \"hello\")\n(code :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9@",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dialog \"hello\")\n(dialog nil \"hello\")\n\nThese two are made equivalent at compile time\n(dialog {:onClick f} \"hello\")\n(dialog #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dialog :#the-id.klass.other-klass \"hello\")\n(dialog :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9A","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dialog \"hello\")\n(dialog nil \"hello\")\n\nThese two are made equivalent at compile time\n(dialog {:onClick f} \"hello\")\n(dialog #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dialog :#the-id.klass.other-klass \"hello\")\n(dialog :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9B",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(linearGradient \"hello\")\n(linearGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(linearGradient {:onClick f} \"hello\")\n(linearGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(linearGradient :#the-id.klass.other-klass \"hello\")\n(linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9C","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(linearGradient \"hello\")\n(linearGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(linearGradient {:onClick f} \"hello\")\n(linearGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(linearGradient :#the-id.klass.other-klass \"hello\")\n(linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9D",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(discard \"hello\")\n(discard nil \"hello\")\n\nThese two are made equivalent at compile time\n(discard {:onClick f} \"hello\")\n(discard #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(discard :#the-id.klass.other-klass \"hello\")\n(discard :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9E","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(discard \"hello\")\n(discard nil \"hello\")\n\nThese two are made equivalent at compile time\n(discard {:onClick f} \"hello\")\n(discard #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(discard :#the-id.klass.other-klass \"hello\")\n(discard :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9F",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-src \"hello\")\n(font-face-src nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-src {:onClick f} \"hello\")\n(font-face-src #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-src :#the-id.klass.other-klass \"hello\")\n(font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9G","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-src \"hello\")\n(font-face-src nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-src {:onClick f} \"hello\")\n(font-face-src #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-src :#the-id.klass.other-klass \"hello\")\n(font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9H",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(noscript \"hello\")\n(noscript nil \"hello\")\n\nThese two are made equivalent at compile time\n(noscript {:onClick f} \"hello\")\n(noscript #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(noscript :#the-id.klass.other-klass \"hello\")\n(noscript :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9I","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(noscript \"hello\")\n(noscript nil \"hello\")\n\nThese two are made equivalent at compile time\n(noscript {:onClick f} \"hello\")\n(noscript #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(noscript :#the-id.klass.other-klass \"hello\")\n(noscript :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9J",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateTransform \"hello\")\n(animateTransform nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateTransform {:onClick f} \"hello\")\n(animateTransform #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateTransform :#the-id.klass.other-klass \"hello\")\n(animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9K","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateTransform \"hello\")\n(animateTransform nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateTransform {:onClick f} \"hello\")\n(animateTransform #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateTransform :#the-id.klass.other-klass \"hello\")\n(animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9L",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feColorMatrix \"hello\")\n(feColorMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feColorMatrix {:onClick f} \"hello\")\n(feColorMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feColorMatrix :#the-id.klass.other-klass \"hello\")\n(feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9M","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feColorMatrix \"hello\")\n(feColorMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feColorMatrix {:onClick f} \"hello\")\n(feColorMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feColorMatrix :#the-id.klass.other-klass \"hello\")\n(feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9N",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h2 \"hello\")\n(h2 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h2 {:onClick f} \"hello\")\n(h2 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h2 :#the-id.klass.other-klass \"hello\")\n(h2 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9O","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h2 \"hello\")\n(h2 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h2 {:onClick f} \"hello\")\n(h2 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h2 :#the-id.klass.other-klass \"hello\")\n(h2 :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9P",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(area \"hello\")\n(area nil \"hello\")\n\nThese two are made equivalent at compile time\n(area {:onClick f} \"hello\")\n(area #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(area :#the-id.klass.other-klass \"hello\")\n(area :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9Q","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(area \"hello\")\n(area nil \"hello\")\n\nThese two are made equivalent at compile time\n(area {:onClick f} \"hello\")\n(area #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(area :#the-id.klass.other-klass \"hello\")\n(area :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9R",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(br \"hello\")\n(br nil \"hello\")\n\nThese two are made equivalent at compile time\n(br {:onClick f} \"hello\")\n(br #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(br :#the-id.klass.other-klass \"hello\")\n(br :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9S","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(br \"hello\")\n(br nil \"hello\")\n\nThese two are made equivalent at compile time\n(br {:onClick f} \"hello\")\n(br #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(br :#the-id.klass.other-klass \"hello\")\n(br :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$create-element",["^ ","^?B",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",70,"^9",7,"^:",70,"^;",21,"^[",["^10",["^?C",["^10",[["~$tag"],["^A1","^@7"],["^A1","^@7","~$&","~$children"]]]]],"^6","Create a DOM element for which there exists no corresponding function.\n   Useful to create DOM elements not included in React.DOM. Equivalent\n   to calling `js/React.createElement`","^?D",["^ ","^?E",true,"^?F",2,"^?G",2,"^?H",["^10",[["^A1"],["^A1","^@7"]]],"^[",["^10",[["^A1"],["^A1","^@7"],["^A1","^@7","~$&","^A2"]]],"^?I",["^10",[null,null,null]]]],"^12","~$com.fulcrologic.fulcro.dom/create-element","^7","com/fulcrologic/fulcro/dom.cljs","^;",21,"^?D",["^ ","^?E",true,"^?F",2,"^?G",2,"^?H",["^10",[["^A1"],["^A1","^@7"]]],"^[",["^10",[["^A1"],["^A1","^@7"],["^A1","^@7","~$&","^A2"]]],"^?I",["^10",[null,null,null]]],"^?H",["^10",[["^A1"],["^A1","^@7"]]],"^?J",null,"^?F",2,"^?I",["^10",[null,null,null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",1,"^?E",false,"^?L","^?M"],["^ ","^?F",2,"^?E",false,"^?L","^?S"],["^ ","^?F",2,"^?E",true,"^?L","^?S"]],"^8",70,"^:",70,"^?G",2,"^?O",true,"^[",["^10",[["^A1"],["^A1","^@7"],["^A1","^@7","~$&","^A2"]]],"^6","Create a DOM element for which there exists no corresponding function.\n   Useful to create DOM elements not included in React.DOM. Equivalent\n   to calling `js/React.createElement`"],"^9T",["^ ","^?B",null,"^5",["^ ","^[",["^10",["^?C",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(image \"hello\")\n(image nil \"hello\")\n\nThese two are made equivalent at compile time\n(image {:onClick f} \"hello\")\n(image #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(image :#the-id.klass.other-klass \"hello\")\n(image :#the-id.klass.other-klass {:onClick f} \"hello\")","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^7",null],"^12","^9U","^7","com/fulcrologic/fulcro/dom.cljs","^?D",["^ ","^?E",true,"^?F",0,"^?G",0,"^?H",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?I",["^10",[null]]],"^?H",[["^10",["^11"]]],"^?J",null,"^?F",0,"^?I",["^10",[null]],"^9",1,"^?E",true,"^?K",[["^ ","^?F",0,"^?E",true,"^?L","^?M"]],"^8",226,"^?N","^?M","^?G",0,"^?O",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(image \"hello\")\n(image nil \"hello\")\n\nThese two are made equivalent at compile time\n(image {:onClick f} \"hello\")\n(image #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(image :#the-id.klass.other-klass \"hello\")\n(image :#the-id.klass.other-klass {:onClick f} \"hello\")"]],"^:>",["^ ","^?","^@","^9Z","^9[","^:0","^:1","^B","^B","~$s","^@","^:1","^:1","^9[","^9[","^@","^@","^15","^15"],"~:cljs.analyzer/constants",["^ ","^:<",["^O",["~$cljs.core/array?","~$cljs.spec.alpha/*","~:children","~$cljs.core/keyword?","~$p1__64754#","~$cljs.core/vector?","~$p1__64755#","~:element","~:else","^@?","~:number","~$cljs.spec.alpha/cat","~:warn","~$p1__64756#","~$cljs.core/string?","~$cljs.spec.alpha/or","~:css","~$cljs.core/map?","~:string","~$%","~$cljs.core/number?","~$cljs.core/object?","~$fn*","~:nil","~$cljs.core/nil?","~$cljs.core/fn","~:js-object","~:attrs","~$cljs.core/not","~:com.fulcrologic.fulcro.dom/dom-element-args","~$cljs.core/and","~:collection","~$cljs.core/seq?","~:auto","~:p","~:map","~$cljs.core/or","~$cljs.spec.alpha/?"]],"~:order",["^AP","^A?","^AD","^AW","^A8","^AN","^AC","^AJ","^AK","^AU","^AI","^A9","^AQ","^AE","^AO","^@?","^AM","^A;","^AH","^A7","^A6","^AF","^AB","^A>","^AG","^AR","^AA","^AV","^A:","^AS","^A5","^A<","^AL","~$%","^A=","^A@","~:p","^AT"]],"^:E",["^ ","^:>",["^O",[]],"^:=",["^O",[]]],"^:F",["^ "],"^:G",["^:4","^B","^@","^:;","^:1","^:6","^:7","^:3","^9Y","^:5","^9["]],"^14","^15","~:ns-specs",["^ ","^AP",["^10",["^A?","^AD",["^10",["^AW","^A8"]],"^AN",["^10",["^AW",["^10",["^AC","^AJ","^AK","^AU",["^10",["^AI",["^A9"],["^10",["^AQ",["^10",["^AE","^A9"]],["^10",["^AO",["^10",["^@?","^A9"]]]]]]]],"^AM",["^10",["^AI",["^A;"],["^10",["^AQ",["^10",["^AH","^A;"]],["^10",["^AO",["^10",["^@?","^A;"]]]]]]]]]]]],"^A7",["^10",["^A6",["^10",["^AC","^AF","^AB","^A>","^AG","^AR",["^10",["^AI",["^AA"],["^10",["^AV",["^10",["^A:","^AA"]],["^10",["^AS","^AA"]],["^10",["^A5","^AA"]]]]]],"^AJ","^AK","^A<","^@?"]]]]]]],"~:ns-speced-vars",[],"~:compiler-options",["^:U",[["^A[","~:static-fns"],true,["^A[","~:elide-asserts"],false,["^A[","~:optimize-constants"],null,["^A[","^:L"],null,["^A[","~:external-config"],null,["^A[","~:tooling-config"],null,["^A[","~:emit-constants"],null,["^A[","~:load-tests"],null,["^A[","~:form-size-threshold"],null,["^A[","~:infer-externs"],true,["^A[","^:N"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^A[","~:fn-invoke-direct"],null,["^A[","~:source-map"],"/dev/null"]]]