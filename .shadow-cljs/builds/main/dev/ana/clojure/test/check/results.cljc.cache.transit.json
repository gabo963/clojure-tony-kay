["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.results');\ngoog.require('cljs.core');\n\n/**\n * @interface\n */\nclojure.test.check.results.Result = function(){};\n\n/**\n * A boolean indicating if the result passed.\n */\nclojure.test.check.results.pass_QMARK_ = (function clojure$test$check$results$pass_QMARK_(result){\nif((((!((result == null)))) && ((!((result.clojure$test$check$results$Result$pass_QMARK_$arity$1 == null)))))){\nreturn result.clojure$test$check$results$Result$pass_QMARK_$arity$1(result);\n} else {\nvar x__4433__auto__ = (((result == null))?null:result);\nvar m__4434__auto__ = (clojure.test.check.results.pass_QMARK_[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(result) : m__4434__auto__.call(null,result));\n} else {\nvar m__4431__auto__ = (clojure.test.check.results.pass_QMARK_[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(result) : m__4431__auto__.call(null,result));\n} else {\nthrow cljs.core.missing_protocol(\"Result.pass?\",result);\n}\n}\n}\n});\n\n/**\n * A map of data about the trial.\n */\nclojure.test.check.results.result_data = (function clojure$test$check$results$result_data(result){\nif((((!((result == null)))) && ((!((result.clojure$test$check$results$Result$result_data$arity$1 == null)))))){\nreturn result.clojure$test$check$results$Result$result_data$arity$1(result);\n} else {\nvar x__4433__auto__ = (((result == null))?null:result);\nvar m__4434__auto__ = (clojure.test.check.results.result_data[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(result) : m__4434__auto__.call(null,result));\n} else {\nvar m__4431__auto__ = (clojure.test.check.results.result_data[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(result) : m__4431__auto__.call(null,result));\n} else {\nthrow cljs.core.missing_protocol(\"Result.result-data\",result);\n}\n}\n}\n});\n\ngoog.object.set(clojure.test.check.results.Result,\"_\",true);\n\nvar G__44795_44816 = clojure.test.check.results.pass_QMARK_;\nvar G__44796_44817 = \"_\";\nvar G__44797_44818 = ((function (G__44795_44816,G__44796_44817){\nreturn (function (this$){\nreturn cljs.core.boolean$(this$);\n});})(G__44795_44816,G__44796_44817))\n;\ngoog.object.set(G__44795_44816,G__44796_44817,G__44797_44818);\n\nvar G__44798_44824 = clojure.test.check.results.result_data;\nvar G__44799_44825 = \"_\";\nvar G__44800_44826 = ((function (G__44798_44824,G__44799_44825){\nreturn (function (this$){\nreturn null;\n});})(G__44798_44824,G__44799_44825))\n;\ngoog.object.set(G__44798_44824,G__44799_44825,G__44800_44826);\n\ngoog.object.set(clojure.test.check.results.Result,\"null\",true);\n\nvar G__44802_44830 = clojure.test.check.results.pass_QMARK_;\nvar G__44803_44831 = \"null\";\nvar G__44804_44832 = ((function (G__44802_44830,G__44803_44831){\nreturn (function (this$){\nreturn false;\n});})(G__44802_44830,G__44803_44831))\n;\ngoog.object.set(G__44802_44830,G__44803_44831,G__44804_44832);\n\nvar G__44805_44834 = clojure.test.check.results.result_data;\nvar G__44806_44835 = \"null\";\nvar G__44807_44836 = ((function (G__44805_44834,G__44806_44835){\nreturn (function (this$){\nreturn null;\n});})(G__44805_44834,G__44806_44835))\n;\ngoog.object.set(G__44805_44834,G__44806_44835,G__44807_44836);\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/results.cljc","~:line",12,"~:column",5,"~:end-line",12,"~:end-column",31,"~:author","Gary Fredericks","~:doc","A protocol and helper functions for trial results."],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.test.check.results","~:op","~:ns","~:imports",null,"~:requires",["^ ","^C","^C","~$goog","^W"],"~:seen",["^P",[]],"~:uses",null,"~:require-macros",["^ ","^C","^C"],"~:form",["~#list",["~$ns","^R"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^W","^C"]],"^T","^R","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/results.cljc"],"~:compiled-at",1705355272591,"~:resource-name","clojure/test/check/results.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"A protocol and helper functions for trial results.\"}\n    clojure.test.check.results)\n\n(defprotocol Result\n  (pass? [result] \"A boolean indicating if the result passed.\")\n  (result-data [result] \"A map of data about the trial.\"))\n\n(extend-protocol Result\n  #?(:clj Object :cljs default)\n  (pass? [this] (boolean this))\n  (result-data [this] nil)\n\n  nil\n  (pass? [this] false)\n  (result-data [this] nil))\n","~:reader-features",["^P",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;AAaA,AAAA;AAAA;;;AAAA,AAAaO;;AAAb;;;AAAA,AACGL,AAAOM;AADV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACUA,AAAAA;AADV,AACUA,AAAAA;;AADV,AAAAR,AAAA,AAAA,AAAA,AAAA,AACUQ,AAAAA;AADVP,AAAA,AAAAC,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACUO,AAAAA;;AADV,AAAAJ,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACUI,AAAAA;;AADV,AAAA,AAAAH,AAAA,AACUG;;;;;;AADV;;;AAAA,AAEGF,AAAaE;AAFhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEgBA,AAAAA;AAFhB,AAEgBA,AAAAA;;AAFhB,AAAAR,AAAA,AAAA,AAAA,AAAA,AAEgBQ,AAAAA;AAFhBP,AAAA,AAAAK,AAAA,AAAAH,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEgBO,AAAAA;;AAFhB,AAAAJ,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAEgBI,AAAAA;;AAFhB,AAAA,AAAAH,AAAA,AAEgBG;;;;;;AAFhB,AAIA,AAAA,AAAA,AAAAC,AAAAF,AAAA,AAAA;;AAAA,AAAAG,AAAAR;AAAAS,AAAA;AAAAC,AAEE;AAAQU;AAAR,AAAc,AAACC,AAAQD;;;AAFzB,AAAA,AAAAb,AAAAC,AAAAC,AAAAC;;AAAA,AAAAC,AAAAP;AAAAQ,AAAA;AAAAC,AAGE;AAAcO;AAAd,AAAA;;;AAHF,AAAA,AAAAb,AAAAI,AAAAC,AAAAC;;AAAA,AAAA,AAAAN,AAAAF,AAAA,AAAA;;AAAA,AAAAS,AAAAd;AAAAe,AAAA;AAAAC,AAME;AAAQI;AAAR,AAAA;;;AANF,AAAA,AAAAb,AAAAO,AAAAC,AAAAC;;AAAA,AAAAC,AAAAb;AAAAc,AAAA;AAAAC,AAOE;AAAcC;AAAd,AAAA;;;AAPF,AAAA,AAAAb,AAAAU,AAAAC,AAAAC","names",["x__4433__auto__","m__4434__auto__","clojure.test.check.results/pass?","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","clojure.test.check.results/result-data","clojure.test.check.results/Result","result","goog.object/set","G__44795","G__44796","G__44797","G__44798","G__44799","G__44800","G__44802","G__44803","G__44804","G__44805","G__44806","G__44807","this","cljs.core/boolean"]]],"~:cache-keys",["~#cmap",[["^16","goog/math/math.js"],[1705355193711,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^P",[]],"~:deps-syms",["^W","~$goog.array","~$goog.asserts"]]],["^16","goog/array/array.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W","^1H"]]],["^16","goog/debug/error.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W"]]],["^16","goog/dom/nodetype.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W"]]],["^16","goog/object/object.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W"]]],"~:SHADOW-TIMESTAMP",[1705355194000,1705351486000],["^16","goog/math/long.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W","^1H","~$goog.reflect"]]],["^16","goog/string/internal.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W"]]],["^16","goog/functions/functions.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W"]]],["^16","goog/structs/map.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^16","goog/asserts/asserts.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^16","goog/uri/uri.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W","^1G","^1H","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^16","goog/base.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",[]]],["^16","goog/structs/structs.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W","^1G","~$goog.object"]]],["^16","goog/string/string.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W","~$goog.string.internal"]]],["^16","goog/reflect/reflect.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W"]]],["^16","goog/string/stringbuffer.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W"]]],["^16","goog/iter/iter.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W","^1G","^1H","~$goog.functions","~$goog.math"]]],["^16","cljs/core.cljs"],[1705351486739,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["~$goog.math.Long","~$goog.math.Integer","^1O","^1U","^1G","~$goog.Uri","~$goog.string.StringBuffer"]]],["^16","goog/math/integer.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W"]]],["^16","goog/uri/utils.js"],[1705355193711,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W","^1G","^1H","^1O"]]],["^16","clojure/test/check/results.cljc"],[1705354814754,"^1C",["^ ","^1D",null,"^1E",["^P",[]],"^1F",["^W","^C"]]]]],"~:clj-info",["^ ","jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1684518327000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1705355194000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1684871064000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1705351486000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1680040092000,"jar:file:/Users/dataico.macbook.one/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1705351486000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/results.cljc","^7",12,"^8",5,"^9",12,"^:",31,"^;","Gary Fredericks","^<","A protocol and helper functions for trial results."],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M"],"~:shadow/protocol-prefixes",["^P",["clojure$test$check$results$Result$"]],"^N",null,"^O",["^P",[]],"^Q","^R","^U",null,"^V",["^ ","^C","^C","^W","^W"],"^X",["^P",[]],"^Y",null,"~:defs",["^ ","~$Result",["^ ","^5",["^ ","^6","clojure/test/check/results.cljc","^7",14,"^8",14,"^9",14,"^:",20,"~:protocol-symbol",true,"~:jsdoc",["^10",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$pass?",[["~$result"]],"~$result-data",[["^2T"]]]]],"^2O",true,"^Q","~$clojure.test.check.results/Result","^6","clojure/test/check/results.cljc","^:",20,"^8",1,"^7",14,"^2Q",["^ ","^2R",["^ ","^2S",[["^2T"]],"^2U",[["^2T"]]]],"~:info",null,"^9",14,"~:tag","~$any","~:impls",["^P",[null,"~$default"]],"^2P",["^10",["@interface"]]],"^2S",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/results.cljc","^7",15,"^8",4,"^9",15,"^:",9,"~:protocol","^2V","^<","A boolean indicating if the result passed.","~:arglists",["^10",["~$quote",["^10",[["^2T"]]]]]],"^31","^2V","^Q","~$clojure.test.check.results/pass?","^6","clojure/test/check/results.cljc","^:",9,"~:method-params",["^10",[["^2T"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",14,"~:ret-tag","^2Y","^9",15,"~:max-fixed-arity",1,"~:fn-var",true,"^32",["^10",["^33",["^10",[["^2T"]]]]],"^<","A boolean indicating if the result passed."],"^2U",["^ ","^30",null,"^5",["^ ","^6","clojure/test/check/results.cljc","^7",16,"^8",4,"^9",16,"^:",15,"^31","^2V","^<","A map of data about the trial.","^32",["^10",["^33",["^10",[["^2T"]]]]]],"^31","^2V","^Q","~$clojure.test.check.results/result-data","^6","clojure/test/check/results.cljc","^:",15,"^35",["^10",[["^2T"]]],"^36",null,"^37",["^10",[null,null]],"^8",1,"^38",false,"^7",14,"^39","^2Y","^9",16,"^3:",1,"^3;",true,"^32",["^10",["^33",["^10",[["^2T"]]]]],"^<","A map of data about the trial."]],"^Z",["^ ","^C","^C"],"^12",["^ "],"^13",["^ "],"^14",["^W","^C"]],"^T","^R","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1B",[["^3?","~:static-fns"],true,["^3?","~:elide-asserts"],false,["^3?","~:optimize-constants"],null,["^3?","^19"],null,["^3?","~:external-config"],null,["^3?","~:tooling-config"],null,["^3?","~:emit-constants"],null,["^3?","~:load-tests"],null,["^3?","~:form-size-threshold"],null,["^3?","~:infer-externs"],true,["^3?","^1;"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3?","~:fn-invoke-direct"],null,["^3?","~:source-map"],"/dev/null"]]]